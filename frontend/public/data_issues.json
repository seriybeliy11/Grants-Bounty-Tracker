[
  {
    "state": "open",
    "title": "Framework for contract development",
    "body": "### Summary\n\n![vendee](https://github.com/kokkekpek/vendee/raw/main/docs/cover.svg)\nHello. I propose to improve the framework for working with smart contracts by transferring the best practices from my framework for the Venom TVM blockchain - [Vendee](https://github.com/kokkekpek/vendee)\n\n### Context\n\nThree years ago I became interested in TVM. At that moment I made a choice towards Everscale. To work with the blockchain, I wrote my own scripts. This eventually turned into the [jton](https://github.com/kokkekpek/jton) library. Later, I collected all the code from jton into one framework and made a production version. Later, I decided to look at what tools are used in TON and found that my solution has more functionality and is also more convenient then [blueprint](https://github.com/ton-community/blueprint).\n\n### Goals\n\nRewrite the framework to TON so that the community gets a good tool for working with contracts.\n\n### Deliverables\n\n- Separate compilation. Compile only changed files\n- Documentation site\n- Interactive menu\n- Scripts and interactive menu for giver mangment\n- Automatic launch of Sandbox, without specifying in the code\n- Automatic compilation, without specifying in the code\n- Project configuration. Giver keys, compiler versions\n- Automatic generation of wrappers from TLB.\n- Less code in tests and scripts.\n- Scripts for npm package creation\n- Plugin support\n\n### Definition of Done\n\n- [ ] Same functions like Vendee working in TON\n- [ ] Documentation site\n- [ ] Example on Nodejs\n- [ ] Example on React\n\n### Reward\n\n- $ 6,000 in TON equivalent\n- Standard TON Footstep NFT\n\n### Oriental Release Date\n\n**2 month** after approvement",
    "created_at": "2023-06-13T12:13:43Z",
    "updated_at": "2023-06-13T12:50:58Z"
  },
  {
    "state": "open",
    "title": "Add jettons to trust wallet core",
    "body": "### Summary\n\nIntegrate TON blockchain into trust wallet core. https://github.com/trustwallet/wallet-core\n\n\n\n\n\n### Context\n\nProjects that are using wallet-core are Trust Wallet, coinpaprika, IFWallet, Alice, crypto.com, frontier, belko, pumapay.\nNative support for TON has been already added to the Trust Wallet core as another footstep https://github.com/ton-society/ton-footsteps/issues/81. After it has been added to wallet core, and a work from Trust Wallet team, TON appeared in Trust Wallet application. \n\nCurrent footstep is about adding TON Jettons to Trust Wallet core. \n\n### Goals\n\nThe problem addressed is having TON jettons on different wallets used by people.\nThe success metric for the project is merged pull request in wallet-core repository\nhttps://github.com/trustwallet/wallet-core\n\nThere should be ability to sign jetton transfer message\n\nAlso a list of jettons should be added to https://github.com/trustwallet/assets/\n\nExample for checking jetton balance should be provided in order to simplify adding jettons to mobile apps.\n\n### Deliverables\n\nContribution guide to support new blockchain in trust wallet is written here\nhttps://developer.trustwallet.com/wallet-core/newblockchain#overview\n\nWhat needs to be done:\n - Extend the Protobuf protocol so it supports an action of Jetton transfers\n - Add serialization and deserialization of Jetton transfer messages\n - Add additional code so that trust wallet core knows about jettons on ton\n - Add tests for C++\n - Add tests for Swift\n - Add tests for Kotlin\n - Pass the integration tests, code review, correct the comments and merge the pull request\n - Provide API example for checking jetton balance\n - Gather list of Jettons and add them to assets repository\n\n### Definition of Done\n\n - [ ] Merged pull request with Jettons integration to https://github.com/trustwallet/wallet-core\n - [ ] Merged pull request to trust wallet https://github.com/trustwallet/assets/\n - [ ] A code example for checking jetton balance\n\n### Reward\n\n* Standard TON Footstep\n* TBD\n\n### Oriental Release Date\n\nTBD",
    "created_at": "2023-06-08T18:47:49Z",
    "updated_at": "2023-06-08T20:46:29Z"
  },
  {
    "state": "closed",
    "title": "Step-by-step Guide How to by small amount of TON in Tonkeeper via banking card issued in EU (Visa or MasterCard)",
    "body": "### Summary\n\nAn txt file describing Step-by-step Guide How to by small amount of TON in Tonkeeper via banking card issued in EU (Visa or MasterCard)\n\n### Context\n\nCurrently, documentation does not feature How to by small amount of TON in Tonkeeper via banking card issued in EU (Visa or MasterCard)\n\n### Goals\n\n- Create a detailed guide\n- Publish it in TON Docs or TON Blog\n\n### Deliverables\n\ntxt file\n\n### Definition of Done\n\n- [ ] txt file created\n- [ ] txt file filled\n- [ ] txt file hosted in google drive\n- [ ] txt file shared to community\n\n### Reward\n\n- Standard TON Footstep NFT\n- 1000$ in TON in advance\n- 1000$ in TON  for each definition of done\n- 10k $ in TON  when txt file will be shared\n\n### Oriental Release Date\n\nhz",
    "created_at": "2023-06-08T11:39:14Z",
    "updated_at": "2023-06-08T19:54:00Z"
  },
  {
    "state": "closed",
    "title": "Step-by-step Guide How to by small amount of TON in Tonkeeper via banking card issued in EU (Visa or MasterCard)",
    "body": "### Summary\n\nAn txt file describing Step-by-step Guide How to by small amount of TON in Tonkeeper via banking card issued in EU (Visa or MasterCard)\n\n### Context\n\nCurrently, documentation does not feature How to by small amount of TON in Tonkeeper via banking card issued in EU (Visa or MasterCard)\n\n### Goals\n\n- Create a detailed guide\n- Publish it in TON Docs or TON Blog\n\n### Deliverables\n\ntxt file\n\n### Definition of Done\n\n- [ ] txt file created\n- [ ] txt file filled\n- [ ] txt file hosted in google drive\n- [ ] txt file shared to community\n\n### Reward\n\n- Standard TON Footstep NFT\n- 1000$ in TON in advance\n- 1000$ in TON  for each definition of done\n- 10k $ in TON  when txt file will be shared\n\n### Oriental Release Date\n\nhz",
    "created_at": "2023-06-08T11:39:06Z",
    "updated_at": "2023-06-08T19:54:31Z"
  },
  {
    "state": "open",
    "title": "TON Speedrun",
    "body": "### Summary\n\nWebsite with quests - tutorials on TON. Clone the github, go through 5-6 steps and immediately try some practical thing on TON. And only then proceed to complex tech tutorials.\n\nThis will be the MVP version: https://speedrunethereum.com/\n\n### Context\n\nThe problem of a typical tutorial on TON is that only prepositions are clear to a beginner(cell from c4 using adnl to slice e.t.c), and that there are a lot of steps (and on the 28th step...) in the tutorials, each of which has a lot of theory.\n\nSo if we imagine the process of a developer rolling into the ecosystem as a funnel, it will turn out that many fly off at the moment of the first touch with the technical side of TON(Although it is worth noting here that the people working on onboarding developers in TON are doing an excellent job and over the past year everything has become much better.).\n\nAnd I want it to be different, as it is done in games, the first quests are simple and exciting to feel the game, and then thousands of hours in this game are just around the corner.\n\nI want to make a series of 6 quests working on this principle. A person clones a repository, takes 6-7 steps and is already feeling some working, practically applicable product, and then there are links to already deep and complex tutorials.\n\nAll tutorials will be on one one-page site with a thin connection, and the last 3 quests will be available only after the first three quests are completed (the website will check whether the person has deployed the first three quests from his wallet).\n\nBut of course, in addition to quests, we need articles where to send the user if, after the quest, he wants to delve into the TON. Some of the necessary tutorials and articles are already there, some I want to write as part of this footstep.\n\nThe site itself will be just a deployment page on github pages with a simple design, if the concept works, then in the future it will be possible to complicate the design, as it looks like in the original idea: https://speedrunethereum.com/\n\nThe footstep doesn't mention marketing, as while I'm doing the footstep, I'm planning to get into custdev and thus find the best marketing practices for a similar project, as well as a backlog for future improvements.\n\nQuests and articles that I want to prepare as part of this footstep. Some already exist (I will describe them here to understand the concept):\n\n- 1) Deploy NFT Quest\n\t- ton-community/sandbox project with NFT code and deployment script via qr code (the user will deploy in the test network through the wallet), and then see his NFT in the test network.\n\t\t- Articles:\n\t\t\t- write a simple contract from scratch in ton-community/sandbox (work with c4,throw e.t.c)\n\t\t\t- write tests for a simple contract\n\t\t\t- deploy via wallet (simple deploy pipeline)\n\t\t\t- Blueprint SDK FunC lessons https://github.com/ton-society/ton-footsteps/issues/235\n- 2) Chatbot contract Quest\n\t- Chatbot contract ton-community/sandbox project with tests. The contract itself returns different words depending on the number of entered TON.\n\t\t- Articles:\n\t\t\t- Let's analyze the contract and sending messages\n\t\t\t- ton-community/sandbox tests for messages\n\n- 3) Vending Machine Jetton  Quest\n\t- ton-community/sandbox project for Jetton deploying and playing with it\n\t\t- Articles:\n\t\t\t- Analyze Jetton Standart https://github.com/romanovichim/TonFunClessons_ru/blob/main/9lesson/ninthlesson.md\n\n- 4) Lottery Quest\n\t- Lottery smart contract contract ton-community/sandbox project with tests.\n\t\t- Articles:\n\t\t\t- Analyzing lottery contract\n\t\t\t- About random in TON: https://docs.ton.org/develop/smart-contracts/guidelines/random-number-generation\n\n- 5) TonConnect Quest\n\t- Making ui for the chatbot contract, using https://github.com/ton-connect/sdk\n\t\t- Articles:\n\t\t\t- react_ui login button\n\t\t\t- react_ui send transaction\n\n- 6) Marktetplace Analyzer Quest\n\t- scrtpt using https://www.npmjs.com/package/ton-lite-client for Getgems nft smart contracts, let's find offer sales and auctions in the last hours\n\t\t- Articles:\n\t\t\t- Introductory about ADNL and connecting to it (using https://www.npmjs.com/package/ton-lite-client )\n\t\t\t- Run GetMethod and how sales contracts work (using https://www.npmjs.com/package/ton-lite-client )\n\t\t\t- Collection of transactions on ADNL (using https://www.npmjs.com/package/ton-lite-client )\n\t\t\t\nP.S Articles will be published to dev.to and https://t.me/ton_learn\n\n### Goals\n\nCreate tutorials on TON that first draw a person into the ecosystem, and only then load him with complex technical details\n\n### Deliverables\n\n- 1) Deploy NFT Quest - ton-community/sandbox project with NFT code and deployment script via qr code (the user will deploy in the test network through the wallet), and then see his NFT in the test network.\n\t- Articles:\n\t\t- write a simple contract from scratch in ton-community/sandbox (work with c4,throw e.t.c)\n\t\t- write tests for a simple contract\n\t\t- deploy via wallet (simple deploy pipeline)\n- 2) Chatbot contract Quest - Chatbot contract ton-community/sandbox project with tests. The contract itself returns different words depending on the number of entered TON.\n\t- Articles:\n\t\t- Let's analyze the contract and sending messages\n\t\t- ton-community/sandbox tests for messages\n\n- 3) Vending Machine Jetton  Quest - ton-community/sandbox project for Jetton deploying and playing with it\n\n- 4) Lottery Quest - Lottery smart contract contract ton-community/sandbox project with tests.\n\t- Articles:\n\t\t- Analyzing lottery contract\n\n- 5) TonConnect Quest - Making ui for the chatbot contract, using https://github.com/ton-connect/sdk\n\t- Articles:\n\t\t- react_ui login button\n\t\t- react_ui send transaction\n\n- 6) Marktetplace Analyzer Quest - scrtpt using https://www.npmjs.com/package/ton-lite-client for Getgems nft smart contracts, let's find offer sales and auctions in the last hours\n\t- Articles:\n\t\t- Introductory about ADNL and connecting to it (using https://www.npmjs.com/package/ton-lite-client )\n\t\t- Run GetMethod and how sales contracts work (using https://www.npmjs.com/package/ton-lite-client )\n\t\t- Collection of transactions on ADNL (using https://www.npmjs.com/package/ton-lite-client )\n\t\t\t\n\t\t\t\nGithub pages Website with Tonconnect auth and adnl check so that the last three tasks are available only after the first three\n\n### Definition of Done\n\n- [ ] 1) Deploy NFT Quest - ton-community/sandbox project with NFT code and deployment script via qr code (the user will deploy in the test network through the wallet), and then see his NFT in the test network.\n\t- Articles:\n\t\t- [ ] write a simple contract from scratch in ton-community/sandbox (work with c4,throw e.t.c)\n\t\t- [ ] write tests for a simple contract\n\t\t- [ ] deploy via wallet (simple deploy pipeline)\n- [ ] 2) Chatbot contract Quest - Chatbot contract ton-community/sandbox project with tests. The contract itself returns different words depending on the number of entered TON.\n\t- Articles:\n\t\t- [ ] Let's analyze the contract and sending messages\n\t\t- [ ] ton-community/sandbox tests for messages\n\n- [ ] 3) Vending Machine Jetton  Quest - ton-community/sandbox project for Jetton deploying and playing with it\n\n- [ ] 4) Lottery Quest - Lottery smart contract contract ton-community/sandbox project with tests.\n\t- Articles:\n\t\t- [ ] Analyzing lottery contract\n\n- [ ] 5) TonConnect Quest - Making ui for the chatbot contract, using https://github.com/ton-connect/sdk\n\t- Articles:\n\t\t- [ ] react_ui login button\n\t\t- [ ] react_ui send transaction\n\n- [ ] 6) Marktetplace Analyzer Quest - scrtpt using https://www.npmjs.com/package/ton-lite-client for Getgems nft smart contracts, let's find offer sales and auctions in the last hours\n\t- Articles:\n\t\t- [ ] Introductory about ADNL and connecting to it (using https://www.npmjs.com/package/ton-lite-client )\n\t\t- [ ] Run GetMethod and how sales contracts work (using https://www.npmjs.com/package/ton-lite-client )\n\t\t- [ ] Collection of transactions on ADNL (using https://www.npmjs.com/package/ton-lite-client )\n\t\t\t\n\t\t\t\n- [ ] Github pages Website with Tonconnect auth and adnl check so that the last three tasks are available only after the first three\n\n### Reward\n\n - Standard TON Footstep NFT\n- 1) Deploy NFT Quest (creation and testing) **400 USD in TON equivalent**\n\t- Articles:\n\t\t- write a simple contract from scratch in ton-community/sandbox (work with c4,throw e.t.c) **150 USD in TON equivalent**\n\t\t- write tests for a simple contract **200  USD in TON equivalent**\n\t\t- deploy via wallet (simple deploy pipeline) **200 USD in TON equivalent**\n\t\t\n- 2) Chatbot contract Quest **400 USD in TON equivalent**\n\t- Articles:\n\t\t- Let's analyze the contract and sending messages **100 USD in TON equivalent**\n\t\t- ton-community/sandbox tests for messages **200 USD in TON equivalent**\n\n- 3) Vending Machine Jetton  Quest  (creation and testing) **250 USD in TON equivalent**\n\n- 4) Lottery Quest **400 USD in TON equivalent**\n\t- Articles:\n\t\t- Analyzing lottery contract **100 USD in TON equivalent**\n\n- 5) TonConnect Quest  (creation and testing) **300 USD in TON equivalent**\n\t- Articles:\n\t\t- react_ui login button **200 USD in TON equivalent**\n\t\t- react_ui send transaction **200 USD in TON equivalent**\n\n- 6) Marktetplace Analyzer Quest  (creation and testing) **400 USD in TON equivalent**\n\t- Articles:\n\t\t- Introductory about ADNL and connecting to it (using https://www.npmjs.com/package/ton-lite-client )  **150 USD in TON equivalent**\n\t\t- Run GetMethod and how sales contracts work (using https://www.npmjs.com/package/ton-lite-client )  **200 USD in TON equivalent**\n\t\t- Collection of transactions on ADNL (using https://www.npmjs.com/package/ton-lite-client )  **200 USD in TON equivalent**\n\t\t\t\n\t\t\t\nGithub pages Website with Tonconnect auth and adnl check so that the last three tasks are available only after the first three (creation and testing). **400 USD in TON equivalent**\n\n### Oriental Release Date\n\nI need two months for this footstep",
    "created_at": "2023-06-05T10:36:12Z",
    "updated_at": "2023-06-12T09:23:41Z"
  },
  {
    "state": "open",
    "title": "Step-by-step explanation for TON DNS subdomains system",
    "body": "### Summary\n\nAn article describing how to work with subdomain resolvers, how to create and test tools like `resolve-contract.ton`.\n\nAs the subdomain resolver is rather interleaved with NFT searching code, this article might be better suited for blog than for documentation, however the either way I plan to maintain the good technical details level.\n\n### Context\n\nCurrently, documentation does not feature how to build subdomain resolvers for TON DNS, and for existing resolvers (`auto-dns` and `manual-dns`) it only links to code, hindering technology adoption.\n\n### Goals\n\n- Create a detailed guide\n- Publish it in TON Docs or TON Blog\n\n### Deliverables\n\n- Article with step-by-step explanation for TON DNS subdomains system and code of resolver contract `EQDkAbAZNb4uk-6pzTPDO2s0tXZweN-2R08T2Wy6Z3qzH_Zp`\n\n### Definition of Done\n\n- [x] Article created\n- [ ] Article published in TON Docs or TON Blog\n\n### Reward\n\n- Standard TON Footstep NFT\n- 600$ in TON\n\n### Oriental Release Date\n\n11.06.2023",
    "created_at": "2023-06-03T15:46:49Z",
    "updated_at": "2023-06-12T04:06:01Z"
  },
  {
    "state": "open",
    "title": "Documentation for Get Methods (Getters) in TON Blockchain",
    "body": "### Summary\n\nThe project aims to update documentation([this page](https://docs.ton.org/develop/smart-contracts/guidelines/get-methods)) regarding the usage and implementation of TON Blockchain's Get Methods (Getters) to provide clarity on their functionality and usage. \n\n_This footstep was created with the help of a @footsteps_helper_bot_\n\n[How to contribute?](https://docs.ton.org/contribute)\n\n### Context\n\nThis project is necessary as developers who are new to TON Blockchain may not be familiar with the various Get Methods available and their uses. This documentation will help to provide detailed explanations and examples of the Get Methods, creating a more streamlined and efficient process for developers.\n\nFor example, developers may not be aware of why they cannot use Get Methods from another contract. This project aims to provide an explanation for this limitation and offer alternative methods to achieve the desired functionality.\n\n\n### Goals\n\n- Provide detailed explanations of design patterns for Get Methods in TON Blockchain.\n- Clarify the specific uses and purposes of the most common Get Methods.\n- Explain why Get Methods is impossible to invoke from another contract.\n\n\n### Deliverables\n\n- Get Methods clarified in the documentation.\n\n### Definition of Done\n\n- [ ] Updated version of [Get Methods](https://docs.ton.org/develop/smart-contracts/guidelines/get-methods) page with PR in docs.ton.org created.\n - [ ] PR reviewed and merged.\n\n### Reward\n\n* Standard TON Footstep NFT\n* $300 in TON equivalent\n\n### Oriental Release Date\n\n11th June",
    "created_at": "2023-06-03T11:06:25Z",
    "updated_at": "2023-06-07T14:01:33Z"
  },
  {
    "state": "open",
    "title": "Step-by-Step Guide for Launching Liteserver",
    "body": "### Summary\n\nThis project aims to create a comprehensive, easy-to-follow guide for launching Liteserver in the docs.ton.org.\n\n\n_Footstep generated with the @footsteps_helper_bot._\n\n### Context\n\nSetting up Liteserver  can be a challenging task for newcomers due to the lack of a separate guide right now. This project aims to create a detailed guide on launching Liteserver, which will be accessible to developers and Dev Ops.\n\nExample for an archival node as an example - https://docs.ton.org/participate/run-nodes/archive-node\n\n[How to contribute?](https://docs.ton.org/contribute)\n\n\n### Goals\n\n- Create a detailed, step-by-step guide for setting up Liteserver with PR in docs.ton.org.\n- Add a link from https://docs.ton.org/participate/nodes/node-types page.\n\n\n\n### Deliverables\n\nDELIVERABLES:\n- Step-by-Step guide for launching Liteserver\n\n\n### Definition of Done\n\n- [ ] A detailed step-by-step guide for setting up Liteserver with PR in docs.ton.org created.\n- [ ] PR reviewed and merged.\n\n### Reward\n\n* Standard TON Footstep NFT\n* 100$ in TON eqiuvalent \n\n### Oriental Release Date\n\nTBD",
    "created_at": "2023-06-03T10:50:28Z",
    "updated_at": "2023-06-08T08:46:05Z"
  },
  {
    "state": "open",
    "title": "Development of a Quiz Integration Module for Tact / FunC Documentation",
    "body": "### Summary\n\nCreate a reusable module to integrate interactive quizzes into the Tact / FunC documentation pages, enhancing user engagement and understanding. The module's effectiveness will be demonstrated by integrating quizzes into a single selected page.\n> **Note** Documentation for ReactJS provides a [reference implementation](https://react.dev/learn/javascript-in-jsx-with-curly-braces).\n\n### Context\n\nThe current Tact / FunC documentation lacks interactive elements that can boost user engagement and understanding. To address this gap, a reusable module is required to facilitate the integration of interactive quizzes into the documentation pages.\n\n\n### Goals\n\n- Develop a reusable module to integrate interactive quizzes into the Tact / FunC documentation pages.\n- Design three distinct interactive quizzes for a selected documentation page to demonstrate the module's usefulness.\n\n\n### Deliverables\n\n- Reusable codebase for the quiz integration module\n- Three interactive quizzes with answer keys and explanations designed for a selected documentation page\n- Successful demonstration of the module's functionality with the interactive quizzes seamlessly integrated into the selected documentation page.\n\n\n### Definition of Done\n\n- Reusable module is developed and thoroughly tested\n- Three quizzes are created and successfully integrated into the selected documentation page\n- Quizzes function as intended without compromising the existing design of the page.\n\n\n### Reward\n\n- TBD\n\n### Oriental Release Date\n\n- TBD",
    "created_at": "2023-05-31T17:07:24Z",
    "updated_at": "2023-06-03T10:06:16Z"
  },
  {
    "state": "open",
    "title": "Creation of a Smart Contract Development Course on Tact",
    "body": "### Summary\n\nThe course is a step-by-step video tutorial on learning and creating smart contracts in Tact in the TON blockchain. The course is divided into several subtopics, starting with the basic concepts and principles of smart contracts and gradually progressing to more complex topics.\n\n### Context\n\nI am an experienced blockchain developer in the field of smart contracts development in Solidity language, so I have deep knowledge and understanding of blockchain and smart contracts concepts.\n\nAlso in the past I've done a [course](https://www.youtube.com/@alefman_vladimir) on Solidity smart contracts development and successfully passed my knowledge and experience to other developers from the Russian-speaking community.\n\nThe course will focus on reducing the complexity and simplifying the process of entering into development in TON for programmers with different levels of experience. Beginner developers will get the necessary basics, and experienced developers will be able to quickly master the Tact language and adapt their development skills.\n\n### Goals\n\n- Clear and structured material with consistent video tutorials that explain each topic in detail and provide practical code examples.\n- GitHub repository with structured code examples from the video course\n\n### Deliverables\n\n**10 video lessons.** Average video length - 15 mins. \nEach video is going to cover very focused information on specific topic\n\n\n**Video 1: Introduction to TON**\n - Creating a wallet\n - getting test tokens \n - connecting to a node\n - and sending a transaction to the blockchain \n([already done](https://www.youtube.com/watch?v=5Muo79ZsOIg))\n\n**Video 2: Setting up and configuring the development environment, first hello world smart contract**\n - Setting up necessary tools and dependencies\n - Setting up the development environment to work with Tact\n - Blueprint framework\n\n**Video 3: Syntax and Data Types in Tact**\n - Basic elements of Tact syntax\n - Working with different data types in Tact\n\n**Video 4: Messages Between Contracts, Throwing Errors**\n\n**Video 5: Sending TON Coins, Working with Gas**\n\n**Video 6: Syntax and Data Types in Tact 2**\n - Functions\n - loops\n - arrays\n - maps \n\n**Video 7: Traits.** \n- The Ownable Trait.\n- The Ownable-Transferable Trait\n- The Stoppable Trait\n- The Resumable Trait\n- Writing Your Own Trait\n\n**Video 8: From ERC20 to Jetton.** \n - The actor model concept\n - Asynchronous blockchain\n\n**Video 9: The nft collection contract**\n\n**Video 10: The first dapp on TON integrated with Telegram** \n - Interaction with TON blockchain via DApp\n - Connections to Tonconnect\n - Integration in Telegram Web Application\n\n\n### Definition of Done\n\n10 videos on the topics stated in the Deliverables block, published on YouTube with code on GitHub\n\n### Reward\n\n5000$ in Toncoin\n\n### Oriental Release Date\n\naverage one video per week\n\nby August 1 the whole course",
    "created_at": "2023-05-31T05:26:51Z",
    "updated_at": "2023-06-09T11:46:03Z"
  },
  {
    "state": "open",
    "title": "IqraCrypto: Arabic Education Initiative",
    "body": "### Summary\n\n**Objective:**\nOur goal is to make TON's groundbreaking technology accessible to the Arabic-speaking community by creating a series of educational courses. We aim to educate and empower this community with the knowledge and skills necessary to understand, use, and innovate on TON's platform.\n\nMena Region population: 480M\nMena Students: 110M\nTON Arabic Content: nearly none\n\n\n**About IqraCrypto:**\nIqraCrypto is an educational platform that provides courses, guides, and resources about blockchain technology and cryptocurrencies. It aims to make blockchain education accessible to individuals from all backgrounds, with a particular focus on the MENA (Middle East and North Africa) region.\n\n**We have won grants from Ethereum Swarm, Stacks, Celo, Dfinity and UD.**\n\n### Context\n\nBlockchain and cryptocurrency are revolutionizing various sectors globally. However, a significant knowledge gap exists, particularly in non-English speaking regions like MENA. This project is a crucial step towards bridging that gap, making the revolutionary technology behind TON accessible to a vast, untapped Arabic-speaking audience. By doing so, we empower these individuals to not only understand and use TON but also to innovate upon it, contributing to the ecosystem's growth.\n\n\nThe purpose of this proposal is to teach the MENA Region in arabic the importance of TON  and how to use it. We will teach people how to build on TON sustainable projects and how they could impact the unbanked in the region.\nIf we estimate that only 0.0125% uses the platform or see the courses on the platform, that is 50 000 learners!\n\nConsidering the bear market, we estimate the learners will be less as people are less interested in crypto right now, but content will always be available anytime anywhere.\n\n### Goals\n\nA comprehensive and consistent workflow aimed at educating the Arabic-speaking community about TON and improving the ecosystem can follow the steps below:\n\n**1- Content Research & Planning:** Research topics relevant to TON that are valuable to the Arabic-speaking community. These topics should include an introduction to TON, detailed guides on its use, technical details on building on TON, and specific use-cases. This process should involve developing a content calendar that maps out when each piece of content will be created and published.\n\n**2- Content Creation:** Based on the topics identified, create a series of educational content in various formats such as:\n\n- Articles and Guides: Write comprehensive and accessible blog posts and step-by-step guides on topics like understanding TON, using TON wallets, participating in TON's ecosystem, and developing on TON.\n\n- Video Tutorials: Produce video content that visually guides viewers on how to navigate the TON ecosystem, with topics ranging from basic usage to advanced development.\n\n- Documentation: Develop technical documentation that provides in-depth information about TON's technology and how to build on it.\n\n**3- Translation:** Translate all content into Arabic to make it accessible to the target audience.\n\n**4- Quality Assurance:** Review the content for accuracy, clarity, and relevance. Make necessary revisions to ensure it provides value and is easy to understand.\n\n**5- Publication:** Publish the content on the IqraCrypto platform and any other relevant platforms where the Arabic-speaking community can access it.\n\n**6- Promotion:** Promote the content across various channels, including social media, email newsletters, and through partnerships with other crypto communities in the MENA region.\n\n**7- Community Engagement:** Engage with the community through forums, Q&A sessions, webinars, and workshops to answer queries and facilitate discussions around the TON ecosystem.\n\n**8- Analytics & Reporting:** Monitor engagement metrics to track the effectiveness of the content. Use these insights to refine future content and strategies.\n\nThis workflow ensures that a steady stream of high-quality, relevant content is produced to educate the Arabic-speaking community about TON, thereby enhancing its ecosystem.\n\n### Deliverables\n\n### **1. Introduction to TON Foundation and Its Technology:** \n\nObjective: Familiarize students with TON, its mission, vision, and the technology that powers it.\n\nDeliverables: partnership article, course in PDF, course video on youtube, guide and social media posts\n\n**Content:**\n\n- Overview of the TON \n- Introduction to TON Blockchain\n- Explanation of how TON Blockchain works, its unique features, and benefits\n\n### **2. Deep Dive into TON Foundation and Wallet Transactions:**\n\nObjective: Provide a detailed analysis of TON's, with a special focus on wallet transactions, fees, and other relevant details.\n\nDeliverables: course in PDF, course video on youtube and platform, guide and social media posts, twitter space\n\n**Content:**\n\n- Detailed analysis of TON's operations\n- Understanding TON wallet transactions and fees\n- Overview of TON's blockchain scalability, speed, and security\n\n### **3. Technical Course on How to Develop on TON Blockchain:**\n\nObjective: Equip students with the technical know-how to develop on the TON Blockchain.\n\nDeliverables: partnership article, course in PDF, course video on youtube, guide and social media posts, giveaway\n\n**Content**\n\n- Introduction to TON's development environment\n- Step-by-step guide on creating a simple application on TON Blockchain\n- Best practices for development on TON Blockchain\n\n**Note:** \n\n- Each course is around 20-70 mins\n- This grant could potentially be extended if the initiative proves successful in increasing the understanding and adoption of Ethereum Swarm among the Arabic-speaking community.\n- We may need some support if we find difficulties in explaining some technical features.\n\n\n### Definition of Done\n\nHere will be shared the work links, which will be on:\nhttps://iqracrypto.com\nhttps://www.youtube.com/@iqracrypto\nhttps://twitter.com/iqracrypto\nhttps://www.linkedin.com/company/iqracrypto/\n\n### Reward\n\n**Milestones:**\n1. Introduction to TON Foundation and Its Technology\n5500 USD\n2. Deep Dive into TON Foundation and Wallet Transactions\n6000 USD\n3. Technical Course on How to Develop on TON Blockchain\n6500 USD\n\n### Oriental Release Date\n\nThese milestones will be delivered in less than 6 months.\n",
    "created_at": "2023-05-24T12:02:47Z",
    "updated_at": "2023-05-24T12:03:55Z"
  },
  {
    "state": "open",
    "title": "Python library to communicate with Liteservers using ADNL over TCP",
    "body": "### Summary\n\nDevelop a Python library with [pytonlib](https://github.com/toncenter/pytonlib) features that communicates with LiteServers via ADNL over TCP, without using tonlibjson binaries.\n\n### Context\n\nCurrently there are 2 pretty low level libraries for Python that get the Blockchain info using liteservers: \n* [psylopunk/pytonlib](https://github.com/psylopunk/pytonlib) (which is unfortunately abandoned)\n* [toncenter/pytonlib](https://github.com/toncenter/pytonlib)\n\nLibraries are good, but there is a huge problem: they use tonlib binaries. That's why you can have troubles with the libraries\nif you use not popular OS, you should compile binaries and/or install openssl ver 1.1.1. (for example for Ubuntu 20 or 22 and Windows 10 you have to reinstall openssl or install libssl-dev). Also Libraries owners should update binaries regularly, for example there are old binaries in psylopunk/pytonlib so you cannot work with testnet right away and you have to compile/download new binaries.\n\nI have found at least 13 reports from Python devs who wanted to develop in TON but encountered difficulties even at the point of **installing** one of these libraries:\nhttps://t.me/tondev_eng/28015\nhttps://t.me/tondev_eng/28395\nhttps://t.me/tondev/116179\nhttps://t.me/tondev/95849\nhttps://t.me/tondev/80806\nhttps://t.me/tondev/123913\nhttps://t.me/tondev_eng/23439\nhttps://t.me/tondev_eng/22767\nhttps://t.me/tondev_eng/23439\nhttps://github.com/toncenter/pytonlib/issues/38\nhttps://github.com/toncenter/pytonlib/issues/20\nhttps://github.com/psylopunk/pytonlib/issues/30\nhttps://github.com/psylopunk/pytonlib/issues/27\n\nI spent only like 10 minutes for looking for complaints and a lot of newcomers don't even know about TON Dev chats so there are much more people who faced with this problem. \n\nSo Python-TON community need this library to work with liteservers directly.\n\n### Goals\n\n- Develop a Python library for direct communication with LiteServers via ADNL over TCP \n\n### Deliverables\n\n- Python library for direct communication with LiteServers via ADNL over TCP\n- Tutorial on how to use the library\n- Usage examples\n\n### Definition of Done\n\n- [ ] PyPi package and GitHub repo with source code\n- [ ] Tutorial in README, examples folder\n\n\n### Reward\n\n* Standard TON Footstep NFT\n* 5000 USD in TON\n\n\n### Oriental Release Date\n\n2 - 5 weeks",
    "created_at": "2023-05-24T11:55:53Z",
    "updated_at": "2023-06-11T16:17:09Z"
  },
  {
    "state": "open",
    "title": "Creation of a platform for checks (coupons)",
    "body": "### Summary\n\nDevelopment of a platform for checks (coupons) consisting of smart contracts, front-end and documentation.\nThe idea of checks is the following possibilities:\n- creating a check for a certain amount\n- attaching a check to a specific address\n- creating a multicheck for several activations\n- setting a password for the receipt\n\nCase of using checks:\n- user1 creates a check for 10 TON, assigns a password\n- receives the qr code of the receipt activation transaction, and transfers it to the user2 (for example, by printing on paper)\n- user2 scans the qr code, signs the transaction by specifying the password and receives 10 TON.\nThus, we have a semi-offline transmission of TON.\n\nChecks can also be used for distribution to a large number of users.\n  The main advantage is that all checks are available on the blockchain, unlike similar mechanics in other projects on the TON (cryptoBot)\n\n### Context\n\n_No response_\n\n### Goals\n\n- enable users to create checks securely on a smart contract\n- enable semi-offline transactions of TON on smart contract\n\n### Deliverables\n\nSmart contract with the ability to create, delete, activate checks with parameters: set a password, bind to an address, number of activations. \nAs well as a front-end on which you can conveniently use all the functionality through TON Connect 2.0\n\n### Definition of Done\n\n- [ ] Check smart contract development\n- [ ] Development of a front-end for interacting with a smart contract\n- [ ] Documentation development\n\n### Reward\n\n2,000 USD in TON equivalent\n\n### Oriental Release Date\n\n2-4 weeks",
    "created_at": "2023-05-23T22:04:58Z",
    "updated_at": "2023-06-13T07:36:17Z"
  },
  {
    "state": "open",
    "title": "Display of each stage of the transaction",
    "body": "### Summary\n\nDisplay of each stage of the transaction\n\n### Context\n\nDisplay storage phase, credit phase, compute phase, action phase and list of output messages for transactions at tonscan.org.\n\n\n### Goals\n\nExtension of the standard set of information about transactions.\n\n\n### Deliverables\n\nEach transaction in TON goes through several phases, each of which can be sorted out at the transaction page. It must include: storage phase, credit phase, compute phase, action phase and list of output messages.\n\n\n### Definition of Done\n\n- [ ] All the above data is correctly displayed on the transaction page in an understandable way.\n\n\n### Reward\n\n4000 USD in TON\n\n\n### Oriental Release Date\n\nTBD",
    "created_at": "2023-05-22T19:35:15Z",
    "updated_at": "2023-05-30T16:19:21Z"
  },
  {
    "state": "open",
    "title": "Blockchain Config page",
    "body": "### Summary\n\nBlockchain Config page\n\n### Context\n\nTON Ecosystem possesses an intricate configuration comprising numerous technical parameters, but only a minority comprehend the meaning of these parameters. Therefore, this project aims to offer a simple approach for users to comprehend the purpose and significance of these parameters at tonscan.org.\n\n\n### Goals\n\nCreating a dashboard that is easy for users to navigate and comprehend, enabling them to gain a better understanding of the technical parameters of TON Blockchain configuration.\n\nCurrent page: http://explorer.toncoin.org/config\n\n### Deliverables\n\nCreate a webpage that is easy to use and displays the current configuration parameters and their detailed descriptions in convenient format.\n\n\n### Definition of Done\n\n- [ ] All parameters from blockchain config are displayed on the page and described correctly.\n\n\n### Reward\n\n3000 USD in TON\n\n\n### Oriental Release Date\n\nTBD",
    "created_at": "2023-05-22T19:33:01Z",
    "updated_at": "2023-05-30T16:22:53Z"
  },
  {
    "state": "open",
    "title": "General Blockchain Stats Page",
    "body": "### Summary\n\nGeneral Blockchain Stats Page\n\n### Context\n\nTON blockchain still does not have a single and generally accepted page that displays the most important data about the blockchain in a convenient format at tonscan.org.\n\n\n### Goals\n\nProvide a reliable source of statistics regarding the TON Blockchain.\n\n\n### Deliverables\n\nFunctioning page for tracking the most important blockchain data.\n\n- TPS\n- Transactions count\n- Actual block\n- Average block speed\n- Average tx speed\n- Circulation & total supply\n- Validator's count    \n- Election time tracking\n- Account's count\n- Contract types chart (comparison of smart contracts types: wallets, NFT, jettons, etc.)\n- Market data: Price, Capitalization, Trading volume\n\n\n### Definition of Done\n\n- [ ] Website is working stable\n- [ ] Information on validators, transaction speed, volume etc. is displayed.\n\n\n### Reward\n\n5000 USD in TON\n\n### Oriental Release Date\n\nTBD",
    "created_at": "2023-05-22T19:30:49Z",
    "updated_at": "2023-05-30T16:18:56Z"
  },
  {
    "state": "open",
    "title": "Pages with detailed stats for each category",
    "body": "### Summary\n\nPages with detailed stats for each category\n\n### Context\n\nFor each of the blockchain entities, we propose to make a separate page with detailed information to ensure real-time monitoring at tonscan.org.\n\n\n### Goals\n\nCreate convenient tools for monitoring new transactions, blocks and actual validators.\n\n\n### Deliverables\n\n1) Validators page, including all actual validators list with their stakes and current status, and also frozen stakes.\n2) Blocks page, with pagination into other blocks and a list of all transactions in the block and real-time monitoring of all actual blocks indicating their workchains, hash and txs count.\n3) Transaction page, with real-time monitoring of all transactions: new tx's, TPS count, average transaction speed and \n\n### Definition of Done\n\n- [ ] All pages are working stable and display the above information.\n\n\n### Reward\n\n3000 USD in TON\n\n\n### Oriental Release Date\n\nTBD",
    "created_at": "2023-05-22T19:29:55Z",
    "updated_at": "2023-05-30T16:24:02Z"
  },
  {
    "state": "closed",
    "title": "Footstep: ADNL over UDP for Node.JS",
    "body": "Footstep: https://github.com/ton-society/ton-footsteps/issues/216\n\nResults achieved:\n\nADNL protocol implemented: https://github.com/thekiba/tonutils\n\nTON wallet for reward: EQAPPgN25OQh3EOqqt0v_CRmScxa-_ulVwm5NESN1DO4gcEG",
    "created_at": "2023-05-22T13:44:49Z",
    "updated_at": "2023-05-23T12:54:09Z"
  },
  {
    "state": "closed",
    "title": "fix link 404",
    "body": "",
    "created_at": "2023-05-21T15:10:30Z",
    "updated_at": "2023-05-21T15:10:49Z"
  },
  {
    "state": "closed",
    "title": "Update and Refactor Awesome TON Page with TON Ecosystem Links",
    "body": "### Summary\n\nThis project aims to optimize the structure and content of https://github.com/ton-community/awesome-ton by adding TON Ecosystem links and reorganizing the content.\n\n### Context\n\nThe current [Awesome TON](https://github.com/ton-community/awesome-ton) page became outdated and lacks some links to other relevant TON Ecosystem resources, making it difficult for developers to find all the necessary tools in one place. This footstep aims to update the page for developers looking for information to build in TON Ecosystem.\n\nAs an example, take a look at the version of the Education section with the [PR](https://github.com/ton-community/awesome-ton/pull/39).\n\nThe Final content should be structured with similar logic(save balance between nested and big lists), as an example of the Final \u0440\u045f\u2014\u201a\u043f\u0451\u040fTable of Content:\n\n* Official Resources\n* Education\n* Participate(Validators and Nominators)\n* Contribute\n* Talks & Workshops\n* Get Coding\n  * Dev Tools\n  * Boilerplates\n  * Libraries\n* Projects\n* Authentication\n\n\n\n### Goals\n\n- Update links to TON Ecosystem resources in [Awesome TON](https://github.com/ton-community/awesome-ton) page\n- Improve the overall structure of the page\n- Save a balance between long lists and nested content\n\n### Deliverables\n\n- Refactored Awesome TON Page supports developers who seek fast answers in the GitHub\n- Actualized Links will be used for the docs.ton.org update.\n\n### Definition of Done\n\n- [ ] PR for The Awesome TON Page has been created\n- [ ] PR with update reviewed and merged\n\n\n### Reward\n\n* Standard TON Footstep NFT\n* 100 USD in TON equivalent\n\n### Oriental Release Date\n\n2 weeks",
    "created_at": "2023-05-20T14:46:23Z",
    "updated_at": "2023-06-03T09:36:58Z"
  },
  {
    "state": "closed",
    "title": "Create a resource on how to earn Toncoin",
    "body": "### Summary\n\nWe need to relieve developers, creators, players, and users from spending TIME looking for ways to earn Toncoin so they can focus on what they enjoy doing!\n\n### Context\n\nThere is a lack of knowledge on how to earn Toncoin. So I would like to initially create a Telegram channel to help people earn Toncoin easily and efficiently.\n\n### Goals\n\nProvide the highest quality research to educate people about Toncoin earning mechanisms\n- Raise awareness of Toncoin among stakeholders\n- Promote the use of Toncoin in everyday life\n\n### Deliverables\n\nA series of articles with step by step guidance to earn Toncoin\n- A tutorial explaining how to earn Toncoin\n\n\n### Definition of Done\n\n- Configure a Telegram channel, chat, bots.\n- To create an initial map for earning Toncoin, for convenience and ease of mastering the information.\n- Publication of at least 1 articles, research\n\n\n\n### Reward\n\n1000USD\n\n### Oriental Release Date\n\nTo create an initial map for earning Toncoin  25hours\nSetting up the channel, chat, bot  10 hours\nSearch, analyze and publish 1 research 15 hours\n\n",
    "created_at": "2023-05-19T06:51:43Z",
    "updated_at": "2023-05-23T09:42:31Z"
  },
  {
    "state": "open",
    "title": "Update TON FunC Lessons with Blueprint SDK",
    "body": "### Summary\n\nThis project aims to update the first 10 TON introduction tutorials created by Ivan Romanovich to use Blueprint SDK instead of toncli.\n\n### Context\n\nThis project is required because the current excellent [TON FunC lessons](https://github.com/romanovichim/TonFunClessons_Eng) were created using toncli about year ago.\n\nTutorials are well-structured and written in an excellent manner for newcomers to TON. However, today we have a next-generation all-in-one SDK for smart-contract development, testing, and deploying named [Blueprint](https://github.com/ton-community/blueprint). It offers a more user-friendly experience, especially for developers familiar with `hardhat`.\n\n### Goals\n\n- Update [10 TON FunC lessons by Ivan Romanovich](https://github.com/romanovichim/TonFunClessons_Eng) to use Blueprint SDK\n\n### Deliverables\n\n- [ ] Tutorial 1: Simple FunC Smart Contract \n- [ ] Tutorial 2: FunC tests for the first smart contract\n- [ ] Tutorial 3: Messages, let's write a proxy contract\n- [ ] Tutorial 4: Testing messages\n- [ ] Tutorial 5: Flags and data storage in a contract\n- [ ] Tutorial 6: Testing flags and data storage in the contract\n- [ ] Tutorial 7: HashMap storage\n- [ ] Tutorial 8: Testing HashMap storage\n- [ ] Tutorial 9: Analyzing the Jetton Standard(Fungible Token)\n- [ ] Tutorial 10: Analyzing the NFT Standard (Non-Fungible Token)\n\n\n_Lessons can be handled by different people_\n\n### Definition of Done\n\n- All tutorials are updated to use Blueprint SDK\n- All the lessons are published on the docs.ton.org platform (_Develop Smart Contracts > Learn_ section)\n\n### Reward\n\n* $200 / lesson\n* $2000 max in TON\n\n### Oriental Release Date\n\n- end of June\n- start of July",
    "created_at": "2023-05-15T15:22:52Z",
    "updated_at": "2023-06-06T10:40:30Z"
  },
  {
    "state": "closed",
    "title": "Series of videos on TON programming - Livecoding on Python in English with TON Dev Study",
    "body": "### Summary\n\nFootStep is about creation a YouTube _course_ in English on programming in TON using Python. The _course_ should be in live-coding style, showing how to use different Python libraries to work with TON Blockchain.\n\n### Context\n\n**Python** is one of the most popular programming languages and it is used both by beginners and advanced programmers.\nIn TON Python is convenient for parsing transactions, smart contracts, and generally working with blockchain. However, for beginners in TON it's difficult to start developing with Python, because there are much more tools and tutorials for developing with JS (TS), Go and other languages\n\n### Goals\n\n* Record easy-to-follow videos for international learners in English\n* Make sure that the sound and video quality are good enough and comfortable for learners(do not contain any significant sound glitches).\n* Reduce confusion and frustration for Python programmers who want to start developing in TON using their favorite language.\n* Make a public playlist on the [TON Dev Study YouTube channel](https://youtube.com/@WikiMar).\n* Make a public repo on the [TON Dev Study GitHub page](https://github.com/TonDevStudy) with all code, written in videos.\n\n### Deliverables\n\n* Add a fresh and easy-to-understand live coding session on Python to work with TON to the course content. This will help us attract an international community of TON developers who are looking for simple and easy-to-understand video tutorials.\n* 10 YouTube videos in course, 10 folders in GitHub repo with code and README in each folder\n\n### Definition of Done\n\n- [x] **1 lesson**: General Python TON libraries review; simple wallet creation, import and deployment; creation of internal messages; simple counter contract deployment and calling this contract's get-methods\n- [x]   **2 lesson**: TVM types overview, Cell/HashMap creation, Slice parsing; work with liteservers, looking for archive ls from public ls list; transactions parsing from blocks; listening for new transactions in blockchain \n- [x] **3 lesson**: Transactions data parsing; check transactions statuses (exit codes in different phases); messages parsing; recognize transactions types via op code (like Jetton transfer) and parse these transactions\n- [x] **4 lesson**: NFT collection creation and deployment; NFT (batch) minting;  NFT transfer\n- [x] **5 lesson**: NFT collection parsing via get methods; single NFT items parsing; NFT sale (auction) contracts parsing; how to get all NFT items (and their owners) by collection address\n- [x] **6 lesson**: Jetton minter deployment; Tokens mint; Jetton transfer; Jetton burn\n- [x] **7 lesson**: Jetton content parsing (onchain and offchain); Hashmaps reading; Jetton wallet parsing\n- [x] **8 lesson**: Highload wallets; Hashmaps; Blockchain config parsing\n- [x] **9 lesson**: Multisig wallets; Offchain signatures; Onchain signatures\n- [x] **10 lesson**: TON Node types; launching Liteserver using mytonctrl; Launching local toncenter; interaction with your own Liteserver using Python\n\n\n### Reward\n\n* Standard TON Footstep NFT\n* 300$ in TON for each lesson\n\n### Oriental Release Date\n\n_At least 1-2 lessons per week._",
    "created_at": "2023-05-10T07:02:01Z",
    "updated_at": "2023-06-08T17:43:43Z"
  },
  {
    "state": "open",
    "title": "tontools and tonsdk python libraries development",
    "body": "### Summary\n\n[TonTools](https://github.com/yungwine/TonTools) is a popular high level python library, which allows to easily interact with ton using liteservers or apis (toncenter and tonapi currently)\n[tonsdk](https://github.com/tonfactory/tonsdk) is a low level python library, there are a lot of utilities like tvm types, token (nft and ft), wallet contracts\n\nThe footstep is about continue contribute and develop this libraries \n\n### Context\n\n**Python** is one of the most popular programming languages, but there is lack of libraries to use it with TON and lack of developers to create and contribute them. So python developers who come into TON ecosystem suffer from lack of tools to develop in TON with python. \n\nThe main goal is to give them this ability and continue the development of the libraries.\n\n### Goals\n\n### tonsdk\n* complete tvm types, such as add hashmaps parsing\n* add/update contracts, for e.g. nft sale contract should be updated,\nnft sale auction contract should be added, jetton contract should be able to contain onchain metadata\n\n### TonTools\n* Implement testnet support\n* add way more examples, a separate example for almost every feature\n* implement nft minting, jettons minting/burning, work with nft sales (auctions) contracts\n* overwrite [LsClient](https://github.com/yungwine/TonTools/blob/master/TonTools/Providers/LsClient.py), from using [ton](https://github.com/psylopunk/pytonlib) library (which is abandoned) to use [toncenter/pytonlib](https://github.com/toncenter/pytonlib) library\n* overwrite [TonApiClient](https://github.com/yungwine/TonTools/blob/master/TonTools/Providers/TonApiClient.py) to use tonapi v2 endpoints, because tonapi v1 soon become unsupported\n* add tools to interact with _HighLoad wallets_ \n* add tools to interact with _MultiSig wallets_ \n* implement interaction with [dton](https://dton.io)\n\n\n\n### Deliverables\n\n* new version of **tonsdk** library\n* new version of **tontools** library\n\n### Definition of Done\n\n### tonsdk\n- [ ] new version with complete types and updated/new contracts\n### TonTools\n- [ ] testnet support and examples\n- [ ] nft, jettons actions, nft sales implementation\n- [ ] overwritten LsClient \n- [ ] overwritten TonApiClient\n- [ ] highload and multisig wallets implementation \n- [x] add provider to use [dton](https://dton.io)\n\n### Reward\n\n### tonsdk\n* 600 usd\n### TonTools\n* 200 usd for implement testnet support, add examples\n* 300 usd for nft, jettons actions, nft sales implementation \n* 700 usd for  LsClient update\n* 700 usd for TonApiClient update\n* 700 usd for HighLoad, MultiSig implementation \n* 400 TON for _dton_ provider implementation - sponsored by Disintar team\n* Standard TON Footstep NFT\n\n* **Total Reward**: 3200 USD in TON equivalent + 400 TON from Disintar team\n### Oriental Release Date\n\n* 1 week from footstep approvement to update **tonsdk** \n\n* 2-3 weeks for **TonTools** (except _dton_ implementation)\n\n* 2 weeks to implement _dton_ with tests and examples\n",
    "created_at": "2023-05-09T18:21:53Z",
    "updated_at": "2023-05-22T11:22:02Z"
  },
  {
    "state": "open",
    "title": "Native python bindings for TON",
    "body": "### Summary\n\nCreate and maintain python library with bindings for TON structures and emulator.\n\n### Context\n\n```python3\nd = VmDict(256)\n\nd.set(1, begin_cell().store_int(2**103, 256).end_cell().begin_parse())\nd.set_builder(9, begin_cell().store_address(\"EQDrLq-X6jKZNHAScgghh0h1iog3StK71zn8dcmrOj8jPWRA\"))\nd.set_ref(2**254, begin_cell().store_int(-132, 32).end_cell())\n\nfor i in reversed(d):\n    if i[0] == 1:\n        print(\"Key: \", i[0], \"\\n\\tParsed value: \", i[1].preload_int(256))\n    elif i[0] == 9:\n        print(\"Key: \", i[0], \"\\n\\tParsed value: \", i[1].dump_as_tlb(\"MsgAddress\"),\"\\n\\n\\t\", i[1].load_addr())\n    elif i[0] == 2**254:\n        print(\"Key: \", i[0], \"\\n\\tParsed value: \", i[1].fetch_ref().load_int(32))\n```\n\n---\n\n> Key:  28948022309329048855892746252171976963317496166410141009864396001978282409984 \n\tParsed value:  -132\nKey:  9 \n\tParsed value:  (\n  (addr_std\n    anycast:nothing workchain_id:0 address:xEB2EAF97EA32993470127208218748758A88374AD2BBD739FC75C9AB3A3F233D))\n\t EQDrLq-X6jKZNHAScgghh0h1iog3StK71zn8dcmrOj8jPWRA\nKey:  1\n\tParsed value:  10141204801825835211973625643008\n\n[More examples](https://gist.github.com/tvorogme/786299c37da7b31937abc1f709a48a48)\n\n### Goals\n\n- [ ] Develop pybind11 bindings\n    - Cell, Cell Slice, Cell Builder, VmDict (HashmapE, HashmapAugE)\n    - Popular TLB structures\n    - BOC\n    - TLB (de)serialization\n    - Transaction emulator with state managment (like sandbox)\n    - TLB python objects with (de)serialization, so you can create any TLB object as python objects and it will be automatically packed and unpacked if needed\n- [ ] Create CI/CD autobuild system with releases of library to all popular systems\n\n### Deliverables\n\nGitHub with python binding library and examples\n\n### Definition of Done\n\nPyPI library for working with TON \n\n### Reward\n\n- 12,000 USD in TON equivalent\n- Standard TON Footstep NFT\n\n### Oriental Release Date\n\n1 month",
    "created_at": "2023-05-09T16:10:44Z",
    "updated_at": "2023-06-05T12:10:00Z"
  },
  {
    "state": "closed",
    "title": "Tic Tac Toe in FunC with external messages",
    "body": "### Summary\nCreate a tic-tac-toe game that will work entirely on a smart contract, mainly through external messages from players. As well as a web interface for communicating with the contract and signing transactions with the private key.\n\n\n### Context\nWhen I first started developing for TON, I really wanted to see how to work with external messages in FunC using a simple example, because it seemed to me that this topic was not developed as much as it had potential.\nMany months have passed, and the situation has not changed much.\nAlso we want to make a convenient, responsive and fast game in which you can enjoy spending several tens of minutes with friends. If we manage to achieve this goal as well, it will be an indicator that TON is ready for game-fi.\n\n\n### Goals\n#### Basic\n- First of all, the game should be technically interesting, as a simple example of receiving and sending external messages. Therefore, one of the main goals will be clear documentation and high-quality code.\n-  **Basic Logic Description:**\nThe user enters the site, it generates him a keypair, and user has buttons for joining the game at the address of the contract and for creating a new game.\nWhen creating, site generates a contract deployment message for the user, the user sends it. Now he has a game link that he can send to a friend to join. This link points to a page with the current tic-tac-toe field that the site receives in real time from the contract. At the end of the game, the winner can send the balance of the game contract to any address, much like a send request on a regular wallet. If the game ended in a draw, the first player (who deployed the contract) can send the rest of the TONs.\nIf desired, user can play without the UI, forming, signing and sending external messages through advanced tools.\n\n#### Extended\n> If we make the main goal not an example of working with external messages, but the creation of a cool interesting game.\n- Develop a tic-tac-toe platform. Where it will be possible to create public games for random players with stakes in TON, extend games for revenge, play for jettons and so on.\n- Ability to play 3D Tic Tac Toe.\n\n\n### Deliverables\n#### Basic\n- A web page with an interface for creating new tic-tac-toe game session contracts and playing existing ones (with testnet version).\n- Github repository with smart contract source code, tests (using [blueprint](https://github.com/ton-community/blueprint)) and React front-end.\n#### Extended\n- Platform for playing tic-tac-toe on smart contracts with the functionality described above.\n\n### Definition of Done\n1. [ ] Repository is created\n2. [ ] Contract\n3. [ ] Tests\n4. [ ] Front-end\n5. [ ] Documentation\n\n### Reward \n- Standard TON Footstep NFT\n- 800 TON\n- **Extended:** + 800 TON\n\n### Oriental Release Date\n**Basic:** in 1 week.\n**Extended:** in 3 weeks.",
    "created_at": "2023-05-09T15:27:35Z",
    "updated_at": "2023-05-09T22:06:17Z"
  },
  {
    "state": "open",
    "title": "TON Dev Study - Learn send_mode and fees through Sandbox tests.",
    "body": "### Summary\n\nThis Footstep aims to create a guide that explains the behavior of message modes using Sandbox. The guide should cover topics such as bounces, transaction fees, and the possible directions of the message(internal, external out/inc). The guide should use tests as an example to demonstrate these concepts.\n\n### Context\n\nThe guide is required because a lot of newcomers are still confused with messages and fees behavior and writing tests via Sandbox. \n\nFor example, a developer may not know why their contract is failing when trying to send a message. By providing a guide that explains the behavior of message mode, users can more easily understand the underlying concepts and troubleshoot issues.\nAdditionally, these examples could serve as templates for newcomers learning how to write tests, and how to define their specific problems.\n\n\n### Goals\n\n- Improve developers' understanding of message modes.\n- Provide clear examples using tests for Sandbox(for example, tests for wallet contracts).\n- Reduce confusion and frustration for users when testing contracts.\n- Examples should be accessible and easy to run in the local environment.\n\n\n### Deliverables\n\n* Explain to newcomers how messages and fees work with examples and Sandbox tests.\n* Explanation of transaction fees for the TON developers community improved and clearer.\n* docs.ton.org documentation could be improved with related guidelines and examples of tests and send_mode(s).\n\n\n### Definition of Done\n\n- [ ]  Demo repository with Sandbox tests for sending messages(send_mode, fees and bounces cases) created.\n- [ ]  Video with a detailed explanation published in the TON Dev Study channel.\n\n### Reward\n\n\n* 1200$ in TON equivalent (300$ for the each video)\n* Standard TON Footstep NFT.\n\n\n### Oriental Release Date\n26.06.23",
    "created_at": "2023-05-09T15:26:26Z",
    "updated_at": "2023-05-28T17:30:27Z"
  },
  {
    "state": "open",
    "title": "Dart library for TON Connect 2.0",
    "body": "### Summary\n\nOur small team would like to create a library for working with the TON Connect 2.0 protocol in Dart.\n\n### Context\n\nCurrently, there is no library available for working with the TON Connect protocol in the Dart ecosystem. One of the most common uses of Dart today is bulding cross-platform(one code for iPhone and Android) apps with Flutter framework. So the library will help cross-platform applications. The first version of the library, under which the grant is taken, assumes support http-bridge-compatible wallets. We also plan to provide necessary documentation to make new users onboarding process easier and quicker. We will post materials in dev.to, habr and [ton_learn](https://t.me/ton_learn), as well as Dart/Flutter communities.\n\n### Goals\n\n* Develop a library for working with the TON Connect in Dart\n* Help Dart developers integrate TON Connect into dApps written in Dart (using Flatter)\n\n### Deliverables\n\nGitHub repository with the implementation TON Connect protocol in Dart\n\n### Definition of Done\n\n- [ ] GitHub repository with the source code\n- [ ] Publish library to [pub.dev](https://pub.dev/) or similar package manager\n- [ ] Create a PR to [ton-connect](https://github.com/ton-blockchain/ton-connect) repository with a link to the Dart library\n\n### Reward\n\n* Standard TON Footstep NFT\n* 1400 USD in TON equivalent\n\n### Oriental Release Date\n\nGiven the scope of work, I assume that a month should be enough for implementation",
    "created_at": "2023-05-01T10:32:30Z",
    "updated_at": "2023-05-22T08:10:13Z"
  },
  {
    "state": "open",
    "title": "EVM Rollup on TON Feasibility Study",
    "body": "### Summary\n\nThis proposal aims to conduct a feasibility study exploring the potential of building an Ethereum Virtual Machine (EVM) Rollup on the The Open Network (TON). The study will investigate the TON infrastructure, smart contracts, and the necessary steps for implementing an EVM Rollup.\n\n### Context\n\nThe integration of an EVM Rollup on TON would bridge the gap between Ethereum and TON, allowing developers to deploy and run Ethereum-compatible smart contracts on the TON blockchain. This would enable TON to leverage the thriving Ethereum ecosystem, attract more developers, and encourage new decentralized applications (dApps) to be built on its platform. A feasibility study is essential to outline a clear roadmap for the EVM Rollup's development and ensure that the project is well-planned, properly prioritized, and resource-efficient.\n\n### Goals\n\n1. Gain an in-depth understanding of the TON infrastructure and smart contracts\n2. Explore existing Rollup solutions and their applicability to TON\n3. Develop a comprehensive plan for the EVM Rollup implementation, including tech stack selection, timeline, and resource estimation\n\n### Deliverables\n\n1. A P2 proposal outlining high-level plans for the EVM Rollup implementation, including a whitepaper, architecture, budget, and timetable\n2. Identification of components to be developed, such as the EVM Rollup client and smart contract execution environment\n3. A list of challenges to overcome, such as the ZKVerifier on TON (if a ZK architecture is chosen), on-chain EVM simulator on TON (if an optimistic architecture is chosen), addressing account address differences between Ethereum and TON, and bridging TON tokens into the rollup.\n\n### Definition of Done\n\nThe feasibility study is considered complete and successful when the P2 proposal is delivered, addressing all the aforementioned goals and deliverables, and providing a well-researched basis for deciding whether to proceed with the EVM Rollup implementation on TON.\nWe will provide a progress report every 2 week, in addition to the final deliverable above by the end of the period.\n\n### Reward\n\n- Standard TON Footstep NFT\n- 11,000 USD\n\n### Oriental Release Date\n\n6 weeks from the start of the project.",
    "created_at": "2023-04-29T10:41:50Z",
    "updated_at": "2023-06-04T08:41:30Z"
  },
  {
    "state": "open",
    "title": "Rust Library for TON Connect 2.0",
    "body": "### Summary\n\nCreate a library for working with the TON Connect protocol in Rust.\n\n### Context\n\nCurrently, there is no library available for working with the TON Connect protocol in the Rust ecosystem. The existence of such a library would make it easier to integrate dapps with the TON blockchain.\n\n### Goals\n\n* Develop a Rust library for working with the TON Connect protocol.\n\n### Deliverables\n\n* Implementation of the TON Connect protocol in Rust.\n\n### Definition of Done\n\n* GitHub repository with the source code\n* Publishing the library to [crates.io](https://crates.io/)\n\n### Reward\n\n* Standard TON Footstep NFT\n* 1000 USD in TON equivalent\n\n### Oriental Release Date\n\nI have already made some progress, so I estimate it will take one week.",
    "created_at": "2023-04-29T01:49:49Z",
    "updated_at": "2023-04-29T01:49:49Z"
  },
  {
    "state": "open",
    "title": "Delab Connect - analog Web3Modal",
    "body": "### Summary\n\nOur delab team has been developing a project called \"Delab Connect\" for a long time. This library allows you to connect to any TON wallets through 1 entry point. The library has over 700 installations and 20 stars on github.\n\nI propose to upgrade this library to the web3modal level with customization and other parameters\n\nQuestbook redirected to the Footstep - https://questbook.app/dashboard/?grantId=0xe92b011b2ecb97dbe168c802d582037e28036f9b&chainId=10&proposalId=0x25f&isRenderingProposalBody=true\n\n### Context\n\n_No response_\n\n### Goals\n\n- Add color scheme selection\n- Add ton connect 2.0 wallet list selection and customization\n- Add support for embedding in native js and other non-react frameworks\n- Add hooks\n- Add work with toncenter\n- Documentation and usage guides\n- Example code\n\n### Deliverables\n\n- A fully functional analog web3modal\n- Documentation and usage guides\n- Example code and use cases to demonstrate the implementation's functionality\n\n### Definition of Done\n\n- [ ] Add color scheme selection\n- [ ] Add ton connect 2.0 wallet list selection and customization\n- [ ] Add support for embedding in native js and other non-react frameworks\n- [ ] Add hooks\n- [ ] Add work with toncenter\n- [ ] Documentation and usage guides\n- [ ] Example code\n\n### Reward\n\n- 3000 USD in TON\n\n### Oriental Release Date\n\n2 weeks - 1 month",
    "created_at": "2023-04-27T17:34:47Z",
    "updated_at": "2023-05-25T17:17:52Z"
  },
  {
    "state": "open",
    "title": "Dart/Flutter SDK for TON",
    "body": "### Summary\n\nThe Dart language is primarily used alongside the Flutter framework to build natively compiled, multi-platform applications from a single codebase. And it's best at making cross-platform mobile apps.\n\nThe ecosystem around this language can greatly benefit from a dedicated SDK to work with TON Blockchain, as there are many web3 developers who currently only interact with other blockchains for their apps. Developing this SDK will attract more developers to the TON ecosystem, expanding its reach and utility. This proposal outlines a development plan to create a comprehensive Dart/Flutter SDK for TON Blockchain.\n\n### Context\n\nAt the moment there are no libraries to work with the TON blockchain using Dart/Flutter. To address this problem, the following features are planned to be developed as a part of the footstep:\n\n- Implement Cell, Slice, Builder, and BOC (de)serialization\n- Implement an RPC client to work with the TON network\n- Implement support for popular structures from block.tlb\n- Implement support of TON base64 addresses\n- Implement support of HashmapE\n- Implement support of TON & BIP39 Mnemonics\n- Implement support of wallets (v3, v3r2, v4r2)\n- Implement Ed25519 signing of transactions\n- Implement for workings with Jettons and NFTs\n\n### Goals\n\n- Develop the Dart/Flutter SDK to work with the TON blockchain\n- Provide the necessary documentation for quickly getting started with the SDK\n- Continue maintaining the SDK after reaching the abovementioned goals\n\n### Deliverables\n\n- GitHub repository with Dart/Flutter SDK and examples of its usage\n- Publicly available package on pub.dev for Dart/Flutter community to use\n- Small video series of concrete and clear tutorials on real-world usage of the SDK\n\n### Definition of Done\n\n- [ ] GitHub repository with source code and necessary documentation to use it\n- [ ] Package on pub.dev\n- [ ] YouTube playlist with 2-3 video examples of SDK usage in Dart and Flutter\n\n### Reward\n\n- Standard TON Footstep NFT\n- 3,500 USD in TON equivalent\n\n### Oriental Release Date\n\nI'm ready to work on this and deliver results until 14.05.2023",
    "created_at": "2023-04-26T10:55:22Z",
    "updated_at": "2023-06-12T16:50:15Z"
  },
  {
    "state": "closed",
    "title": "Footstep: Rust SDK for TON",
    "body": "PR for https://github.com/ton-society/ton-footsteps/issues/182\n\nDone in:\nhttps://github.com/ston-fi/tonlib-rs\nhttps://github.com/ston-fi/tonlib-sys\n\nResults achieved:\nDeveloped Rust SDK for TON\n\nTON wallet for reward:\nEQBoTw0OzTblnzvV_nNVcSsQHlSykMg4pKrBbw-3ZiQrBb7D",
    "created_at": "2023-04-25T11:30:14Z",
    "updated_at": "2023-04-26T12:12:43Z"
  },
  {
    "state": "closed",
    "title": "Telegram Web Apps low level communication library",
    "body": "### Summary\n\nThis proposal is mostly related to making core Telegram Web Apps library more public and transparent. The result of proposal is some GitHub repository with a library which allows developers to use it as a base for their own SDK or other libraries.\n\n### Context\n\n**New update, new problems**\n\nThe recent Telegram update brought us some new feature related to Telegram Web Apps - users are now allowed to open web applications directly. This update allowed developers to stop redirecting user to their bot and open application directly, but it also brought some new problem. \n\nThis became easier for attackers to deceive people and send them the links of fake bots. So, previously, an attacker had to create a fake bot and then, a fake application. Now, he can just make a copy of some application and send it to user, or just **insert a frame of other application** and try to abuse its vulnerabilities.\n\n**What vulnerabilities?**\n\nThis is the second point, why this proposal is important. On the official Telegram's site in sections related to Telegram Web Apps, there is a section named [`Initializing Web Apps`](https://core.telegram.org/bots/webapps#initializing-web-apps), where Telegram developers offer the external developers to use their JavaScript file [`telegram-web-app.js`](https://telegram.org/js/telegram-web-app.js).\n\nSpending some time to research the offered file, I've made some conclusions:\n\n1. We need this file to be placed in some public source. It could be GitHub, for example. This will allow external developers to track file changes to know what changes to the file were done;\n2. There is a code, which seems to be kept for testing purposes:\n```\nLine 140: // For now we don't restrict target, for testing purposes\nLine 141: trustedTarget = '*'\n```\n**This code disables security mechanism to prevent sending data to untrusted targets**;\n\n3. There is a code which seems to be not reached in default applications. For example, there is a code related to some launch parameter `tgWebAppDebug` which is not described anywhere. In this JavaScript file, this parameter is responsible for logging additional messages and replacing Telegram Web Apps `MainButton` component, which seems strange. Looks like it is some debug code for some specific developers;\n4. Telegram's script does not validate the origin of parent iframe when receiving and processing events. This also opens a new door for the attacker;\n5. We need this file to be a npm package, which could be installed and used;\n6. We need this file to be written with the usage of TypeScript as long as a developer will have to find TypeScript typings by himself then.\n7. The developers **community** can make this code more clear, faster and optimized.\n\n**Conclusion**\n\nWe are not able to save all users from fraud, but we could make the life of attackers way harder by enabling all security features we can. We should also include the community vision on how the libraries of such type should be developed, as long as they are provided for community.\n\n### Goals\n\n- Create a public GitHub repository containing created library source code. The language of the library is TypeScript;\n- Create a public npm package ready for production\n- Create a detailed documentation on how library works and why the solutions made in the library could seem strange (in case they are)\n\n### Deliverables\n\n- Public npm package\n- Public GitHub repository with source code\n- Library documentation\n\n### Definition of Done\n\n[//]: <> (Checked \u0432\u045a\u2026. Unchecked \u0432\u00ac\u045a)\n\n#### \u0432\u00ac\u045a GitHub repository with source code created\n\n#### \u0432\u00ac\u045a npm package is published\n\n#### \u0432\u00ac\u045a Library documentation is created\n\n### Reward\n\nTask is almost completed and I am not going to request any reward, unless committee wants to make a reward for it. I created this proposal just to get committee and community approve that we need it. \n\n### Deadline\n\n01.06.2023",
    "created_at": "2023-04-22T14:13:06Z",
    "updated_at": "2023-04-30T09:31:32Z"
  },
  {
    "state": "open",
    "title": "Ton Developers Program: Footsteps",
    "body": "### Summary\n\nThe two footsteps covered in this technical specification are:\n\n- **Backend and Frontend Development for Users and Admin Panel**: This step involves creating a robust backend and frontend system that caters to the needs of both users and administrators. It includes the development of user profiles, developer rankings, hackathon and event integration, and bot integration for users. The admin panel will focus on user management, SBT token management, activity and achievement management, notification management, and reporting and analytics.\n- **Bot Development and SBT Minting System**: This step focuses on building a versatile bot that handles user registration, account management, notifications, and integration with the Ton Developers Program system. Additionally, it involves the development of the SBT minting system, which will be integrated into the existing admin panel. This system will allow authorized users to mint SBT tokens for various activities and events, working seamlessly with the existing features of the admin panel and providing a user-friendly interface for managing the minting process.\n\nThese two footsteps aim to create a comprehensive system that supports the Ton Developers Program by motivating developers to actively participate in the TON ecosystem and providing an efficient, secure, and accessible platform for managing users, SBT tokens, and related activities.\n\nThe development of a comprehensive backend and frontend system for users, the admin panel is crucial for the Ton Developers Program System. This footstep aims to create a seamless and user-friendly experience for developers, trusted activists, and other users interacting with the platform, while ensuring security, scalability, and performance.\n\nThe development of a Ton Developers Program Bot and SBT Minting System is crucial for the Ton Developers Program, as it will provide a seamless way to reward and engage developers within the community. By creating a bot for handling user registration, notifications, and rankings, along with a secure and user-friendly minting system, developers will be encouraged to actively participate and contribute to the TON ecosystem.\n\n**Complete information about the technical task you can find here**:\nhttps://docs.google.com/document/d/1wfO_JAZ56NX_Ffl02YvUVEjrQyqypYVgEN_95M3GMyQ/edit#\n\n\n### Context\n\nThe Ton Developers Program System requires a robust backend and frontend infrastructure to support user profiles, developer rankings, event integration, and SBT token management. Additionally, an admin panel is needed for trusted activists and other authorized users to manage the platform effectively. Furthermore, an SBT Minting System must be integrated into the admin panel for efficient minting of SBT tokens for various activities and events.\n\nThe Ton Developers Program aims to foster active participation from developers in the TON ecosystem by providing rewards in the form of SBT tokens for various activities, such as completing footstep tasks, contributing to open-source projects, writing articles, and delivering public presentations. The program currently lacks a well-integrated bot and minting system to facilitate these rewards and developer engagement.\n\nThis proposal aims to create a Ton Developers Program Bot and SBT Minting System that will be integrated with the Ton Developers Program, making it easier to manage user rewards and engagement while promoting a vibrant and active developer community.\n\n### Goals\n\n### Step 1\n\n- Develop a secure, scalable, and reliable backend and frontend infrastructure for users, admin panel.\n- Create user-friendly interfaces for user profiles, developer rankings, event and achievements integration.\n- Implement an admin panel with comprehensive features and functionality for trusted activists and other authorized users.\n- Integrate the SBT Minting System seamlessly into the admin panel to enable efficient SBT token minting processes.\n\n### Step 2\n\n- Develop an Ton Developers Program Bot with features for user registration, notifications, and rankings\n- Create a secure and user-friendly SBT Minting System integrated with the admin panel\n- Ensure the bot and minting system are seamlessly integrated with the Ton Developers Program\n- Provide comprehensive documentation and guides for using the bot and minting system\n\n### Deliverables\n\n### Step 1\n\n- A fully functional backend and frontend system for users, admin panel, and the SBT Minting System.\n- User-friendly interfaces for user profiles, developer rankings, event integration, and SBT token management.\n- A comprehensive admin panel with features and functionalities for trusted activists and other authorized users.\n- A seamlessly integrated SBT Minting System within the admin panel.\n- Documentation for APIs, usage guides, and best practices.\n- Test coverage to ensure reliability, performance, and security.\n### Step 2\n\n- A fully functional Ton Developers Program Bot with features for user registration, notifications, and rankings\n- A secure and user-friendly SBT Minting System integrated with the admin panel\n- Seamless integration with the Ton Developers Program backend and frontend\n- Comprehensive documentation and guides for using the bot and minting system\n\n### Definition of Done\n\n### Step 1\n\n- [x] The backend and frontend system for users, admin panel is developed and meets the requirements outlined in the technical specifications.\n- [x] User-friendly interfaces are created for user profiles, developer rankings, event integration.\n- [x] A comprehensive admin panel is implemented with necessary features and functionalities for trusted activists and other authorized users.\n- [x] Documentation for APIs, usage guides, and best practices is provided and accessible to users.\n- [x] Test coverage ensures reliability, performance, and security.\n\n### Step 2\n\n- [x] - Ton Developers Program Bot is developed with all required features and successfully integrated with the Ton Developers Program System\n- [x] - The SBT Minting System is securely implemented and integrated with the admin panel\n- [x] - Both the bot and minting system are seamlessly integrated with the Ton Developers Program backend and frontend\n- [x] - Comprehensive documentation and guides are provided for using the bot and minting system\n\n### Reward\n\nStep 1: 2500 TON\nStep 2: 2500 TON\n\nStandard TON Footstep NFT\n\n### Deadline\n\n1 month",
    "created_at": "2023-04-21T13:19:09Z",
    "updated_at": "2023-05-29T13:45:13Z"
  },
  {
    "state": "closed",
    "title": "TON.app v2 - the new and only marketplace of the TON apps.",
    "body": "### Summary\n\nWe propose to create an open-source TON App website with enhanced functionality to support multiple categories and better SEO. The current version of TON App website lacks these features and is losing traffic as a result. Our goal is to develop a self-listing platform that allows anyone to list their TON projects instantly, increasing traffic and liquidity on TON. We will redesign the website's interface to fit the TON theme and ensure that the community approves the design scheme before proceeding.\n\n\n### Context\n\n_No response_\n\n### Goals\n\nOur goal is to develop and deliver a functional TON App website within 1 week(+1 is an additional week for emergency cases). The website will include a landing page, categories page, personal profile with the ability to add or edit projects, and a website authentication feature using TON Connect V2 and an additional password for security purposes when users edit their projects. Our feedback system will provide fast approvals from admins while avoiding scam comments, and users will be able to upload up to three images per feedback comment.\n\n### Deliverables\n\nOur team will deliver everything outlined in the list of goals(1 week(+1 is an additional week for emergency cases)), including a functional TON App website that supports multiple categories and has improved SEO. The website's interface will be redesigned to fit the TON theme, and the authentication system will use TON Connect V2 with an additional password for security purposes. Our feedback system will provide fast approvals from admins while avoiding scam comments, and users will be able to upload up to three images per feedback comment.\n\n\n### Definition of Done\n\nThe project will be considered complete when it is available on the hosted website and is tested/submitted by a few validators. The website will be open-source, allowing the community to contribute to its development and improve its functionality over time.\n\n### Reward\n\nWe propose a reward of $30,000 in $TON for the successful completion of the project. This reward will go to the development team and will be spent on the marketing purposes of [The Old Castle Defense](https://theoldcastle.xyz/?referral=ad479c11) Play-To-Earn PvP Game. The reward will help us to move further and to transfer our Game development studio to TON as well. We're going to make a lot of updates regarding the future of the game as traffic will only grow.\n\n### Deadline\n\n2 Weeks since the approval.",
    "created_at": "2023-04-21T10:56:43Z",
    "updated_at": "2023-05-01T07:31:56Z"
  },
  {
    "state": "closed",
    "title": "DeDust v2 API for Python",
    "body": "### Summary\n\nI am developing a Python wrapper for DeDust v2 DEX API. The wrapper will simplify the integration of the DeDust API into Python-based applications and enable developers to access the API's features more easily. The code has already been published on GitHub: https://github.com/ClickoTON-Foundation/dedust.\n\n### Context\n\nDeDust is a decentralized exchange. It offers users a range of functions, including providing liquidity and trading. However, integrating the Deduct v2 DEX API into Python-based applications can be difficult and time-consuming, which may deter developers from using the platform to retrieve data.\n\n### Goals\n\nThe main goals of this TON Footstep are to:\n\n \u0432\u0402\u045e Simplify the integration of DeDust API into Python-based applications\n \u0432\u0402\u045e Increase the accessibility of DeDust to developers\n \u0432\u0402\u045e Improve the overall user experience for DeDust users\n\n### Deliverables\n\n- [ ] Publish wrapper on PyPI.\n- [ ] Examples of using.\n- [ ] Synchronous wrapper.\n\n\n### Definition of Done\n\n- [x] Basic functionality.\n- [x] Code published on GitHub. (https://github.com/ClickoTON-Foundation/dedust) \n\n### Reward\n\n* Standard TON Footstep NFT\n* 50 USD in TON\n\n### Deadline\n\nWithin a month.",
    "created_at": "2023-04-20T20:53:05Z",
    "updated_at": "2023-04-24T11:41:31Z"
  },
  {
    "state": "open",
    "title": "TON Onboarding Youtube Shorts Series",
    "body": "![](https://telegra.ph/file/359d36b0a0d9e5f6afe80.png)\n### Summary\n\n**[QDev Studio](https://t.me/qdevstudio)** propose to create a series of user-friendly **TON onboarding short videos** that cater to all people, regardless of their prior knowledge, using engaging animations and educational materials. These short videos will be accessible to a global audience with subtitles in multiple languages (Ukrainian, Russian, Czech, Romanian, Spanish, French, and Portuguese) and will promote TON's growth by attracting new users from the broader cryptocurrency community. Our aim is to create a unified, **easy-to-understand knowledge base**.\n\n### Context\n\nCurrently, there is a noticeable gap in the TON ecosystem when it comes to easily digestible video materials that cater to individuals with varying levels of expertise. Our studio, which specializes in modern animated videos and educational materials, is eager to bridge this gap by producing a series of engaging TON onboarding short videos. We have already created two videos for TON, which can be found on our [YouTube channel](https://youtube.com/@qpwetech). Our team possesses a deep understanding of TON, with @qpwedev successfully developing a [channel about TON](https://t.me/qpwethinks) boasting over 500+ subscribers, including strong CIS, Chinese, and Indonesian communities, as well as [several non-profit ecosystem projects](https://t.me/qpwethinks/284).\n\n### Our advisers\n![](https://telegra.ph/file/4c0b975a1a2c7f3d0ca8f.png)\n@talkol (Founder at [orbs.com](https://orbs.com) , TON Ambassador, Contributor)\n@SwiftAdviser (Developer Onboarding @ TON Foundation)\n@xssnick (Massive TON contributor)\n@goreactdev (FoxTails co-founder, TON Contributor)\n@Gusarich (TON \u0420\u040eontributor)\n@dvlkv (CTO at [tonwhales.com](https://tonwhales.com), TON Contributor)\n[@nikralayli](https://t.me/larkenization) (Researcher and SMM Expert: Adept at User Attraction and Engagement)\n@data-will-be-here AKA **sd** (Developer, TON Enthusiast, and Passionate Blogger)\n@vplotvinov (Developer, Tonstarter)\n[@andykozik](https://t.me/andykozik) (IT Entrepreneur, co-founder of [Lemons.studio](https://lemons.studio) and [Mutanttoadz.org](https://mutanttoadz.org))\n\n### Goals\n\n- Successfully produce and publish a series of thirteen short TON onboarding videos on our YouTube channel to educate and engage viewers.\n- Ensure that the videos reach a global audience by providing high-quality voiceovers and subtitles in multiple languages.\n- Promote existing TON infrastructure projects by integrating native ads within the videos.\n- Receive positive feedback from the community, demonstrating the effectiveness and value of the video series.\n- Titles and links for each video that has been produced.\n\n### Deliverables\n![](https://telegra.ph/file/0566b8bfffe6f91081b36.png)\nEach short video will have a duration of 50-60 seconds, based on [research](https://twitter.com/paddyg96/status/1646898356419981315?s=46&t=ZnnmIJ_klrSQpKEVwhavsQ) indicating this to be the optimal length for retaining viewer attention while delivering essential information without any unnecessary filler content.\n\nUpcoming Thirteen Short Video Plan:\n\n- [x] Buying TON: A Step-by-Step Guide\n- [ ] TON vs SOL and ETH: Key Advantages\n- [ ] How to store TON? Best Practices\n- [ ] Understanding Staking in Crypto\n- [ ] Using a Blockchain Explorer\n- [ ] DEX Explained: Its Purpose and Necessity\n- [ ] Blockchain Bridges: An Introduction\n- [ ] NFTs: What They Are and Why They Matter\n- [ ] Buying & Selling NFTs: The Ultimate Guide\n- [ ] Token Minting: How It's Done\n- [ ] Tact Explained in 60 Seconds\n- [ ] TON Footsteps Program: All You Need to Know\n- [ ] Why TON is More than Just a Blockchain\n\n### Definition of Done\n\n- Thirteen short onboarding videos have been produced and published on our YouTube channel.\n- All videos feature high-quality voiceovers and subtitles in the specified languages.\n- The videos include integrated native ads for existing TON infrastructure projects.\n- Positive feedback has been received from the community.\n\n### Video Production Workflow and Resource\n\n- Scriptwriting and Concept Development (2 hours)\n  - Crafting a compelling narrative and shaping the overall idea\n- Advisor Consultations and Advisory Discussions (30 minutes)\n- Ensuring Technical Accessibility for Non-expert Audiences (30 minutes)\n  - Simplifying complex concepts for a broader audience\n- Animation and Visual Design in Figma (6 hours)\n  - Producing engaging visuals and graphic elements for the video\n- Storyboarding and Visual Development (1 hours)\n  - Creating a visual roadmap of the script and scene progression\n- Voiceover Recording (20 minutes)\n  - Capturing high-quality audio narration \n- Music, Animation and Sound Effects Licensing (30 minutes)\n  - Selecting and buying suitable audio, video assets\n- Video Editing and Post-Production (30 minutes)\n  - Merging visual and audio components, refining transitions, and perfecting the final video\n- Quality Assurance, Revisions, and Error Correction (30 minutes)\n  - Collaborating with advisers to review the video and implement necessary changes\n- Subtitle Translation (15 minutes)\n  - Providing multilingual subtitles for increased accessibility\n- Video Description and Tag Writing (10 minutes)\n  - Composing an enticing and SEO-optimised video description and tags\n- Project Management and Team Communication (1 hours)\n  - Ensuring smooth collaboration and information flow among team members\n- Contingency Fund (N/A)\n  - Allocating resources for unexpected costs and challenges\n \n### Reward\n\n- Standard TON Footstep NFT\n- $607.5/Video\n\n### Oriental Release Date\n\nFor **13** short videos needing **~175.5 hours**, working **6 hours** daily, it'll take **~29.5 days**. With holidays and extra time, expect around **~50 days**.",
    "created_at": "2023-04-19T15:07:26Z",
    "updated_at": "2023-06-13T23:05:01Z"
  },
  {
    "state": "open",
    "title": "TON Onboarding Youtube Video Series",
    "body": "![](https://telegra.ph/file/46fdc748a952e21c416a4.png)\n\n### Summary\n\n**[QDev Studio](https://t.me/qdevstudio)** propose to create a series of user-friendly **TON onboarding videos** that cater to all people, regardless of their prior knowledge, using engaging animations and educational materials. These videos will be accessible to a global audience with subtitles in multiple languages (Ukrainian, Russian, Czech, Romanian, Spanish, French, and Portuguese) and will promote TON's growth by attracting new users from the broader cryptocurrency community. Our aim is to create a unified, **easy-to-understand knowledge base**.\n\n### Context\n\nCurrently, there is a noticeable gap in the TON ecosystem when it comes to easily digestible video materials that cater to individuals with varying levels of expertise. Our studio, which specialises in modern animated videos and educational materials, is eager to bridge this gap by producing a series of engaging TON onboarding videos. We have already created two videos for TON, which can be found on our [YouTube channel](https://youtube.com/@qpwetech). Our team possesses a deep understanding of TON, with @qpwedev successfully developing a [channel about TON](https://t.me/qpwethinks) boasting over 500+ subscribers, including strong CIS, Chinese, and Indonesian communities, as well as [several non-profit ecosystem projects](https://t.me/qpwethinks/284).\n\n### Our advisers\n![](https://telegra.ph/file/989662aa83eeedec4dca7.png)\n@talkol (Founder at [orbs.com](https://orbs.com) , TON Ambassador, Contributor)\n@SwiftAdviser (Developer Onboarding @ TON Foundation)\n@xssnick (Massive TON contributor)\n@goreactdev (FoxTails co-founder, TON Contributor)\n@Gusarich (TON \u0420\u040eontributor)\n@dvlkv (CTO at [tonwhales.com](https://tonwhales.com), TON Contributor)\n[@nikralayli](https://t.me/larkenization) (Researcher and SMM Expert: Adept at User Attraction and Engagement)\n@data-will-be-here AKA **sd** (Developer, TON Enthusiast, and Passionate Blogger)\n@vplotvinov (Developer, Tonstarter)\n[@andykozik](https://t.me/andykozik) (IT Entrepreneur, co-founder of [Lemons.studio](https://lemons.studio) and [Mutanttoadz.org](https://mutanttoadz.org))\n\n### Goals\n\n- Produce and publish a series of five TON onboarding videos on our YouTube channel to educate and engage viewers.\n- Ensure that the videos reach a global audience by providing high-quality voiceovers and subtitles in multiple languages.\n- Promote existing TON infrastructure projects by integrating native ads within the videos.\n- Receive positive feedback from the community, demonstrating the effectiveness and value of the video series.\n\n### Deliverables\n![](https://telegra.ph/file/9260359d42e2f481f0505.png)\nEach video will have an approximate duration of 10 minutes, focusing solely on essential information for the user, without any unnecessary filler content.\n\nUpcoming Five Video Plan:\n- [x] Types of Cryptocurrency Wallets and Seed Phrase Importance\n   Why wallets are needed and the different types: Custodial / Non-custodial / Cold / Hot / Hardware (with examples of specific wallets). Seed phrases, how to store them, and why they are important. Why wallets have different versions.\n\n - [ ] Exploring Blockchain Transactions with Explorers\nAnalysis of what a blockchain explorer is and how to use it. Examination of basic transactions (exchange on a DEX, transferring NFTs, etc.). Explorers in testnets.\n\n- [ ] Cryptocurrency Security and Recognising Scams\nSecurity, potential attacks (forgery of NFTs, contracts, entering seed phrases). Examples of real scams.\n\n- [ ] Understanding Addresses in Cryptocurrency Networks\nExplanation of how addresses are structured. Who and how they are assigned. Different forms of addresses.\n\n- [ ] Introduction to Testnets and Their Usage\nWhat is a testnet, why it is needed, and how to use it. Converting a wallet to testnet and replenishing with test coins.\n\n### Definition of Done\n\nThe proposal will be considered complete and successful when:\n\n- Five onboarding videos has been produced and published on our YouTube channel.\n- All videos have high-quality voiceovers and subtitles in the specified languages.\n- The videos have integrated native ads for existing TON infrastructure projects.\n- There is a positive feedback from the community.\n-  Titles and links for each video that has been produced.\n\n### Comprehensive Video Production Workflow and Resource\n\n- Analysing Similar Videos (30 minutes)\n  - Reviewing comparable content to pinpoint pros and cons, ensuring a superior outcome\n- Scriptwriting and Concept Development (5 hours)\n  - Crafting a compelling narrative and shaping the overall idea\n- Advisor Consultations and Advisory Discussions (2 hours)\n- Ensuring Technical Accessibility for Non-expert Audiences (1 hours)\n  - Simplifying complex concepts for a broader audience\n- Animation and Visual Design in Figma (16 hours)\n  - Producing engaging visuals and graphic elements for the video\n- Storyboarding and Visual Development (3 hours)\n  - Creating a visual roadmap of the script and scene progression\n- Voiceover Recording (2 hours)\n  - Capturing high-quality audio narration \n- Music, Animation and Sound Effects Licensing (2 hours)\n  - Selecting and buying suitable audio, video assets\n- Video Editing and Post-Production (2 hours)\n  - Merging visual and audio components, refining transitions, and perfecting the final video\n- Quality Assurance, Revisions, and Error Correction (2 hours)\n  - Collaborating with advisers to review the video and implement necessary changes\n- Subtitle Translation (1 hours)\n  - Providing multilingual subtitles for increased accessibility\n- Thumbnail Design (1 hours)\n  - Crafting an attention-grabbing and informative thumbnail image\n- Video Description and Tag Writing (30 minutes)\n  - Composing an enticing and SEO-optimised video description and tags\n- Project Management and Team Communication (2 hours)\n  - Ensuring smooth collaboration and information flow among team members\n- Contingency Fund (N/A)\n  - Allocating resources for unexpected costs and challenges\n\n- Software to Buy\n  - [Screenstory.io](https://www.screenstory.io/)\n  - TBA\n\n### Reward\n\n- Standard TON Footstep NFT\n- $1800/Video\n\n### Deadline\n\nFor **5** videos needing **~200 hours**, working **6 hours** daily, it'll take **~33 days**. With holidays and extra time, expect around **~50 days**.",
    "created_at": "2023-04-19T14:47:43Z",
    "updated_at": "2023-06-13T23:04:03Z"
  },
  {
    "state": "closed",
    "title": "ADNL over UDP for Node.JS",
    "body": "### Summary\n\nThe development of an ADNL over UDP implementation is crucial for the TON ecosystem, as it provides a secure, efficient, and reliable communication protocol between nodes. By creating an ADNL over UDP implementation, developers will be able to easily integrate this protocol into their projects and improve the overall performance and security of their applications.\n\n### Context\n\nADNL (Abstract Datagram Network Layer) is an essential protocol for TON, which enables secure and efficient communication between nodes. Currently, there is a lack of an easy-to-use implementation of ADNL over UDP, which makes it difficult for developers to adopt this protocol and leverage its benefits.\n\nThis proposal aims to create an ADNL over UDP implementation, which will make it easier for developers to incorporate ADNL into their projects and improve the overall performance and security of the TON ecosystem.\n\n### Goals\n\n* Develop an ADNL over UDP implementation that adheres to TON standards\n* Ensure the implementation is secure, efficient, and reliable\n* Create a well-documented API that is easy for developers to understand and integrate\n* Provide example code and use cases to help developers get started with the implementation\n\n### Deliverables\n\n* A fully functional ADNL over UDP implementation\n* API documentation and usage guides\n* Example code and use cases to demonstrate the implementation's functionality\n* Test coverage to ensure the implementation's reliability and performance\n* ADNL client will allow communication between nodes: developers can use ADNL as a transport protocol in their servers. This can be done by few lines of code\n\n### Definition of Done\n\n- [x] The ADNL over UDP implementation is developed and meets TON standards\n- [x] API documentation and usage guides are created and accessible to developers\n- [x] Example code and use cases are provided to help developers integrate the implementation into their projects\n- [x] Test coverage ensures the implementation's reliability and performance\n\n### Reward\n\n* Standard TON Footstep NFT\n* 3840 USD in TON\n\n### Deadline\n\n2 weeks",
    "created_at": "2023-04-18T20:02:14Z",
    "updated_at": "2023-05-24T10:10:49Z"
  },
  {
    "state": "closed",
    "title": "Access control via NFT and SBT",
    "body": "### Summary\n\nThis TON Footstep proposal aims to create a decentralized solution for renting and borrowing NFTs and SBTs to facilitate access management in organizations or companies. The solution will consist of a smart contract and a Telegram bot that allows administrators to set up the rental parameters and manage access to specific chats or channels for a limited time.\n\n### Context\n\nCurrently, organizations and companies need a flexible and secure way to grant temporary access to their employees for specific chats and channels. With the growing popularity of NFTs and SBTs in access management, there is a need for a system that allows administrators to rent and borrow these tokens to manage user access to different resources within their organization. This proposal aims to address this need by developing a smart contract and Telegram bot that can automate the process of renting and borrowing NFTs and SBTs.\n\n### Goals\n\n* Develop a smart contract to manage the renting and borrowing of NFTs and SBTs.\n* Create a Telegram bot to interact with the smart contract, enabling administrators to set up rental parameters and manage user access.\n* Ensure seamless integration of the smart contract and Telegram bot with existing group chats and channels.\n* Provide an open GitHub repository with the necessary functionality and basic tests.\n\n### Deliverables\n\n* A fully functional smart contract for renting and borrowing NFTs and SBTs.\n*  A Telegram bot for administrators to set up rental parameters and manage user access.\n* Complete documentation and guidelines on using the smart contract and Telegram bot.\n* An open GitHub repository with the implemented solution, including source code, basic tests, and instructions for deployment.\n\n### Definition of Done\n\n- [ ] The open GitHub repository is published with complete source code, basic tests, and deployment instructions.\n- [ ] The smart contract is developed and thoroughly tested for managing the renting and borrowing of NFTs and SBTs.\n- [ ] The Telegram bot is created and can interact with the smart contract, allowing administrators to set up rental parameters and manage user access.\n- [ ] The smart contract and Telegram bot are seamlessly integrated with existing group chats and channels.\n\n\n### Reward\n\n* Standard TON Footstep SBT\n* 1250$ in TON equivalent\n\n### Deadline\n\n3-4 weeks from start of the development",
    "created_at": "2023-04-17T16:43:28Z",
    "updated_at": "2023-05-21T11:49:22Z"
  },
  {
    "state": "closed",
    "title": "SBT Minter telegram bot",
    "body": "### Summary\n\nA telegram bot that provides a user-friendly interface to interact with SBT minting to simplify the process of creating SBT awards.\n\n### Context\n\nRight now is it a problem for organizers to create NFT awards for various events. They have to turn to third-party developers to solve this problem. Our task is to make solution, that will automates process of minting new SBT-awards!\n\n### Goals\n\nWe need to create a telegram bot, with such flows:\n\nNew collection flow:\n- Bot asks user to upload the cover image \n- Bot asks user to upload the collection image\n- Bot asks user to enter the collection name\n- Bot asks user to enter the collection description\n- Bot asks user to enter the item name (it will be the same for all items + #index)\n- Bot asks user to enter the item description\n- Bot asks user to upload the item image (image property in NFT metadata)\n- Bot asks user to upload a file containing addresses (separated by newlines) that should receive NFTs\n- Bot uploads images to storage, creates collection and item manifests and uploads them, then creates a ton:// link that send necessary amount of TON to wallet of the telegram bot. Upon receipt of funds the wallet begins to mint SBT items\n\nExisting collection flow:\n- Bot asks user to enter the existing collection address\n- Bot checks if the collection exists and is compatible with the bot\n- Bot shows how the previous batch of items was minted (name, description, image), asks the user if the items should stay the same\n- If not, bot asks the user to enter new item name, new item description, and new item image\n- Bot asks user to upload a file containing addresses (separated by newlines) that should receive NFTs\n- Bot uploads item image to storage (if it was changed), creates item manifest (if any item properties were changed) and uploads it, then creates a ton:// link that will send necessary amount of TON to the wallet of the telegram bot. Which, in turn, begins to mint new items.\n\nSuperadmin flow:\n- /add - add new admin, that will be able to use bot\n- /list - see all admins of the bot\n- /delete - delete an admin by his ID\n\nUse s3 as file storage(that will be paid by TON Foundation)\n\n### Deliverables\n\n- Create well-working SBT Minter telegram bot\n\n\n### Definition of Done\n\n- [ ] Hosted & tested telegram bot\n- [ ] Code reviewed and hosted on github\n\n### Reward\n\n- Standart TON Footstep SBT\n- 2000$ in TON\n\nDeadline: 3 weeks from start of the development",
    "created_at": "2023-04-16T21:35:28Z",
    "updated_at": "2023-06-07T17:36:54Z"
  },
  {
    "state": "closed",
    "title": "TON Connect 2 for Python",
    "body": "### Summary\n\nWe are making a library for using TON Connect in Python.\n\nhttps://github.com/ClickoTON-Foundation/tonconnect\n\n### Context\n\nWith our library, Python developers will be able to implement TON into their applications. \n\nTON Connect provides the ability to:\n1. Receive the user's wallet address. \n2. Send transaction requests.\n3. Sign messages.\n\n### Goals\n\n* Let Python developers use TON Connect in their applications.\n\n### Deliverables\n\n- [ ] Signing data.\n- [ ] Asynchronous and synchronous wrapper.\n- [ ] Refactoring and more user-friendly.\n- [ ] Documentation.\n\n### Definition of Done\n\n- [x] Connection to HTTP Bridge.\n- [x] \u0420\u040eonnecting and confirming the wallet address.\n- [x] Almost ready transaction confirmations.\n- [x] The code is published on GitHub.\n\n### Reward\n\n* Standard TON Footstep NFT\n* 750 USD in TON",
    "created_at": "2023-04-14T10:49:53Z",
    "updated_at": "2023-04-19T09:44:24Z"
  },
  {
    "state": "closed",
    "title": "Remove the requirement to open pull requests to the Hall of Fame",
    "body": "At the moment, those who complete Footsteps have to open Pull Requests after each completed work.\nThis may not be an obvious point for beginners, which scares off potential contributors.\nAnd those contributors who have never worked with Github (for example, if the Footstep is not about development) will not be able to open PR correctly at all.\n\nI propose to transfer the duty of adding users to the Hall of Fame from the users themselves to the committee.\nTON wallet address for rewards may be sent in comments of the Footstep issue.",
    "created_at": "2023-04-14T06:27:13Z",
    "updated_at": "2023-05-18T12:01:37Z"
  },
  {
    "state": "closed",
    "title": "TON DocWatch",
    "body": "### Summary\n\nDevelop a service for monitoring and tracking code changes in the [ton-blockchain/ton](https://github.com/ton-blockchain/ton) repository. This service will enable developers, users, and content creators to stay up-to-date with changes in the repository and ensure that their documentation, tutorials, and articles remain accurate.\n\n### Context\n\nDevelopers and users rely on the [docs.ton.org](https://docs.ton.org/) documentation and [blog.ton.org](https://blog.ton.org/) tutorials to build and maintain applications on the TON Blockchain network. However, it can be challenging to keep track of changes and updates to the TON implementation repository, which can lead to outdated, deprecated, or unusable content.\n\n### Goals\n\n* Develop a service that allows users to select the directories or files they want to monitor for changes in the TON implementation repository.\n  * Monitor changes on specific files or directories.\n  * Track included files.\n   * Add an option to ignore style changes (spaces, tabs, etc.), comments.\n* Enable users to generate a token that they can use to display a badge on their website or documentation indicating whether the commit with the latest changes or outdated.\n* Provide an API that allows users to make GET requests for more detailed information on their token.\n\n### Deliverables\n\n* A functioning service that can monitor and track changes in the [ton-blockchain/ton](https://github.com/ton-blockchain/ton) repository.\n* An easy-to-use web interface that allows users to select directories or files they want to monitor and generate tokens for displaying badges.\n* A flexible API that provides users with detailed information on their token.\n\n### Definition of Done\n\n* GitHub repository with the source code.\n* The service is available online and functioning properly.\n\n### Reward\n\n* Standard TON Footstep NFT\n* 5000 USD equivalent in TON",
    "created_at": "2023-04-13T23:14:45Z",
    "updated_at": "2023-04-23T13:41:14Z"
  },
  {
    "state": "closed",
    "title": "Integrating Kotlin SDK with Java Projects",
    "body": "PR for #[172](https://github.com/ton-society/ton-footsteps/issues/172)\n\nDone in:\nhttps://github.com/andreypfau/ton-kotlin/wiki/Integrating-TON-Kotlin-with-Java-projects\n\nTON wallet for reward: \nEQDhfNEHdK06MNRjGyx5h0Pao5NgqFTE8ug2SrZ14c6bJnJF",
    "created_at": "2023-04-12T16:38:02Z",
    "updated_at": "2023-04-13T10:29:55Z"
  },
  {
    "state": "closed",
    "title": " Reproducible research of performance of TON Footsteps as a Component",
    "body": "Footstep: https://github.com/ton-society/ton-footsteps/issues/184\n\nDone in: https://github.com/seriybeliy11/Saturn_M\n\nTON wallet for reward:",
    "created_at": "2023-04-12T13:39:59Z",
    "updated_at": "2023-04-15T16:22:53Z"
  },
  {
    "state": "closed",
    "title": "qq",
    "body": "",
    "created_at": "2023-04-12T13:23:53Z",
    "updated_at": "2023-04-13T11:31:21Z"
  },
  {
    "state": "closed",
    "title": "Full guide with explanations on Sandbox",
    "body": "### Summary\n\nThis proposal is aimed at creating detailed and understandable documentation (maybe guide) for Sandbox for beginners.\n\n * https://github.com/ton-community/sandbox\n\n### Context\n\nSandbox is a great tool that has significantly accelerated and simplified the testing of smart contracts in TON.\nBut it doesn't have enough documentation yet, apart from a README, which is not very clear to beginners.\n\nI gave my friends, who knew almost nothing about how smart contracts work in TON, the opportunity to figure out the Sandbox & Blueprint on their own. As a result, they had a lot of questions to which they could not find a clear answer.\n\nIn addition to questions about specific things and functions, it was difficult for them to understand the meaning of wrappers and some other mechanics.\n\n### Goals\n\n * Write a clear and accessible explanation (in the format of documentation or guide) of all things from Sandbox\n\n### Deliverables\n\n * Make the process of onboarding in writing smart contracts and tests for them as comfortable and simple as possible\n\n### Definition of Done\n\n * [ ] Guide/Documentation is completed and easily available for newcomers\n\n### Reward\n\n * Standard TON Footstep NFT\n * $1000 in TON equivalent",
    "created_at": "2023-04-11T08:09:43Z",
    "updated_at": "2023-05-09T16:50:55Z"
  },
  {
    "state": "open",
    "title": "Telegram Web Apps platform documentation",
    "body": "### Summary\n\nThe platform documentation is one of the most important parts of any technology as long as it is the entrypoint for a developer that wants to use it. At this moment, Telegram Web Apps lacks of the single place which could provide all information about \nwhole platform.\n\n### Context\n\nTo learn more about TWA, developer should visit a lot of different places which are spread all over the Telegram's documentation, which is not good at all. It is also rather unclear where to find the required information.\n\nThis proposal brings the single documentation developers could use to learn more about platform and find application development recipes and tutorials along with the useful libraries, developed by the community.\n\n### Goals\n\n- Create a well readable documentation via [docusaurus](https://docusaurus.io/). It is considered as one of the most popular utilities at this time which helps to create developer's useful docs;\n- Provide information about all technical aspects of the platform. Starting from how Telegram application communicates with developer application and ending with the features, provided by the platform (back button, main button, viewport, etc.);\n- Provide tutorials on how developer should create their applications. Provide information about development process;\n- Translate documentation into Russian and English languages;\n- Provide the single source of libraries, developed by the community.\n\n### Deliverables\n\n- The single source of platform technical aspects and ideas\n- Tutorials on how developers should create applications\n- Links to the libraries developed by the community, which could be used in real applications\n\n### Definition of Done\n\n#### \u0432\u045a\u2026 Reserve a separate domain name, which will be the root for development related to Telegram Web Apps\n- Docs are available at https://docs.twa.dev/.\n- Source code: https://github.com/twa-dev/docs\n\n#### \u0432\u045a\u2026 Provide an information about TWA business value, use cases and required technologies\n\n- [Required technologies](https://docs.twa.dev/docs/introduction/required-technologies)\n- [Business value and use cases](https://docs.twa.dev/docs/introduction/usage)\n\n#### \u0432\u045a\u2026 Provide information about platforms and related GitHub repositories where TWA is presented on\n\n- [Platforms and repositories list](https://docs.twa.dev/docs/platforms)\n\n#### \u0432\u045a\u2026 Collect the list of methods and events, used by TWA along with their parameters and results\n\n- [Methods](https://docs.twa.dev/docs/apps-communication/methods)\n- [Events](https://docs.twa.dev/docs/apps-communication/events)\n\n#### \u0432\u045a\u2026 Describe how the native Telegram application communicates with the developer's client application on a low level. Provide an information about the difference between methods and events\n\n- [How communication works and what is the difference between methods and events](https://docs.twa.dev/docs/apps-communication/how-it-works)\n\n#### \u0432\u045a\u2026 Describe how client application could receive web app launch parameters and how developer could use them\n\n- [Everything about launch parameters](https://docs.twa.dev/docs/launch-params/structure)\n\n#### \u0432\u045a\u2026 Describe Telegram Web Apps features like back button, main button, viewport, theme parameters, closing behavior, popups and haptic feedback\n\n- [Section with UI description](https://docs.twa.dev/docs/ui/back-button)\n\n#### \u0432\u00ac\u045a Provide the section with tutorials and recipes of developing applications on the platform\n\n#### \u0432\u045a\u2026 Provide the list of libraries related to TWA, developed by the community\n\n- [Library description example](https://docs.twa.dev/docs/libraries/twa-dev-bridge)\n\n#### \u0432\u045a\u2026 The documentation is presented in English and Russian revisions\n\nThe documentation is now supported in both of the languages. Developers are now allowed to modify documents in Russian and English.\n\nRussian doc example: https://docs.twa.dev/ru/docs/introduction/about-platform\n\n### Reward\n\n1600 USD in TON",
    "created_at": "2023-04-07T20:30:20Z",
    "updated_at": "2023-06-05T10:38:41Z"
  },
  {
    "state": "closed",
    "title": "PHP SDK for TON",
    "body": "### Summary\n\nThe PHP community boasts a vast number of blockchain developers, yet currently, there is no PHP library available to interact with the TON blockchain. By creating a PHP library, we can attract new developers to the TON ecosystem and offer a valuable resource to the PHP community.\n\n### Context\n\nCurrently, the TON blockchain has several popular libraries, but none of them are tailored for the PHP developer community. To address this, the following features are planned to be developed as part of the footstep:\n\n- Implementation of Cell, Slice, Builder, and BOC (de)serialization\n- Implementation of an RPC client to work with the TON network\n- Support for popular structures from block.tlb\n- Support for TON base64 addresses\n- Support for HashmapE\n- Support for TON & BIP39 Mnemonics\n- Support for wallets (v3, v3r2, v4r2)\n- Ed25519 signing of transactions\n- Support for working with Jettons and NFTs\n\n### Goals\n\nDevelop a PHP SDK to work with the TON blockchain.\n\n### Deliverables\n\nA GitHub repository with the PHP library and examples.\n\n### Definition of Done\n\n- [x] A GitHub repository with the source code of the PHP library.\n\n### Reward\n\n- 5,000 USD in TON equivalent.\n- Standard TON Footstep NFT.",
    "created_at": "2023-04-07T05:23:34Z",
    "updated_at": "2023-05-15T18:58:40Z"
  },
  {
    "state": "open",
    "title": "C# SDK for TON",
    "body": "### Summary\n\nThe C# language, widely used in the .NET and Unity ecosystems, can greatly benefit from a dedicated SDK to work with TON Blockchain. Developing this SDK will attract more developers to the TON ecosystem, expanding its reach and utility. This proposal outlines a development plan to create a comprehensive C# SDK for TON Blockchain.\n\n### Context\n\nAt the moment there are many popular libraries to work with the TON blockchain, but there is not yet a single current library that could cover the C#, .NET and Unity developers community. Here is a development plan that I would like to implement as part of this footstep:\n\n-  Implement **native** Cell, Slice, Builder and BOC (de)serialization\n-  Implement an RPC client to work with the TON network\n-  Implement support for popular structures from block.tlb\n-  Implement support of TON base64 addresses\n-  Implement support of HashmapE\n-  Implement support of TON & BIP39 Mnemonics\n-  Implement support of wallets (v3, v3r2, v4r2)\n-  Implement Ed25519 signing of transactions\n-  Implement for workings with Jettons and NFTs\n\n\n### Goals\n\nDevelop the \u0420\u040e# SDK to work with the TON blockchain\n\n### Deliverables\n\nGitHub with TonSdk.NET library and examples\n\n### Definition of Done\n\nGitHub repository with the source code\n\n### Reward\n\n- 5,000 USD in TON equivalent\n- Standard TON Footstep NFT\n",
    "created_at": "2023-04-06T22:14:02Z",
    "updated_at": "2023-06-12T14:32:30Z"
  },
  {
    "state": "closed",
    "title": "Series of videos on TON programming - Livecoding on FunC in English with TON Dev Study.",
    "body": "### Summary\n\nYouTube is one of the preferred platforms for creating different types of learning content. While we have some great videos already, it's not enough to cater to the needs of our learners. \nTherefore, it's important to add another YouTube course in a live-coding style, specifically for FunC.\n\n### Context\n\n@MarcoDaTr0p0je already created a [RU] and [EN] version of a series of educational lessons for [Fift](https://www.youtube.com/watch?v=VvNHOqnMQKY&list=PLyDBPwv9EPsB47mqzF4Z9K8k6HYqPv6Px) and currently working on [FunC](https://www.youtube.com/watch?v=isfFGmyJvns&list=PLyDBPwv9EPsA5vcUM2vzjQOomf264IdUZ) course. \n\nWith this footstep TON Society will support additional work on recording English versions of FunC educational videos.\n\n### Goals\n\n* Record easy-to-follow videos for international learners in English.\n* Make sure that the sound and video quality are good enough and comfortable for learners(do not contain any significant sound glitches). \n* Make a public playlist on the [TON Dev Study](https://www.youtube.com/@WikiMar) YouTube channel with videos in 30 days.\n\n### Deliverables\n\n* Add a fresh and easy-to-follow live coding session for the actual FunC framework (Blueprint) to the course content. This will help us reach the international TON developer community who seek easy-to-understand video tutorials.\n\n### Definition of Done\n\n - [x] EN Version ~ 45 min [1 : Blueprint installation guide and deploying a simple contract on FunC](https://www.youtube.com/watch?v=y5XcaQAwxIQ) is uploaded.\n - [x] EN Version ~ 90 min [2 : FunC types, contract storage, statements, and functions guide](https://www.youtube.com/watch?v=0-A2IuK3KcA&list=PLyDBPwv9EPsDjIMAF3XqNI2XGNwdcB3sg&index=2) is uploaded.\n - [x] EN Version ~  90 min [3 :  Guide on sending internal and external messages](https://www.youtube.com/watch?v=vHTMZYIHE1M&list=PLyDBPwv9EPsDjIMAF3XqNI2XGNwdcB3sg&index=3) is uploaded.\n - [x] EN Version ~ 90 min [4: Writing local tests](https://www.youtube.com/watch?v=l_Vl1XHQ36k) is uploaded.\n\n### Oriental Release Date\n\nFour EN videos of the FunC live-coding course will upload by 10.05.23\n\n### Reward\n\n* Standard TON Footstep NFT\n* 1200$ in TON equivalent (300$ for each English version video)",
    "created_at": "2023-04-06T14:31:29Z",
    "updated_at": "2023-05-07T19:44:19Z"
  },
  {
    "state": "closed",
    "title": "Detailed description of Transaction layout in the TON Documentation.",
    "body": "### Summary\n\nCreate a new section Transaction Layout and fill this with verified knowledge from [TON Blockchain]((https://ton.org/docs/tblkch.pdf#page=75&zoom=100,148,290)).  Documentation should be verified for the current implementation in TON. We also want to improve readability.\n\n\n### Context\n\nCurrently, we refer to information about Transaction in TON in [TON Blockchain Document ](https://ton.org/docs/tblkch.pdf#page=75&zoom=100,148,290)\n\nNeed to create a new page or section \"Transaction Layout\" in the [Data Formats](https://docs.ton.org/develop/data-formats/cell-boc) section and transfer there all actual knowledge from [TON Blockchain document](https://ton.org/docs/tblkch.pdf#page=75&zoom=100,148,290).\n\n[How to contribute to TON Documentation?](https://docs.ton.org/contribute)\n\n\n### Goals\n\n1. To create a detailed and accurate description of the TON Transaction that is up-to-date and easy to understand. It will be helpful to include a graphic explanation to further clarify its structure and processes.\n2. This page(section of docs) is primarily intended for documentation purposes and not as a tutorial, so it is important to minimize the use of personal examples or analogies in the text. It is crucial to ensure that the content is suitable for both professionals and non-professionals alike, while still providing valuable information.\n3. If a concept was written in [TON Blockchain ](https://ton.org/docs/tblkch.pdf#page=75&zoom=100,148,290) document but is not yet production-ready for the current TON Blockchain, ensure it is clearly marked with a special label or information bar to avoid confusion.\n4. All references to Transaction in the [TON Blockchain](https://ton.org/docs/tblkch.pdf#page=75&zoom=100,148,290) should be redirected to the new Transaction Layout section in docs.ton.org. (For instance, [this](https://docs.ton.org/develop/howto/faq#what-is-the-layout-of-a-transaction-in-ton) link)\n\n### Deliverables\n\n* References to possibly outdated documentation are excluded.\n* The best explanation for beginners.\n* All basic information is gathered in one platform and can be found using Search.\n\n### Definition of Done\n\n- [x]  New page(section) Transaction Layout created with PR to docs.ton.org Data Formats section.\n- [x]  Transaction Layout actual implementation corresponds to created documentation\n- [x]  Links to Transaction Layout redirected within docs.ton.org\n- [x]  PR Reviewed and merged\n\n### Oriental Release Date\nTBD\n\n### Reward\n\n* 500 $ in TON equivalent.\n* Standard TON Footstep NFT.",
    "created_at": "2023-04-06T10:36:39Z",
    "updated_at": "2023-05-24T10:11:21Z"
  },
  {
    "state": "closed",
    "title": "Detailed description of TON block layout in the TON Documentation.",
    "body": "### Summary\n\nCreate a detailed description of the Block layout in TON. The current reference is the original [TON Blockchain document](https://docs.ton.org/tblkch.pdf#page=96&zoom=100,148,172), which needs to be transferred to docs.ton.org and verified for the current implementation. We also want to improve readability.\n\n### Context\n\nNeed to create a new page or section \"Block Layout\" in the [Data Formats](https://docs.ton.org/develop/data-formats/cell-boc) section and transfer there all actual knowledge [TON Blockchain document](https://docs.ton.org/tblkch.pdf#page=96&zoom=100,148,172). \n\n[How to contribute to TON Documentation?](https://docs.ton.org/contribute)\n\n### Goals\n\n\n1. To create a detailed and accurate description of the TON block layout that is up-to-date and easy to understand. It will be helpful to include a graphic explanation to further clarify its structure.\n2. This page(section of docs) is primarily intended for documentation purposes and not as a tutorial, so it is important to minimize the use of personal examples or analogies in the text. It is crucial to ensure that the content is suitable for both professionals and non-professionals alike, while still providing valuable information.\n3. If a concept was written in [TON Blockchain ]((https://docs.ton.org/tblkch.pdf#page=96&zoom=100,148,172)) document but is not yet production-ready for the current TON Blockchain, ensure it is clearly marked with a special label or information bar to avoid confusion.\n4. All references to Block Layout in the [TON Blockchain](https://docs.ton.org/tblkch.pdf#page=96&zoom=100,148,172) should be redirected to the new Block Layout section in docs.ton.org. (For instance, [this](https://docs.ton.org/develop/howto/faq#what-is-the-layout-of-blocks-on-ton) link)\n\n### Deliverables\n\n* References to possibly outdated documentation are excluded\n* The best explanation for beginners\n* All basic information is gathered in one platform and can be found using Search\n\n### Definition of Done\n\n- [x]  New page(section) Block Layout created with PR to docs.ton.org Data Formats section\n- [x]  Block Layout actual implementation corresponds to created documentation\n- [x]  Links to Block Layout redirected within docs.ton.org\n- [x]  PR Reviewed and merged\n\n### Oriental Release Date\nTBD\n\n### Reward\n\n* 500$ in TON equivalent\n* Standard TON Footstep NFT",
    "created_at": "2023-04-05T15:25:16Z",
    "updated_at": "2023-05-24T10:11:29Z"
  },
  {
    "state": "open",
    "title": "TON Lake Framework",
    "body": "### Summary\n\n<img width=\"1721\" alt=\"Untitled\" src=\"https://user-images.githubusercontent.com/29164042/230064411-7996552f-d32b-41f3-a97a-524ab421dd78.png\">\n\nDevelop a framework that allows developers to build custom indexers for the needs of their applications. The framework should be simple and flexible, allowing developers to create their own logic to process TON blockchain data in their preferred programming language. The framework should also be reliable and cost-effective, utilizing Amazon S3 as a data source.\nIf you want to know more, I recommend you check out https://docs.near.org/concepts/advanced/near-lake-framework.\n\n### Context\n\nCurrently, developers who want to build custom indexers for the TON blockchain have limited options. They can run a full node, which can be resource-intensive and time-consuming to maintain. Alternatively, they can use services like TON HTTP API, which are limited for use in production.  \nTo address these issues, the TON Lake Framework aims to provide a solution for building indexers on S3, making it a cost-effective and flexible alternative to running a full node or relying on services like TON HTTP API.</p><p>Comparison with Full Node and Services (e.g TON HTTP API):\n\nFeature | TON Lake Framework | Full Node | Service (e.g TON HTTP API)\n-- | -- | -- | --\nCost-effective | Yes | No | Yes\nResource-intensive | No | Yes | No\nCentralized data source | Yes | No | Yes\nAvailability of historical data | Yes | Yes | Yes\nMinimal infrastructure requirements | Yes | No | Yes\nService Level Agreement (SLA) | 99.99999999999% | - | -\nSplit cost between consumer and producer | Yes | - | -\n\n### Goals\n\n- Develop a TON Lake Framework that utilizes Amazon S3 as a data source.\n- Provide flexibility for developers to create their own logic to process TON blockchain data in their preferred programming language.\n- Ensure the framework is easy to use and maintain for developers.\n\n### Deliverables\n\n- Develop a TON Lake Framework that will write TON blockchain data to Amazon S3.\n- Develop at least one complementary client library for the framework.\n- Provide detailed instructions on how to use the framework.\n\n### Definition of Done\n\n- [ ] GitHub repository with the source code of the TON Lake Framework.\n- [ ] GitHub repository with the source code of the complementary client library.\n\n### Reward\n\n- Standard TON Footstep NFT.\n- $2,500 USD in TON equivalent.",
    "created_at": "2023-04-05T11:19:44Z",
    "updated_at": "2023-04-19T18:42:23Z"
  },
  {
    "state": "closed",
    "title": "Python library for TON Connect 2.0",
    "body": "### Summary\n\nAt this step, it is proposed to create a library for working with the TON Connect protocol in Python.\n\n### Context\n\nAt the moment, there is only one library for working with the TON Connect protocol - written in JS. Need libraries in other languages to reach as many developers and improve the quality of dApps.\nFor the first version, need to add support http-bridge-compatible wallets.\n\n### Goals\n\n* Develop a library for working with the TON Connect in Python.\n* Help Python developers integrate TON Connect into dApps written in Python.\n\n### Deliverables\n\n* GitHub repository with the implementation TON Connect protocol in Python\n\n### Definition of Done\n\n- [x] GitHub repository with the source code - [link](https://github.com/XaBbl4/pytonconnect)\n- [x] Publish library to [pypi.org](https://pypi.org/) - [link](https://pypi.org/project/pytonconnect/)\n- [x] Create a PR to [ton-connect](https://github.com/ton-blockchain/ton-connect) repository with a link to the Python library - [link](https://github.com/ton-blockchain/ton-connect/pull/35)\n\n### Reward\n\n* Standard TON Footstep NFT\n* 1000 USD in TON equivalent",
    "created_at": "2023-04-04T22:44:30Z",
    "updated_at": "2023-05-21T13:13:38Z"
  },
  {
    "state": "open",
    "title": "Easy Fift",
    "body": "### Summary\n\nInteractive guide for Fift\n\n### Context\n\n![Peek 2023-04-05 01-09](https://user-images.githubusercontent.com/761285/229942083-ccd64cb0-2369-49ed-876c-411fe9d5c175.gif)\n\n### Goals\n\n* Provide an interactive guide to learn Fift\n* Provide a lightweight implementation of the Fift interpreter for a visual demonstration of the work of Fift\n\n### Deliverables\n\nA static web page that implements the main goals of the source code, which is in the form of a repository that everyone can develop\n\n### Definition of Done\n\n- [ ] The basis for the implementation of the lessons\n  - [ ] Lightweight implementation of Fift in JavaScript\n  - [ ] A set of scripts to collect the source text of the levels into a static web page using a suitable static site generator\n- [ ] Lesson **\\***\n  - [ ] Adding Some Numbers\n  - [ ] Defining Words\n  - [ ] Stack Manipulation\n  - [ ] Generating Output\n  - [ ] Conditionals and Loops\n  - [ ] Variables and Constants\n  - [ ] Arrays\n\n**\\*** The general composition of the lessons and their content can be specified in the process of implementation through discussion, the possibility of implementing the levels by other participants is allowed.\n\n### Reward\n\n- Standard TON Footstep NFT\n- The basis for the implementation of the lessons - \u0440\u045f\u00a4\u201d$ in TON \n- Lessons -  Standard TON Footstep NFT + \u0440\u045f\u00a4\u201d$ per lesson in TON ",
    "created_at": "2023-04-04T22:22:05Z",
    "updated_at": "2023-05-26T14:31:17Z"
  },
  {
    "state": "closed",
    "title": "Footstep: Example of a telegram bot that uses TonConnect 2.0",
    "body": "Footstep: https://github.com/ton-society/ton-footsteps/issues/176\n\nResults achieved:\n\n- Tutorial created: [Ton docs PR](https://github.com/ton-community/ton-docs/pull/217)\n- Bot example create: https://github.com/ton-connect/demo-telegram-bot\n- Running bot instance: [ton_connect_example_bot](https://t.me/ton_connect_example_bot)\n\nTON wallet for reward: EQCyKE9pBmNz6B9Bwf8nughAZ4KGjxw1bRXwX0PK94M4GGo0",
    "created_at": "2023-04-04T13:21:39Z",
    "updated_at": "2023-04-09T11:12:16Z"
  },
  {
    "state": "open",
    "title": "Detailed description of initialization stage for TVM in the TON Documentation.",
    "body": "### Summary\n\nCreate a detailed description of the initialization stage for TVM. The current reference is the original TON Blockchain document, which needs to be transferred to docs.ton.org and verified for the current TVM implementation. We also want to improve readability.\n\n### Context\n\nThe TVM initialization stage is a critical process of TON Blockchain. Without a thorough understanding of this stage, it becomes difficult to develop and maintain smart contracts. \nCurrently, we have a great [TVM Overview](https://docs.ton.org/learn/tvm-instructions/tvm-overview) page, that refers to TON Blockchain PDF(https://docs.ton.org/learn/tvm-instructions/tvm-overview#initialization-of-tvm).\n\nNeed to create a new page \"TVM Initialization\" in the TVM section and transfer there all actual knowledge\n\"4.4 Invoking smart contracts in TVM\" from https://ton.org/tblkch.pdf.\n\n[How to contribute to TON Documentation?](https://docs.ton.org/contribute)\n\n### Goals\n\n1. To create a detailed and accurate description of the TVM initialization stage that is up-to-date and easy to understand. It will be helpful to include a graphic explanation to further clarify the process.\n3. This page is primarily intended for documentation purposes and not as a tutorial, so it is important to minimize the use of personal examples or analogies in the text. It is crucial to ensure that the content is suitable for both professionals and non-professionals alike, while still providing valuable information.\n4. If a concept was written in [TON Blockchain ](https://ton.org/tblkch.pdf) document but is not yet production-ready for the current TVM, ensure it is clearly marked with a special label or information bar to avoid confusion.\n5. All references to TVM initialization in the [TON Blockchain](https://ton.org/tblkch.pdf) should be redirected to the new TVM Initialization section in docs.ton.org. (For instance, [these](https://docs.ton.org/learn/tvm-instructions/tvm-overview#initialization-of-tvm) links)\n\n### Deliverables\n\n- References to possibly outdated documentation are excluded.\n- The best explanation for beginners.\n- All basic information is gathered in one platform and can be found using Search.\n\n### Definition of Done\n\n- [ ] New page(section) TVM Initialization created with PR to docs.ton.org.\n- [ ] TVM actual implementation corresponds to created documentation.\n- [ ] Links to TVM Initialization redirected within docs.ton.org.\n- [ ] PR Reviewed and merged.\n\n### Oriental Release Date\nTBD\n\n### Reward\n\n* 400$ in TON equivalent.\n* Standard TON Footstep NFT.",
    "created_at": "2023-04-04T11:06:22Z",
    "updated_at": "2023-05-30T08:53:26Z"
  },
  {
    "state": "open",
    "title": "Complete documentation for Fift.",
    "body": "### Summary\n\nIt is necessary to describe all active words available in Fift.\n\n### Context\n\nAt the moment, we only have \"Fift: A Brief Introduction\" (fiftbase.pdf) as documentation for Fift. This document does not describe all active words available in Fift, which often requires referring to the source code (words.cpp) and causes some discomfort.\n\nIt would be much more convenient to have complete documentation for the Fift language, including all active words.\n\n### Goals\n\nDescribe all active words available in Fift, and in some cases, provide examples of their usage.\n\n### Deliverables\n\nA section on docs.ton.org containing documentation on Fift.\n\n### Definition of Done\n\nDocumentation created and merged to docs.ton.org\n\n### Reward\n\nTBD $ in TON",
    "created_at": "2023-04-03T20:09:07Z",
    "updated_at": "2023-04-05T00:30:44Z"
  },
  {
    "state": "open",
    "title": "Development of a Statistical Analysis System and Prioritization of Improvements ",
    "body": "### Summary\n\nCreating or using a system for collecting and analyzing statistical data to identify areas requiring improvements and attention.\n\n### Context\n\nFor the successful development and improvement of the TON Footsteps grant system, it is crucial to know which aspects to focus on. At the moment, we need to receive feedback from the community to identify weak points and areas that require improvement and/or optimization through a visible example. Due to the lack of feedback from contributors, we face difficulties in making well-founded and global decisions.\n\n### Goals\n\n* Develop or use a system for collecting and analyzing statistical data (e.g., https://rhetor.ai/vGIvjU2u), which will be intuitive and easy to use;\n* Determine the metrics and indicators that will be used to assess effectiveness and identify priority areas for development;\n* Create a Jupyter Notebook for visualizing metrics and indicators, allowing for clear tracking of results and analysis of trends;\n* Apply the RICE framework for prioritizing issues and ideas, based on reach, impact, confidence, and efforts required for their resolution.\n\n### Deliverables\n\nIdentification of important aspects and areas requiring special attention, based on the obtained statistics and analysis.\n\n### Definition of Done\n\n- [ ] Feedback collection created for the entire TON ecosystem community;\n- [ ] Structured feedback obtained;\n- [ ] Metrics and indicators used for evaluating the effectiveness of changes obtained;\n- [ ] RICE framework implemented for task prioritization, project evaluation, and features;\n- [ ] Jupyter Notebook created for visualizing metrics and indicators, providing convenient tracking of results and trend analysis;\n- [ ] A strategy proposed for improving TON Footsteps as a standalone component.\n\n### Reward\n\n* Standard TON Footstep NFT\n* $ 500 in TON equivalent",
    "created_at": "2023-03-31T17:54:40Z",
    "updated_at": "2023-04-23T00:23:55Z"
  },
  {
    "state": "closed",
    "title": "DeWallet web wallet implemented TON connect 2.0",
    "body": "### Name\n\nDeWallet\n\n### Telegram Contact\n\n@ivan_bridge\n\n### Link to demo\n\nhttps://chrome.google.com/webstore/detail/dewallet/pnccjgokhbnggghddhahcnaopgeipafg\n\n### Amount\n\n5000 USD from TON",
    "created_at": "2023-03-31T17:08:38Z",
    "updated_at": "2023-04-17T15:10:20Z"
  },
  {
    "state": "closed",
    "title": "Footstep: TVM Instruction Search React Component for TON Docs",
    "body": "Closes #175 in the following pull request: https://github.com/ton-community/ton-docs/pull/198\n\nTON Wallet for a reward: `EQBqDnstKfW_YP0YN6kt3uMzSwH1FT_UM7cFyhuw6my3c8mX`",
    "created_at": "2023-03-31T11:37:42Z",
    "updated_at": "2023-04-02T07:49:14Z"
  },
  {
    "state": "open",
    "title": "Contract storing TEP text in blockchain",
    "body": "### Summary\n\nThis proposal suggests storing TON Enhancement Proposals (TEPs) text in a contract on the masterchain.\n\n### Context\n\nStoring TEPs in a contract on the masterchain would provide several benefits. It would improve TEPs accessibility in case Github is overloaded or decides not to support TON. Also, there is a suggestion to store jetton wallets' code as shared library, and this proposal is generalization of that idea.\n\n### Goals\n\nCreate the contract that would store the TEP's index, documentation text, API for interacting with TEP-compliant contracts in the form of a shared library, a template of an exotic cell for loading that library, and editors' addresses or public keys. The contract should also store the address of the owner, who would be the only one able to add new TEPs.\n\n### Deliverables\n\n- [ ] Develop a contract described above\n- [ ] Deploy and test contract in testnet\n- [ ] Create UI\n- [ ] Create TEP (:grinning:) describing the contract\n- [ ] Deploy contract in mainnet with editorship assigned to TON Foundation\n- [ ] Migrate existing TEPs to the contract\n\n### Definition of Done\n\n- [ ] Contract created\n- [ ] UI created\n- [ ] Contract deployed in mainnet\n- [ ] Existing TEPs migrated\n\n### Reward\n\n- Standard TON Footstep NFT\n- $1800 in TON equivalent",
    "created_at": "2023-03-31T10:40:12Z",
    "updated_at": "2023-03-31T11:55:06Z"
  },
  {
    "state": "closed",
    "title": "Development TON Connect 2.0 in TonHub Mobile Wallet",
    "body": "PR for #108 \n\nWallet for reward EQA-daKmzkx5nLMKT465D_-uyhwgBTEucMeyvfGLfzHoWspv",
    "created_at": "2023-03-30T15:01:53Z",
    "updated_at": "2023-03-31T16:37:03Z"
  },
  {
    "state": "closed",
    "title": "Development TON Connect 2.0 in XTON wallet",
    "body": "### Name\n\nXTON wallet\n\n### Telegram Contact\n\n@telepulos\n\n### Link to demo\n\nhttps://github.com/ton-blockchain/wallets-list/pull/20\n\n### Amount\n\n$ 5000 in TON equivalent ",
    "created_at": "2023-03-30T14:11:38Z",
    "updated_at": "2023-05-12T17:34:25Z"
  },
  {
    "state": "open",
    "title": "Ruby SDK For TON",
    "body": "### Summary\n\nThe Ruby language has a huge community of developers who are also interested in blockchain development. If we have Ruby programming language library to work with TON Blockchain, we can attract many new developers to the ecosystem. This is one of the most important reasons why I created this proposal.\n\n### Context\n\nAt the moment there are many popular libraries to work with the TON blockchain, but there is not yet a single current library that could cover the Ruby developer community. Here is a development plan that I would like to implement as part of this footstep:\n\n- Implement Cell, Slice, Builder and BOC (de)serialization\n- Implement an RPC client to work with the TON network\n- Implement support for popular structures from block.tlb\n- Implement support of TON base64 addresses\n- Implement support of HashmapE \n- Implement support of TON & BIP39 Mnemonics\n- Implement support of wallets (v3, v3r2, v4r2)\n- Ed25519 signing of transactions\n- Implement for workings with Jettons and NFTs\n\n\n### Goals\n\nDevelop the Ruby SDK to work with the TON blockchain\n\n\n### Deliverables\n\nGitHub with rubyton library and examples\n\n\n### Definition of Done\n\nGitHub repository with the source code\n\n### Reward\n\n * 5,000 USD in TON equivalent\n * Standard TON Footstep NFT",
    "created_at": "2023-03-30T14:05:02Z",
    "updated_at": "2023-06-10T13:15:37Z"
  },
  {
    "state": "open",
    "title": "Lootbox Contract",
    "body": "### Summary\n\nThe following footstep suggests to create a standard for Lootboxes contracts\n\n### Context\n\nWe are already seeing number of projects creating their own lootbox contracts or creating off-chain lootboxes. One standard will both increase adoption by developers and trust from community\n\n### Goals\n\nCreate a contract. That would provide a community with an easy and secure solution for onchain lootboxes. Chances in the contract shouldn't be hardcoded and available through contract get-method.\n\n### Deliverables\n\n* Create an open source repo with implementation\n\n### Tech Stack\n* Standard tech stack: blueprint, sandbox\n\n### Definition of Done\n\n- [ ] Smart contract\n- [ ] Tests\n\n### Reward\n\n* $1k in TON ",
    "created_at": "2023-03-30T10:14:27Z",
    "updated_at": "2023-06-08T20:10:35Z"
  },
  {
    "state": "closed",
    "title": "TONFLOW web wallet implemented TON connect 2.0 successfully",
    "body": "### Name\n\nTONFLOW - Magnificent & Secure TON Web Wallet\n\n### Telegram Contact\n\n@tonflow_support_bot  \"OR\"  itonflow@gmail.com\n\n### Link to demo\n\nhttps://tonflow.net/assets/videos/tonflow_ton_connect_demo_app_walkthrough.mp4\n\n### Amount\n\n$ 5000 in TON equivalent ",
    "created_at": "2023-03-29T19:58:33Z",
    "updated_at": "2023-04-17T18:39:08Z"
  },
  {
    "state": "open",
    "title": "TONIndex",
    "body": "### Summary\n\nA variety of blockchain interaction tools based on different programming languages will make it easier for new developers to onboard into the TON ecosystem and provide the freedom to choose a comfortable technology stack for building new products on the TON network.\nTo increase the number of fundamental tools for interacting with the TON blockchain, it is proposed to create TONIndex as the indexed database of TON transactions with additional useful features.\n\n### Context\n\nThe TONIndex for indexed TON transactions will be efficient in the product development process where need to operate with transactions. TONIndex allows you to operate transactions fast and with ease. TONIndex was developed using rust program language and has the following features:\n* gRPC API;\n* DB Scylla;\n* Method for get transactions from DB by hash/accounts/blocks;\n* Method for get the whole transaction tree;\n* Method for get transactions in chronological order;\n* Method for get transactions of block by seqno of master-chain in chronological order;\n* Easy creating new methods on existing index.\n\n### Goals\n\n* Develop the TONIndex.\n\n### Deliverables\n\n* Github repo with code of the TONIndex.\n\n### Definition of Done\n\nGitHub repository with the source code.\n\n### Reward\n\n5,000 USD in TON equivalent",
    "created_at": "2023-03-29T12:17:05Z",
    "updated_at": "2023-05-15T16:41:32Z"
  },
  {
    "state": "open",
    "title": "Reproducible research of performance of TON Footsteps as a Component.",
    "body": "### Summary\n\nImproving the efficiency of TON Footsteps as a standalone component.\n\n### Context\n\nOur project lacks an effective system for analyzing gathered data and identifying key areas for improvement. Users may encounter various issues, and understanding their needs and preferences can be crucial for the project's success. However, we need a structured approach to collect and analyze this information, prioritize potential improvements, and measure the impact of implemented changes.\n\nThis [repo](https://github.com/open-data-science/ods_channel_stats_eda/) might be used as a reference for understanding the reproducible research concept.  \n\n### Goals\n\n* Develop a mechanism for gathering and analyzing the gathered statistics.\n* Define metrics and indicators that will be used to evaluate the effectiveness of implemented changes:\n   * Number of active contributors to TON Footsteps initiatives\n   * Number of regular contributors to TON Footsteps\n   * Number and quality of contributions made by community members\n   * Amount of in-ecosystem rewards given to contributors\n   * Number of Footsteps created by community members\n   * Growth in community engagement and awareness of TON Ecosystem:\n   * Number of commenters\n   * Time to implement the Footstep\n   * Time to receive a payment since opening a pull request\n   * Time to get Footstep approved or declined\n* Create a Jupyter Notebook for visualizing metrics and indicators, allowing for clear tracking of results and analysis of trends;\n* Measure the impact of implemented changes using metrics and indicators reflecting the outcomes and effectiveness of improvements.\n\n### Deliverables\n\n* Development of a structured methodology for collecting and analyzing data related;\n* Identification of priority improvement directions that will guide the project's development in a more focused and efficient way;\n* A Jupyter Notebook created for visualizing metrics and indicators, ensuring convenient tracking of results and analysis of trends;\n* A poetry-based GitHub repository with all the scripts and required notebooks.\n\n### Definition of Done\n\n\n- [ ] A Jupyter Notebook has been created for visualizing metrics and indicators, ensuring convenient tracking of results and analysis of trends;\n- [ ] Notebook contains well-functioning code for parsing GitHub \n- [ ] Notebook contains means to build graphs and visualise the performance of the Footsteps Program \n- [ ] Optionally: GitHub pages site setup for monitoring the performance of the component.\n\n### Reward\n\n* Standard TON Footstep NFT\n* $ 1000 in TON equivalent ",
    "created_at": "2023-03-28T21:33:24Z",
    "updated_at": "2023-06-08T19:39:39Z"
  },
  {
    "state": "closed",
    "title": "Footstep: How to work with wallet smart conracts tutorial",
    "body": "Foostep: #141 \n\nWallet: EQDKbjIcfM6ezt8KjKJJLshZJJSqX7XOA4ff-W72r5gqPrHF\n\nDone in: https://docs.ton.org/develop/smart-contracts/tutorials/wallet",
    "created_at": "2023-03-28T15:20:16Z",
    "updated_at": "2023-03-30T06:51:10Z"
  },
  {
    "state": "closed",
    "title": "Rust SDK for TON",
    "body": "### Summary\n\nA variety of blockchain interaction tools based on different programming languages will make it easier for new developers to onboard into the TON ecosystem and provide the freedom to choose a comfortable technology stack for building new products on TON network. \u0432\u0402\u0401To increase the number of fundamental tools for interacting with the TON network, it is proposed to create a Rust SDK for TON.\n\n### Context\n\nLibraries allowing to work with TON blockchain using different programming languages are popular. For developers who prefer to work with Typescript, there is a solution - TON Typescript Library (https://github.com/ton-core/ton). The Rust SDK for TON will also extend the capabilities of the developing process. The main feature of the proposed solution is the use of the programming language Rust and the use of tonlibjson as a data provider. The Rust SDK has the following features:\n* Connection pooling & retries support for better server-level interaction;\n* Using tonlibjson as data provider;\n* Support jetton functions;\n* Support dictionaries;\n* Support work with addresses;\n* Support decode/encode BOC;\n* Support parsing and generation of Cells methods for more convenient interaction with data structures;\n* Support of TON Mnemonics;\n* Support of Wallet versions (3, 3 revision 2, 4 revision 2);\n* Derive wallet address;\n* NaCL-compatible Ed25519 signing of transactions;\n* Support internal and external jetton meta data loading.\n\n### Goals\n\n- Develop the Rust SDK for TON with additional features.\n\n### Deliverables\n\n- Github repo with code of the TON Rust SDK.\n\n### Definition of Done\n\nGitHub repository with the source code.\n\n### Reward\n\n- Standard NFT footstep\n- 5,000 USD in TON equivalent",
    "created_at": "2023-03-22T17:02:03Z",
    "updated_at": "2023-04-28T12:24:58Z"
  },
  {
    "state": "closed",
    "title": "Footstep: NFT Edition minter based on TACT lang",
    "body": "Footstep: https://github.com/ton-society/ton-footsteps/issues/145\n\nDone in: https://github.com/theoberton/3.14xl\n\n[NFT Edition Minter](https://pi.oberton.io/) \n\nResults achieved: \n\n- Easy-to-use tool for creators to create NFT Editions\n- NFT edition minter contract on TACT: https://github.com/theoberton/3.14xl/blob/main/src/contracts/nft-manager.tact\n- First production project on TACT\n- JS wrappers to interact with contracts, supports latest [ton](https://github.com/ton-core/ton)  https://github.com/theoberton/3.14xl/tree/main/src/wrappers\n\nTON wallet for reward: EQAkL7VQ5_K7Ksc_J2xnAM_umLjed1aPekxOk0drbQcnGfWy\n\n\n",
    "created_at": "2023-03-22T14:27:04Z",
    "updated_at": "2023-04-28T10:49:43Z"
  },
  {
    "state": "closed",
    "title": "Create tutorials \"Interact with TON through ADNL on typescript\"",
    "body": "### Summary\n\nI would like to make a tutorial on https://github.com/ton-core/ton-lite-client library.\n\n### Context\n\nTo create simple applications and MVPs on TON, you need to make requests to smart contracts (at least get methods). Popular ts/js libraries and tutorials suggest using intermediaries (https://github.com/toncenter/tonweb). Also, such libraries require an API key, which makes it dangerous to use them on the frontend. At the same time, there is a library (https://github.com/ton-core/ton-lite-client) that uses adnl, but I have not seen tutorials on it and there is no documentation either.Therefore, I would like to write tutorials on basic things.\n\n### Goals\n\n- tutorial: Interact with TON through ADNL on typescript Part1\n\t- briefly about adnl and connecting to lightservers\n\t- run Get-Method of Smart-Contract\n- tutorial: Interact with TON through ADNL on typescript Part2\n\t- get Masterchain Info\n\t- get Account State \n\t- get Account Transactions\n\t- get Account Balance\n\t- get Account Transactions \n\n### Deliverables\n\n- Create tutorials\n\n### Definition of Done\n\n- [ ]  First tutorial published \n- [ ]  Second tutorial published \n\n### Reward\n\nFor tutorials I would like to receive:\n- 350 TON for the first tutorial\n- 250 TON for the second tutorial\n- Standard TON Footstep NFT\n\n**P.S** If this task looks legitmate for you, I will be grateful if you immediately assign it to me. ",
    "created_at": "2023-03-22T10:33:37Z",
    "updated_at": "2023-03-29T12:03:33Z"
  },
  {
    "state": "open",
    "title": "Testnet coins faucet bot for Telegram",
    "body": "### Summary\n\nThis footstep is about creating easy to use testnet coins faucet bot for Telegram for TON.\n\n\n### Context\n\nDevelopers need easy way to gain testnet coins in TON in order to develop smart contracts.\nCurrent bot (@testgiver_ton_bot) has several problems including stability problems, small amount of test coins per request and hard human verification. \nIn short: we need new updated, easy to use, reliable bot.\n\n### Goals\n\nmain goal is to develop Testnet faucet bot for Telegram including: \n\n- easy human verification process (possibly just tg message button click)\n- limit on coin's amount per payout\n- limit on payouts count per day\n- check wallet if it has many coins already\n- log messages should be sent to special admin chat\n- \"request more\" button for special cases which allows to send arbitrary message to admin's of bot (with address and telegram nickname)\n- bot should be written on Typescript using Node.js\n\n\nAll bot parameters should be easily changeable.\nWe also suggest using some database to store payout's to be able to calculate limits (something like sqlite is ok)\n\n### Deliverables\n\n- public repository with bot code\n- support codebase, add bugfixes and changes for 2 months\n\n### Definition of Done\n\n- one would be able to deploy faucet using provided sources from github\n\n### Reward\n\n1000$ in TON",
    "created_at": "2023-03-21T14:18:29Z",
    "updated_at": "2023-05-19T03:25:33Z"
  },
  {
    "state": "open",
    "title": "Creating a massive open online course \"Blockchain intro with examples on the TON ecosystem\". Step 2: Course Fragment Look & Feel + Course Experts Discovery and Qualification",
    "body": "### Summary\n\nCourse Fragment Look & Feel is a part of our course in a final form that helps to show how course will look like and what experience will learner get. It will be uploaded to the learning platform available for testing\n\nDuring the search and qualification of course experts from the community, we not only identify potential course authors, but also interview them and create test units of content.\n\n### Context\n\nCourse Fragment Look & Feel is a part of course program. It can give experience of interaction with real course.\n\nTo create a course, it is important for us to work with authors who not only have expertise in TON, but who are willing to create quality content. The step is to identify such authors\n\n### Goals\n\n1.To make Course Fragment Look & Feel in a final form,  which can give experience of interaction  with real course\n2.To get a visual concept according to TON brandbook\n3. To receive  a feedback and a list of recommendations from  stakeholders for further development\n4.To prepare longlist of subject matter experts for course content creation and have some iteration of creation content with them\n\n### Deliverables\n\n1.Course Fragment Look & Feel uploaded  to learning platform\n2. Ready Visual concept according to  TON brandbook\n3 List of stakeholder`s recommendations\n4.List of potential course experts with detailed portfolio and samples of content created\n\n### Definition of Done\n\n1.Course Fragment Look & Feel \n1.1 Course Fragment Look & Feel is a part of a  course program\n1.2 Has been uploaded to the learning platform and available for testing\n1.3 All elements of this fragment  are  thematically linked \n1.4.All elements of this fragment meet  stakeholder`s requirements and course concept\n1.5 Each element in course fragment meets element requirement https://github.com/eldf-framework/docs/tree/main/requirements\n1.6.Fragment consist of 2+ short videos (1 video =3-7 min), at least 1 quize, at least 1 practical task)\n2.Visual concept \n2.1 Has been designed in accordance with TON brandbook\n3. List of potential course experts\n3.1 Contains expert portfolio, domain of expertice and photo\n3.2 For the featured authors sample elements of content have been created\n\n### Reward\n\n9000 USD in TON",
    "created_at": "2023-03-16T18:49:29Z",
    "updated_at": "2023-03-16T18:49:29Z"
  },
  {
    "state": "closed",
    "title": "Development TON Connect 2.0 in Tonkeeper Mobile Wallet.",
    "body": "Tonkeeper supports TON Connect 2.0\n\nFootstep #161 \n\nAddress for reward: EQCoLMebhm0UEeR2te7me-QrDZBwjPxItvYAF0tE5Q7CDNSa",
    "created_at": "2023-03-13T10:21:00Z",
    "updated_at": "2023-03-22T11:58:46Z"
  },
  {
    "state": "closed",
    "title": "Example of a telegram bot that uses TonConnect 2.0",
    "body": "### Summary\n\nAt this step, it is proposed to explain how to create a telegram bot with authorization and sending transactions through the Ton Connect 2.0. Further, we suggest leaving the example running on the server provided by the author for 15 days.\n\n### Context\n\nThere are many examples of integrating Ton Connect into frontend applications (https://github.com/ton-connect/demo-dapp, https://github.com/ton-connect/demo-dapp-with-react-ui), as well as many examples of authorization on the backend through tone proof (https://github.com/ton-connect/demo-dapp-backend). However, there are no examples of working with Ton Connect for telegram bots (that is, examples when user sessions are stored and processed on the backend). When integrating the Ton Connect into a telegram bot, there are some difficulties: you need to manage user sessions and close unused connections to wallets.\n\n### Goals\n\nHelp those who wish to integrate the Ton Connect into telegram bots. This will simplify the creation of telegram bots in the Ton ecosystem, and increase the number of quality dApps based on telegram bots.\n\n### Deliverables\n\n- an article about integrating the Ton Connect to a telegram bot\n- a repository with the implementation of a simple telegram bot with a connection to the wallet via Ton Connect\n\t* through the bot you can connect or disconnect the wallet\n\t* through the bot you can send a transaction (0.001 ton to the zero address)\n- the bot will be running on the author's server for at least 15 days\n\n### Definition of Done\n\n- [ ] a repository with the implementation of a simple telegram bot in JavaScript (or TypeScript) with a connection to the wallet through the Ton Connect has been created\n- [ ] the repository README.md describes in detail how the bot works, how to run it locally\n- [ ] the bot allows you to connect any of the http-bridge-compatible wallets that support the Ton Connect 2.0 at the moment\n- [ ] the bot allows you to send a simple transaction\n- [ ] the bot drops the sse connection to the wallet if the user is not using the bot and reconnects when the user wants to send a transaction\n\n### Reward\n\n* 600 USD in TON\n* Standard TON Footstep NFT",
    "created_at": "2023-03-13T09:51:26Z",
    "updated_at": "2023-04-09T11:12:43Z"
  },
  {
    "state": "closed",
    "title": "TVM Instruction Search React Component for TON Docs",
    "body": "### Summary\n\nThe TVM Instruction Search React Component is a project that aims to improve the accessibility and usability of information about TVM instructions, which is currently provided in tables on the TON Documentation website.\n\nThis project will create a new React component that can be integrated into the website, allowing users to search for TVM instruction information based on opcode, rather than having to manually search through multiple tables. \n\n### Context\n\n\n<img width=\"1402\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/224089198-25c4180c-12a7-4412-9dd3-d62142fb9fed.png\">\n\n\nThe TON Documentation website provides a list of TVM instructions, along with their opcodes, in the form of multiple tables. However, this method of presenting the information can be difficult and time-consuming to navigate, especially for users who are not familiar with the TVM instruction set.\n\n_As a result, users may struggle to find the information they need, which can impact their ability to effectively use the TON network._\n\n### Goals\n\nThe goal of this project is to improve the user experience of the TON Documentation website by creating a new React component that allows users to easily search for information about TVM instructions based on opcode.\n\nBy providing a more user-friendly and efficient search process, the project aims to increase the accessibility and usability of TVM instruction information, helping users to better understand and utilize the TON network.\n\n### Deliverables\n\n1. A fully functional TVM search React component integrated into the TON Documentation website (TON Docs based on Docusaurus)\n\n\n### Definition of Done\n\n1. The React component is fully functional and allows users to search for TVM instruction information based on opcode (or part of it)\n2. The search results display the Fift syntax, Stack, Description, and Gas for the relevant TVM instruction (current info from the tables)\n3. The React component is **integrated** into the TVM Instructions page of the TON Documentation website, replacing the existing tables into the Archive\n\n### Reward\n\n* Standard TON Footsteps SBT NFT\n* 600 USD in TON",
    "created_at": "2023-03-09T16:32:28Z",
    "updated_at": "2023-03-31T11:17:16Z"
  },
  {
    "state": "open",
    "title": "Tutorial: \"Developing a Smart Contract + WebApp for Selling NFTs for Tokens (Jettons) in TON\"",
    "body": "### Summary\n\nThis tutorial aims to provide a practical example of smart contract development by creating a contract that enables the sale of Non-Fungible Tokens (NFTs) for Tokens (Jettons) in TON.\n\nThe tutorial will cover the basics of token and NFT development in smart contracts, testing, and interaction with the smart contract through code using the **_blueprint_** tool and ton.js library. \n\nThe tutorial will have the following:\n- a front-end part (Web UI, TON Connect, Telegram WebApp integration)\n- a back-end part (Jetton creation and integration, NFT minting using https://github.com/dvlkv/nft-jetton-sale-smc)\n\n### Context\n\n- The use of NFTs in blockchain technology is growing rapidly, and there is a need to develop smart contracts that enable the creation, sale, and transfer of NFTs.\n- Additionally, tokens (Jettons) are an essential part of any blockchain ecosystem, and developing a contract that enables the exchange of tokens for NFTs will be useful for the TON community.\n\n### Goals\n\n- The primary goal of this tutorial is to provide developers **_with a practical example_** of smart contract development that covers both NFTs and tokens.\n- The tutorial aims to create an end-to-end example (smart contract as the back-end, Telegram WebApp as a front-end) that enables the sale of NFTs for tokens (Jettons) and provides developers with the skills to develop similar projects in the ecosystem.\n\n### Deliverables\n\nThe tutorial will deliver a step-by-step guide on developing an application with a smart contract that enables the sale of NFTs for tokens in TON.\n\nThe tutorial will cover the following topics:\n\n- Creating a contract for the sale of NFTs for tokens (using https://github.com/dvlkv/nft-jetton-sale-smc)\n- Interacting with the smart contract through code using the blueprint tool\n- Deploying the contract and verifying its functionality\n- Integrating with the smart contract from the Web using ton.js\n- Integrating WebUI into Telegram to be accessible by end-user as a WebApp (not developers)\n\n#### Helpful links\n\n- [Tutorial styling guidelines](https://ton.org/docs/contribute/guidelines)\n- [Principles of a good tutorial](https://ton.org/docs/contribute/principles-of-a-good-tutorial)\n- [Sample tutorial structure](https://ton.org/docs/contribute/sample-tutorial)\n- [Example of creating a WebClient](https://ton-community.github.io/tutorials/03-client/)\n\n### Definition of Done\n\n- The tutorial should provide a clear and concise step-by-step guide on how to develop a smart contract for selling NFTs for tokens in TON and integrate it into WebApp\n- The tutorial should cover the basics of token and NFT development in smart contracts, testing, and interaction with the smart contract through code using the blueprint tool.\n- The tutorial should deliver a fully functional smart contract that enables the sale of NFTs for tokens in TON.\n- The tutorial should be hosted in TON documentation (=Pull Request approved)\n\n\n### Reward\n\n* Standard TON Footstep NFT\n* $1200 in TON ($600 for front-end, $200 for back-end, $400 for Tutorial)",
    "created_at": "2023-03-09T16:10:55Z",
    "updated_at": "2023-05-15T18:57:29Z"
  },
  {
    "state": "open",
    "title": "Tutorial: \"Developing a Telegram Bot App to Check Ownership of NFT\"",
    "body": "### Summary\n\nThis document outlines the requirements for developing a Telegram bot application tutorial to check ownership of non-fungible tokens (NFTs). \n\n### Context\n\nNFTs have become increasingly popular, and many people are looking for ways to check ownership of these tokens. A Telegram bot application is needed to provide an easy way for users to verify their token ownership. \n\n#### Example\n\nFor example, a chat admin may want to know if a new user owns a particular NFT. If the user owns, he is approved in the community. If not, he is not allowed.\n\n### Goals\n\n### Concepts\n\nThe goal of this project is to help developers understand the following:\n- how to create a Telegram Bot _connected with TON_ (using ton.js)\n- how to work with tonapi.io check _ownership of NFT_\n- how TON Connect 2.0 auth standard could be applied properly in a bot UI\n\n### Code\n\nFinally, develop an easy-to-use Telegram bot application that allows users to quickly and easily verify the ownership of their NFTs.\n\n### Deliverables\n\n- Step-by-step tutorial that fits \"[Tutorial styling guidelines](https://ton.org/docs/contribute/guidelines)\"\n- A repository code for the Telegram bot application with authorization using TON Connect 2.0 before checking. (using TON Connect JS SDK, ton.js library)\n\n### Definition of Done\n\nThe project will be considered done when the following criteria are met: \n\n1) An example Telegram bot is functioning properly and can verify the user's token ownership quickly; \n2) Tutorial is tested on users (at least 3 users) and works fine\n3) A step-by-step article, followed by Tutorial styling guidelines completed\n4) Tutorial article Pull Request is approved in [TON documentation](https://ton.org/docs)\n\n### Reward\n\n* TON Footsteps SBT\n* $600 in TON",
    "created_at": "2023-03-09T15:44:00Z",
    "updated_at": "2023-06-07T12:01:03Z"
  },
  {
    "state": "closed",
    "title": "Integrating Kotlin SDK with Java Projects",
    "body": "### Summary\n\nThis project aims to provide an example of how Java developers can integrate Kotlin SDK into their projects. It will include an example that demonstrates how to use the Kotlin SDK.\n\nThe goal is to make it easier for developers to incorporate the Kotlin SDK into their Java development workflow with maven.\n\n### Context\n\nThe creation of a Kotlin SDK for TON Blockchain is an exciting development for developers, as it allows them to access and utilize the features of TON Blockchain more easily.\n\nHowever, it is unclear how **Java developers** can integrate this new SDK into their projects.\n\nTutorial project should provide an example of how to do this, making it easier for developers to incorporate the Kotlin SDK into their development workflow. \n\n### Goals\n\n* The primary goal of this project is to provide an example of how Java developers can integrate the Kotlin SDK into their projects.\n* This should be done so that it is easy for developers to understand and apply in their own development workflow (maven, gradle workflow)\n\n\n### Deliverables\n\n\n- \"Start a new project\". An article in [Kotlin SDK repository wiki](https://github.com/andreypfau/ton-kotlin/wiki) demonstrates how Java developers can use the Kotlin SDK in their projects\n- \"Integrate Kotlin SDK\". An article in [Kotlin SDK repository wiki](https://github.com/andreypfau/ton-kotlin/wiki) that demonstrates how Java developers can use the Kotlin SDK in their projects to connect to existing project (with maven, gradle)\n\n### Definition of Done\n\n- [ ] Code has been tested for accuracy and functionality by multiple users  \n- [ ] Documentation has been reviewed and approved by @andreypfau (his Telegram) as author of Kotlin SDK\n\n### Reward\n\n* Standard TON Footstep NFT\n* $300 in TON",
    "created_at": "2023-03-09T15:12:06Z",
    "updated_at": "2023-04-13T11:00:34Z"
  },
  {
    "state": "open",
    "title": "BFT + node rotation / or simple BFT ton workchain",
    "body": "### Summary\n\nWe need some start point of workchain development on TON. Lets try to make simple workchain \n\n### Context\n\n_No response_\n\n### Goals\n\n* create first workchain on ton\n\n### Deliverables\n\n* research BFT\n* setup simple blockchain\n* integrate node code with ton node logic\n* --- todo\n\n### Definition of Done\n\n- [] we will have working workchain\n\n### Reward\n\n* footstep nft\n* community support / public posts\n* maybe some TON revard, we can dicuss it",
    "created_at": "2023-03-08T11:33:45Z",
    "updated_at": "2023-03-08T11:33:45Z"
  },
  {
    "state": "open",
    "title": "JS tests & docs for official ICO sc",
    "body": "### Summary\n\nhttps://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-minter-ICO.fc \n\nid like to create JS environment with tests for this sc & make docs that will describe what methods this SC have and how devs can interact with it\n\n### Context\n\nI think having ready-to-use ecosistem SC (with documentation & with human-readable tests (not fift tests ha ha ha) on JS)  this is important in terms of unboarding new users in TON developments\n\n### Goals\n\nMake working with ICO easy for new devs on ton \n\n### Deliverables\n\n* Create opensorce repo with js environment for SC\n* Create js tests\n* Write doc in .md that will explain what is going on inside this ICO SC\n\n### Definition of Done\n\n- [ ] repo with contract and tests\n- [ ] .md document\n\n### Reward\n\n* 800$ in TON equivalent ",
    "created_at": "2023-03-08T11:24:18Z",
    "updated_at": "2023-03-14T19:23:34Z"
  },
  {
    "state": "open",
    "title": "Mass adoption focused oracle protocol on TON blockchain",
    "body": "### Summary\n\nI would like to open a proposal to create a sharded oracle smartcontract ecosystem for TON. That way anyone who needs to get offchain data to their smartcontract could do so through one standard oracle smartcontract.\n\n### Context\n\nOracle contracts need to be standardized\n\n### Goals\n\nCreate open-source repo for standardized oracle smart contracts \n\n### Deliverables\n\n* Create open-source repo for standardized oracle smart contracts \n\n### Definition of Done\n\n- [ ] Devs will be able to create & deploy their oracle sc & recive offchain data easily\n\n### Reward\n\n* 5k ton",
    "created_at": "2023-03-08T11:17:03Z",
    "updated_at": "2023-03-14T19:24:05Z"
  },
  {
    "state": "closed",
    "title": "Example of a secure application that uses TonConnect 2.0 and TonProof with a backend partially on Ruby on Rails",
    "body": "### Summary\n\nThis step proposes to explain how the examples  <https://github.com/ton-connect/demo-dapp-backend> and <https://github.com/ton-connect/demo-dapp-with-backend> work, how you can test them in a local environment and how to safely expand them to implement most of your backend in a different programming language (Ruby on Rails in the case of the article, but you can adapt to your preferred back-end language and framework). We further propose to keep the example running on a server provided by the author during 15 days.\n\nThe approach of this footstep of having two backends, is not trivial when it considers security,  because the authentication on the Ruby backend needs to decrypt  the JWT (JSON Web Token) generated by the first backend in go.  Both backends must be coordinated with a secure way to generate/use safe JWTs, and for that the first backend in go must be improved to generate JWTs hard to decrypt except for the Ruby backend that also needs cryptographic tools.\n\n\n### Context\n\nIf you are developing an application with a back-end in your preferred programming language and framework (for example, python, node.js, Ruby on Rails), you may find it very difficult to authenticate with TonConnect 2.0 because:\n\n1. There is only one Backend example available in the \"go\" language <https://github.com/ton-connect/demo-dapp-backend> and it's not that easy to understand what it does.  Even after understanding it, translating it to a different programming language can be hard, because it requires specific cryptographic tools  and a data structure with mutexes to keep the checked wallets that used the backend recently.\n2. The corresponding Typescript frontend is at <https://github.com/ton-connect/demo-dapp-with-backend> but it's also not easy to understand how it interacts with the backend.\n\n\n### Goals\n\nAssist Hack-a-tonx 2023 participants as well as TON application developers that require a backend, TonConnect 2.0 authentication on the frontend, and transaction security.\n\n### Deliverables\n\n* An article about how the <https://github.com/ton-connect/demo-dapp-backend> and <https://github.com/ton-connect/demo-dapp-with-backend> examples work , how to deploy them locally, how to change the backend of the example, and  how to securely connect them to a second backend in a different programming language and framework.\n* The github repository with the sourcecode of a full example including: first backend in go patched,  second backend in Ruby on Rails, frontend patched to use first backend for checking proof of wallet and generating JWT, and using the second backend to do other requests but authenticated with JWT generated by first backed and  instructions to deploy it locally coordinating both backends to generate/use secure JWT.\n* The previous example operating on a server provided by the author during 10 days.\n\n### Definition of Done\n\n- [ ] Section that explains how the backend in \"go\" works,  how to deploy it locally, and how to configure it with environment variables.\n- [ ] Section that explains how the frontend works, how to deploy it locally, how to change it to use the backend deployed by you.\n- [ ] Section with screenshots detailing for each operation in the frontend how the information flows between the frontend and backend with HTTP requests and responses.\n- [ ] Section that explains how to modify the backend and the frontend to interact with a second backend in a completely different language/framework while maintaining secure communications and transactions between the frontend and the new backend after the initial authentication with the first backend.  The second backend is exemplified with a Ruby on Rails implementation. The details of how to produce secure JWTs with the first backend, that can be decrypted practically only by the second backend is given along with the cryptographic tools required in the second backend.\n- [ ] Repository with a working example including modified frontend, modified first backend, second backend in Ruby on Rails and starting script.\n- [ ] Example operating during 10 days on a server provided by the author\n\n### Reward\n\nUS$500\n\n(The author has advanced in this footstep and he would like to complete it.)",
    "created_at": "2023-03-06T23:08:13Z",
    "updated_at": "2023-05-15T19:10:12Z"
  },
  {
    "state": "closed",
    "title": "Article: Sending messages with TON Connect 2.0",
    "body": "Footstep #150\nArticle PR [#166](https://github.com/ton-community/ton-docs/pull/166)\nMy wallet address for reward: EQDauBLfiuJZCZxjRVyNHDd17tJiJCVTLi3YqKM74TKj9cA1",
    "created_at": "2023-03-04T05:24:25Z",
    "updated_at": "2023-03-05T12:11:13Z"
  },
  {
    "state": "closed",
    "title": "DeLab Connect added support for TON Connect 2.0",
    "body": "### Name\n\nDeLab Connect\n\n### Telegram Contact\n\n@ivan_bridge\n\n### Link to demo\n\nhttps://connect-example.delab.team/\n\n### Amount\n\n5000 USD of TON",
    "created_at": "2023-03-03T19:36:57Z",
    "updated_at": "2023-03-04T08:41:58Z"
  },
  {
    "state": "closed",
    "title": "Massive sender bot & contract",
    "body": "### Summary\n\nBot that sends toncoins to several addresses using smart contract\n\n### Context\n\nThe bot and smart contract is needed to simplify massive sending. Usages are:\n - Rewards for ton competitions\n - Payments for investors\n\n### Goals\n\nThe bot should accept json file that contains a dictionary from address to number of toncoins to send to this address\n\nJSON example\n```\n{\n    \"EQDk0rRqwtKw34r0fecUO6YotwKfMPU9XIxwrfjOfX9BIUx_\": \"52\",\n    \"EQBnk2PqeZZjIya2zvPlH2pnSQYYPjNReMntiOyWYt9au_fc\": \"34\",\n    \"EQCafuKP6EVcOo_ZifdIBfE1EwM1QPFj_-ryaT0IY6CNRVtV\": \"100\"\n}\n```\n\nCSV example:\n```\n\"EQDk0rRqwtKw34r0fecUO6YotwKfMPU9XIxwrfjOfX9BIUx_\",52\n\"EQBnk2PqeZZjIya2zvPlH2pnSQYYPjNReMntiOyWYt9au_fc\",34\n\"EQCafuKP6EVcOo_ZifdIBfE1EwM1QPFj_-ryaT0IY6CNRVtV\",100\n```\n\nTG message example:\n```\nEQDk0rRqwtKw34r0fecUO6YotwKfMPU9XIxwrfjOfX9BIUx_: 52\nEQBnk2PqeZZjIya2zvPlH2pnSQYYPjNReMntiOyWYt9au_fc: 34\nEQCafuKP6EVcOo_ZifdIBfE1EwM1QPFj_-ryaT0IY6CNRVtV: 100\n```\n\nUser needs to connect to the bot via ton connect 2.0 with tonkeeper.\nThen they need to provide the file with description of addresses and number of tons to send for each address. \nAfter that they should approve transaction to send toncoins from their wallet to smart contract. \nSmart contract will send the coins to addresses from file. \n\nOther details:\n - Smart contract should recursively send all messages in chunks of length 254 if there are too many of them\n - Smart contract should be deployed with addresses and amounts in data\n - 0.1 ton will be added for each address for gas. The remaining amount will be returned to sender\n\n\n\nSmart contract language: Func\nTests will be on: blueprint & sandbox\n\n\n### Deliverables\n\n- Telegram bot\n- Smart contract with tests\n\n### Definition of Done\n\n - [x] Smart contract & tests\n - [x] Telegram bot\n\n### Reward\n\n - Standard TON Footstep NFT\n - 1000 USD equivalent in TON",
    "created_at": "2023-03-02T20:05:31Z",
    "updated_at": "2023-06-03T09:33:13Z"
  },
  {
    "state": "closed",
    "title": "Multisig wallets support for `ton.js` and guide",
    "body": "Done in:\n\n * https://github.com/ton-core/ton/pull/3\n\n * https://github.com/ton-core/ton/pull/4\n\n * https://ton.org/docs/develop/smart-contracts/tutorials/multisig-js\n\nCloses https://github.com/ton-society/ton-footsteps/issues/86\n\nOur TON wallets for reward (split it 50/50):\n * EQBKgXCNLPexWhs2L79kiARR1phGH1LwXxRbNsCFF9doc2lN\n * EQArzP5prfRJtDM5WrMNWyr9yUTAi0c9o6PfR4hkWy9UQXHx",
    "created_at": "2023-03-02T17:51:49Z",
    "updated_at": "2023-03-03T16:06:18Z"
  },
  {
    "state": "open",
    "title": "Upgrade verifier-contracts + verifier web app + verifier backend",
    "body": "### Summary\n\n1. [contracts repo](https://github.com/ton-community/contract-verifier-contracts) \n2. [webapp repo](https://github.com/ton-community/contract-verifier)\n3. [backend repo](https://github.com/ton-community/contract-verifier-backend)\n \nof [TON Verifier](https://verifier.ton.org) needs to be upgraded to latest TON tooling and syntax.\n\n### Context\n\n_No response_\n\n### Goals\n\nUpgrade ton v13, blueprint, sandbox.\nAll functionality and test coverage should remain.\n\n### Deliverables\n\n-\n\n### Definition of Done\n\n- [ ] ton upgraded to v13 \n- [ ] Upgrade TON npm package to 13\n- [ ] Create and migrate to use [blueprint-style contracts](https://github.com/ton-community/blueprint/blob/main/src/templates/counter.wrapper.ts.template) for all contracts\n- [ ] Convert [tests](https://github.com/ton-community/contract-verifier-contracts/tree/main/test) to use sandbox\n- [ ] Webapp - use ton v13 and new contract classes\n- [ ] Backend - use ton v13 and new contract classes\n\n\n### Reward\n\n900$ in TON equivalent, based on these milestones:\n\nThis grant is funded by Orbs as part of its ecosystem [grant program](https://www.orbs.com/white-papers/grants/).",
    "created_at": "2023-02-26T09:57:50Z",
    "updated_at": "2023-06-07T19:40:52Z"
  },
  {
    "state": "open",
    "title": "Upgrade Minter contracts repo + Minter web repo",
    "body": "### Summary\n\n1. Modernize the Minter [contract repo](https://github.com/ton-blockchain/minter-contract) to latest TON tooling (TON npm package v13, blueprint, sandbox testing.\n\n2. Modernize Minter [web repo](https://github.com/ton-blockchain/minter) to latest TON package.\n\n### Context\n\nCurrently, the contract repo relies on ton npm package v11 (deprecated syntax), and tvm-contract-executor for testing.\nThe web repo uses ton v12, and should be upgraded to use [blueprint-style contract classes](https://github.com/ton-community/blueprint/blob/main/src/templates/counter.wrapper.ts.template).\n\nWe want to support latest syntax and tooling.\n\n### Goals\n\nUpgrade the ton npm package to 13, and use blueprint project structure + sandbox for testing.\n\nAll functionality should remain the same:\n* Building jetton metadata on-chain\n* Unit testing\n* Being able to deploy the contract\n\n### Deliverables\n\n-\n\n### Definition of Done\n\n- [ ] remove ton@11, ton-contract-executor from dependencies\n- [ ] add ton@13, sandbox, blueprint\n- [ ] convert tests to sandbox\n- [ ] convert all syntax to ton@13\n- [ ] replace build and deployment scripts with blueprint\n- [ ] create a blueprint-style contract class for Jetton and JettonWallet\n- [ ] update readme\n- [ ] minter web - replace ton@12 with ton@13\n- [ ] minter web - use new contract classes to interact with contracts\n\n### Reward\n\n700$ in TON equivalent, based on these milestones:\n\n* 400$ - Complete all work in ton-minter-contracts repo\n* 300$ - Complete all work in ton-minter repo\n\nThis grant is funded by Orbs as part of its ecosystem [grant program](https://www.orbs.com/white-papers/grants/).",
    "created_at": "2023-02-26T09:14:43Z",
    "updated_at": "2023-06-08T20:51:27Z"
  },
  {
    "state": "closed",
    "title": "Tonkeeper supports TON Connect 2.0",
    "body": "### Name\n\nTonkeeper\n\n### Telegram Contact\n\nhttps://t.me/the_cursedsoul\n\n### Link to demo\n\nhttps://drive.google.com/file/d/1FoRWWrgGsep-NIk7emoD7eGDi3mQ0iQC/view?usp=sharing\n\n### Amount\n\n5,000 USD in TON ",
    "created_at": "2023-02-24T12:20:42Z",
    "updated_at": "2023-03-17T14:37:23Z"
  },
  {
    "state": "closed",
    "title": "Article: Hands-on Storage Contract Creation",
    "body": "### Summary\n\nThe Open Network Web Archive is an educational-service provider providing tutorials and storage services for static website contents on TON.\n\nThere're people, e.g. @lorrodx in tondev_eng Telegram channel who were confused with how to get a Bag ID, use the Bag ID to generate a storage request with a storage provider, and use the storage request to create a storage contract with the storage provider on their own storage.\n\nThis led a question to me: do I need to create an article explaining how to create a storage contract with a storage provider, in more general and common way, regardless of storage providers, while referring the tutorials written on The Open Network Web Archive Journey `0x107c49ef`, or http://webarchive.ton/journey/0x107c49ef?\n\nThe storage contract creation hands-on article will cover how to look for or deploy a storage provider, get a Bag ID from files, generate storage request with a trusted/deployed storage provider from the Bag ID, and create storage contracts with the provider, in a no-harassment way.\n\n### Context\n\n_No response_\n\n### Goals\n\nProviding people with the knowledge of how to generate and create:\n\n* Bag IDs from files.\n* Storage requests from Bag IDs with storage providers.\n* Storage contracts from storage requests with storage providers.\n\n### Deliverables\n\nThe Article will cover:\n\n* How to look for or deploy a storage provider?\n* Ways to generate Bag IDs from files.\n* Use the Bag IDs to generate storage requests with storage providers and check the provider's storage rate.\n* Create storage contracts with the selected storage providers.\n* Balances on the storage contracts and deposit to them.\n\n### Definition of Done\n\n- [ ] Article published\n- [ ] Article delivered to stakeholders\n\n### Reward\n\n* Standard TON Footstep NFT\n* 1,000 USD equivalent in Toncoin",
    "created_at": "2023-02-23T03:48:12Z",
    "updated_at": "2023-04-10T02:31:02Z"
  },
  {
    "state": "closed",
    "title": "Tonic Wallet: First Multi-Accounts based TON Extension Wallet support\u0432\u0402\u00a6",
    "body": "Footstep #155 \n\nThe feature available in [Tonic Wallet] (https://chrome.google.com/webstore/detail/tonic-wallet/dlneijncmlmjbgemhibopgljcmndjfde)\n\nMy TON wallet for reward:\nEQAQND4LFdJ6xUWC41PBT03a5DbzHTjTeVGELDgrxKQm9-ym",
    "created_at": "2023-02-21T14:45:47Z",
    "updated_at": "2023-03-29T22:18:35Z"
  },
  {
    "state": "closed",
    "title": "Development TON Connect 2.0 in MyTonWallet",
    "body": "Closes #149 \n\nOpen-source commits: https://github.com/mytonwalletorg/mytonwallet/commit/0f353d5b34c90326f8e9220d62df71fdc80c47a8, https://github.com/mytonwalletorg/mytonwallet/commit/964d5f7b174f46fc021e6b200ae5bc3d5ed23423, https://github.com/mytonwalletorg/mytonwallet/commit/4fb3031190f3861ece8ce8fa574d3f6b39ef1422\n\nThe feature is available on https://ton.vote, https://tegro.money, https://getgems.io, https://dedust.io, etc.\n\nThe contribution wallet address is in the official repo [README](https://github.com/mytonwalletorg/mytonwallet#support-us).",
    "created_at": "2023-02-18T14:15:17Z",
    "updated_at": "2023-03-23T22:16:51Z"
  },
  {
    "state": "closed",
    "title": "Article: NFT Collection step-by-step creation",
    "body": "### Summary\n\nWe need to create tutorial, how to mint your NFT collection from zero to result.\n\n### Context\n\nRight now, we have absolutely no manual for developers about what is an nft item/nft collection in TON, how to create them and put them up for sale using code. At the same time, this topic is of interest to developers & creators, and when trying to do it yourself, difficulties and misunderstandings very often arise.\n\n### Goals\n\nExplain the full path of creating nft collection with ton.js, GetGems NFT smart contracts.\n\n### Deliverables\n\n- [ ] Tutorial article \"How to create NFT collection step-by-step\" using Pinata, TON and GetGems is ready\n- [ ] Topics covered: mint of nft collection, nft item, putting up item for sale on GetGems\n\n### Definition of Done\n\n- [ ] Tutorial created and merged to ton.org/docs \n\n\n### Reward\n\n - Standard TON Footstep NFT\n - 600 USD worth TON",
    "created_at": "2023-02-15T21:24:24Z",
    "updated_at": "2023-04-28T12:25:54Z"
  },
  {
    "state": "closed",
    "title": "Added 10 examples to func cookbook",
    "body": "Covered these examples:\nhttps://github.com/ton-society/ton-footsteps/issues/10#issuecomment-1354771562\n\nAccepted PR in ton docs repository:\nhttps://github.com/ton-community/ton-docs/pull/83",
    "created_at": "2023-02-14T17:05:30Z",
    "updated_at": "2023-02-15T15:12:32Z"
  },
  {
    "state": "closed",
    "title": "Tonic Wallet : First Multi-Accounts based TON Extension Wallet supporting TC 2.0",
    "body": "### Name\n\nTonic Wallet\n\n### Telegram Contact\n\n@jhaitch\n\n### Link to demo\n\nhttps://docsend.com/view/4w6uhnwv2mgiaiqb\n\n### Amount\n\n5,000 USD worth TON",
    "created_at": "2023-02-14T15:10:31Z",
    "updated_at": "2023-02-28T15:37:34Z"
  },
  {
    "state": "open",
    "title": "Footstep: Smart-contracts for jetton voting platform",
    "body": "PR for #142 \n\nDone in: \nhttps://github.com/ston-fi/jvp-core\n\nThe contracts allow multiple users to cast their vote for addresses, including Jetton addresses.\n\n TON wallet for reward: \n EQBoTw0OzTblnzvV_nNVcSsQHlSykMg4pKrBbw-3ZiQrBb7D",
    "created_at": "2023-02-14T13:40:22Z",
    "updated_at": "2023-02-14T13:40:22Z"
  },
  {
    "state": "closed",
    "title": "Fix markdown formatting in footstep issue template",
    "body": "In definitions of done it must be \" - [ ] ...\" to make a checkbox",
    "created_at": "2023-02-14T08:40:23Z",
    "updated_at": "2023-02-14T08:45:52Z"
  },
  {
    "state": "closed",
    "title": "Notifications in Telegram about new footsteps",
    "body": "### Summary\n\nThis proposal describes what do we need to launch an automated notification system about new approved footsteps.\n\n### Context\n\nTON Footsteps are great, but they aren't widely known among people in our community. We need to solve this problem and spread the knowledge about Footsteps around. One of the ways to do it is described in this Footstep.\nWe need to create a program that will automatically detect new approved Footsteps and notify people about them somewhere. I think Telegram channel will be fine, but you could suggest something else.\n\n### Goals\n\n * Notify people about new approved Footsteps\n\n### Deliverables\n\n * Program that will watch the repository and detect new approved Footsteps\n * Telegram Bot that will post notifications\n\n### Definition of Done\n\n * Users can quickly and easily find out new approved Footsteps to complete\n\n### Reward\n\n * Standard TON Footstep NFT",
    "created_at": "2023-02-14T08:22:50Z",
    "updated_at": "2023-05-19T08:50:58Z"
  },
  {
    "state": "closed",
    "title": "Development TON Connect 2.0 in TonSafe v2.2.1 Mobile Wallet.",
    "body": "Ton Connect 2.0 implemented in TonSafe v2.2.1\n\nFootstep #140\n\nModified files: [LINK](https://github.com/tonsafe/wallets-list/raw/ton-connect-2.0/files/screencapture-github-tonsafe-tonsafe-compare-ton-connect-2-0-2023-02-14-10_51_37.pdf) & [Screenshots](https://github.com/tonsafe/wallets-list/blob/ton-connect-2.0/files/screencapture-github-tonsafe-tonsafe-compare-ton-connect-2-0-2023-02-14-10_51_37.zip)\n\nSTON.FI DEMO LINK: [DEMO](https://raw.githubusercontent.com/tonsafe/wallets-list/main/Tonsafe-Tonconnect-Demo.m4v)\n\n\nMy wallet address for the rewards: EQBM55PXGY0WY2numnLmsQOitCwwKeztxKcJTGYAbP0icwA3",
    "created_at": "2023-02-14T07:04:48Z",
    "updated_at": "2023-02-18T19:30:53Z"
  },
  {
    "state": "closed",
    "title": "Create tutorial \"Sending messages with TON Connect 2.0\"",
    "body": "### Summary\n\nCover ways to send transaction via TON Connect 2.0.\n\n### Context\n\nCurrently, documentation on ton.org describes only way to **connect** user to dApp, but not to do anything more. Sending transactions is the next logical step.\n\n### Goals\n\n- Make a tutorial, by following which users should be able to send transactions from dApp\n- example of simple multi-destination transfer\n- example of transfer with comment\n- example of deploying a contract\n- *(if, and when, adding plugins is supported)* example of deploying a plugin contract (e.g. standard subscription, or the simplest chatbot)\n- tracking the transaction\n\n### Deliverables\n\n- Create a tutorial\n\n### Definition of Done\n\n- [x] Article created\n- [x] Article merged into https://ton.org/docs\n\n### Reward\n\n- Standard TON Footstep NFT\n- $500 in TON equivalent\n",
    "created_at": "2023-02-13T13:37:50Z",
    "updated_at": "2023-03-28T20:36:24Z"
  },
  {
    "state": "closed",
    "title": "MyTonWallet added support for TON Connect 2.0",
    "body": "### Name\n\nMyTonWallet\n\n### Telegram Contact\n\n@unexpectedusername\n\n### Link to demo\n\nhttps://github.com/ton-connect/wallets-list/pull/11\n\n### Amount\n\n5,000 USD in TON",
    "created_at": "2023-02-11T02:25:27Z",
    "updated_at": "2023-03-21T15:42:55Z"
  },
  {
    "state": "closed",
    "title": "English Translation of Articles of TON Deep Doc",
    "body": "Footstep #128\n\nDone in [PR](https://github.com/ton-community/ton-docs/pull/154)\n\nMy wallet for reward: EQAvyxX5g_GvynfNl_XVQReZ3rstK5bM2OYu9nvren1SRnuN",
    "created_at": "2023-02-10T13:25:48Z",
    "updated_at": "2023-02-25T15:21:37Z"
  },
  {
    "state": "closed",
    "title": "TACT lang documentation ",
    "body": "Footstep #105\n\nDone in [PR](https://github.com/ton-core/tact-docs/pull/5)\n\nTransferred to https://docs.tact-lang.org\n\nMy wallet address for reward: EQCFv_2OqxdVm4IFOps-XCkW6xeug49b9FTyk8fbI-cIumAF",
    "created_at": "2023-02-08T18:49:19Z",
    "updated_at": "2023-02-09T15:40:13Z"
  },
  {
    "state": "open",
    "title": "Create ADNL protocol JS library",
    "body": "### Summary\n\nThis footstep is about adding ADNL protocol JS library. There is an implementation of ADNL package for JS\n\n### Context\n\n_No response_\n\n### Goals\n\nThe following is list of what we need to do.\n\nADNL library in general:\n * Generate ADNL address from key\n * Send messages\n * Receive messages\n * Encrypt and sign messages using both curve and aes\n * Decrypt messages and check sender, derive encryption key\n * Keep and update and Neighbour table, send, receive, create and read packages\n * Keep, add and remove keypairs\n * Create, check send and receive packages for handshake\n * Create data package\n * Create and check integrity hash\n * Generate nonce\n * Initialize, check, drop and reinitialize connection\n * Implement ADNL over TCP\n * Implement ADNL over UDP\n * Read config for public servers\n * Create, check, send and receive ping & pong messages\n * Send and receive message by parts\n * Send custom messages\n \nAlso:\n * The following libraries are used in C++ tdactor ton_crypto tl_api tdnet tddb keys keyring. Use precompiled libraries or find a change as much as possible. Fix or implement libraries that don\u0432\u0402\u2122t work.\n * Create tests for each feature\n * Publish npm package\n\n### Deliverables\n\nPublished npm package with library for ADNL protocol\n\n### Definition of Done\n\n[ ] npm package published. Using this package you can connect adnl nodes including validators and get the last block for example\n\n### Reward\n\n* Standard TON NFT Footstep\n* TBD usd equivalent in TON",
    "created_at": "2023-02-06T20:54:13Z",
    "updated_at": "2023-03-23T12:07:00Z"
  },
  {
    "state": "closed",
    "title": "NFT Edition minter and Tact contracts showcase",
    "body": "### Summary\n\nProvide a user-friendly way to mint NFT editions like it does [Jetton Minter ](https://minter.ton.org/). Along with this, show the first production-ready example of contracts Tact lang.\n\n### Context\n\nThere are several ways to mint an NFT collection, for example using [Getgems](https://getgems.helpscoutdocs.com/article/24-how-can-i-add-my-collection-to-getgems) which is relatively user-friendly. Still, it gives you little control over what you can customize, or you can use [Ton Nft Deployer](https://tondiamonds.github.io/ton-nft-deployer/) it's it has more customization, but at the expense of usability for users and newcomers.  \n\nHowever, no one offers a useful way to mint NFT editions that can be used to mint NFT tickets, burn-reveal mechanics or such crazy art as the Checks [[1](https://checks.art/)][[2](https://twitter.com/jackbutcher/status/1611726527590187016)]. \n\nNFT edition [[eth reference](https://create.zora.co/create/edition)]:\n- Same Media for each NFT\n- Limited mint by time or number of edits  \n- Limits for mint per address\n- Fixed price for the initial offer (can be free) \n\nI offer to provide users NFT edition minter which combines usability and customization. I hope this enables the community and creators more focus on interesting mechanics and art, but not the technology itself. \n\n### Goals\n\n* Provide NFT edition contract implementation on Tact \u0421\u0403ompatible with TEP-62\n* Provide easy-to-use UI to interact with NFT Edition Minter \n\n### Deliverables\n\n- [x] Design for UI\n- [x] Code design layout \n- [x] Tact contracts for NFT Edition Collection and NFT item\n- [x] Ton connect 2 integration\n\n### Definition of Done\n\n- [x] [Github repo](https://github.com/theoberton/3.14xl/) with UI, contracts, and description\n- [x] Tests contracts\n- [x] UI deployed to GitHub pages\n\n### Reward\n\n* Standart TON footstep NFT\n* 5000 TON",
    "created_at": "2023-02-04T14:51:20Z",
    "updated_at": "2023-04-28T11:46:33Z"
  },
  {
    "state": "closed",
    "title": "Development TON Connect 2.0 in OpenMask",
    "body": "Done in https://github.com/OpenProduct/openmask-extension/compare/v0.13.1...v0.14.0\nCloses https://github.com/ton-society/ton-footsteps/issues/107\n\nThe feature e2e available for example in [Tegro DEX](https://tegro.finance/)\n\n\nMy TON wallet for reward:\nEQB89AmRjsY2t3cAs6m4Z67dy8U33_jlldzbqYQf7MpoIv7t",
    "created_at": "2023-02-03T19:09:45Z",
    "updated_at": "2023-02-06T18:16:01Z"
  },
  {
    "state": "open",
    "title": "Tact Cookbook",
    "body": "### Summary\n\n[Tact Cookbook](https://docs.tact-lang.org/learn/cookbook) should help quickly figure out basic steps for implementing the most frequent logic in contracts, even if seekers have no experience with smart contracts or FunC development.\n\n### Context\n\nTact is in active development right now, and many methods are subject to change. It is important to publish what can already be considered unchanged.\n\n### Goals\n\nExamples and descriptions of logic implementation should help with the following issues:\n* People who really don't have the opportunity to read well-detailed explanations in articles but really want to know something simple and basic. These questions are good to be answered in short form.\n* Sometimes we get questions that have already been well answered a hundred times, but it's hard to find original answers in history or write good answers quickly.\n\n\n### Deliverables\n\nTact Cookbook should help quickly answer the most frequent questions about implementing logic in contracts.\n\n### Definition of Done\n\n- [ ] Most frequent questions about \"How to [logic in the contract] with Tact?\" could be answered with a link to the [Tact cookbook](https://docs.tact-lang.org/learn/cookbook).\n\n### Reward\n\nStandard TON Footsteps NFT\n25 USD equivalent in TON for every high-quality Tact example covered from the initial list.\nA minimum of 10 examples is needed to receive payment",
    "created_at": "2023-02-03T16:59:03Z",
    "updated_at": "2023-02-22T01:49:58Z"
  },
  {
    "state": "open",
    "title": "Smart-contracts for jetton voting platform",
    "body": "### Summary\n\nThe increasing popularity of defi applications and services using jettons has brought about new challenges for users and developers.\nThese challenges include the potential for loss of funds and reputation as a result of the uncontrolled use of jettons. It can often be difficult to distinguish between legitimate jettons and those created by scammers. Currently, there is no definitive whitelist of jettons, and no transparent process for creating such a whitelist.\n\nTo solve these challenges, we propose the development of a decentralized mechanism for verifying jettons through community voting and creating a status of jettons.\n\nThis decentralized mechanism would provide a transparent voting process and give equal rights of review to any jetton. The model would be driven by the community and all data would be stored in smart contracts. Additionally, any project would be able to proof a jetton by address through direct interaction with SDK.\n\nThe new approach to obtaining trusted addresses works like quasi-DAO is poised to be a game-changing ecosystem solution for the entire TON blockchain network. By building an entirely new jetton verification process that will become an ecosystem standard, developers, projects, and users will have access to a more secure and trustworthy network.\n\nThe design and architecture of smart-contracts based on proposals will ensure that a decentralized application is created for all participants of the TON ecosystem. This will provide developers, projects, and users with a more seamless and user-friendly experience.\n\nIn addition, the decentralized application that allows the community to make address verification transparent and available to each project will provide a significant benefit to the entire network. This will ensure that all projects have access to a tool for instant verification of any address, making the network more secure and transparent.\n\nOverall, new approach to verified addresses is a significant step forward for the TON blockchain network. It will provide a more secure, trustworthy, and user-friendly experience for all participants of the ecosystem, making it an ecosystem solution for the entire network.\n\n### Context\n\nThe jetton voting platform allows users to see the whitelist of jettons, create, change, and participate in the voting process.\n\nIn this concept, after voting, each jetton has two types of votes:\n\n- whitelisted\n- not whitelisted\n\nBy the ratio of the number of votes, we can conclude about the confidence of the voting community in the possibility of using the jetton in services.\n\nBy default, a defined number of users would be able to participate in the voting process, with the possibility of expanding this list.\n\nEach user would have the ability to change their vote over time, resulting in a changeable status for the token. In the future, it is proposed to use a web application for organizing voting, which will be developed with the next footstep.\n\nThis footstep applies only to the development of smart contracts and API.\n\n### Goals\n\n- Develop design and architecture for on-chain mechanic of jetton voting platform\n- Develop smart-contracts for future web application\n- Develop tests for smart-contracts\n- Tests voting platform core \n- Our next goal is web application and SDK for jetton voting platform\n\n\n### Deliverables\n\n- Github repo with core contracts and API for jetton voting platform\n- Tests for contracts\n- Architecture description\n- Formal approval from at least two existing wallets teams representatives\n\n### Definition of Done\n\nGitHub repository with the source code.\n\n### Reward\n\n11,700 USD in TON equivalent ",
    "created_at": "2023-02-02T16:20:11Z",
    "updated_at": "2023-03-12T14:01:43Z"
  },
  {
    "state": "closed",
    "title": "Tutorial: \"How to work with smart wallet contracts\"",
    "body": "### Summary\n\n\"How to work with smart wallet contracts\" tutorial creation.\n\n### Context\n\nCurrently, there is no detailed tutorial on working with smart wallet contracts, creating transactions, signing, and sending them. There are also no clear examples of the external/internal transaction difference and how wallets generally work. This tutorial will cover all such moments and will also touch on the topic of high-load wallets.\n\n### Goals\n\n- First, the tutorial will explain seqno, valid_until, and signature and why all this is stored in the contract memory\n\n- There will also be a detailed explanation of the need for two types of transactions (external/internal), as well as the difference between v3 and v4.\n\n- More will be told about external and why smart wallet contracts accept these transactions. \n\n- How to build an external transaction, sign it (without using ready-made methods in existing libraries to understand the process fully), and send it. The main job will be with ton & ton-crypto for JS/TS and tonutils-go for GO.\n\n- The next stage will be the explanation of wallets, stateInit building, mnemonic phrase generation, and other details related to the creation of the wallet. All this will be based on examples with the description of the code.\n\n- Next will be the stage of working with smart contract wallet: sending TONs, transactions with comments, GET methods. Also, special attention will be paid to building transactions within the contract for deploying new smart contracts.\n\n- The last step will be related to high-load wallets and how they differ from the usual wallets.\n\nMany examples will be shown based on libraries ton (JS/TS) and tonutils-go (GO).\n\n### Deliverables\n\nCreate a tutorial\n\n### Definition of Done\n\n- [ ] Tutorial created and merged into documentation\n\n### Reward\n\n- Standard TON Footstep NFT\n- $2000 in TON equivalent",
    "created_at": "2023-01-31T19:31:27Z",
    "updated_at": "2023-03-30T06:51:35Z"
  },
  {
    "state": "closed",
    "title": "TonSafe TON Wallet now supports TON Connect 2.0",
    "body": "### Name\n\nTonSafe\n\n### Telegram Contact\n\n@TonSafeSupportBot\n\n### Link to demo\n\nhttps://raw.githubusercontent.com/tonsafe/wallets-list/main/Tonsafe-Tonconnect-Demo.m4v\n\n### Amount\n\n5,000 USD in TON",
    "created_at": "2023-01-30T09:14:05Z",
    "updated_at": "2023-02-18T19:32:17Z"
  },
  {
    "state": "closed",
    "title": "Article: Random number generation in smart contracts",
    "body": "Done in https://github.com/ton-community/ton-docs/pull/140\nCloses #114\n\nMy TON wallet for reward:\nEQBKgXCNLPexWhs2L79kiARR1phGH1LwXxRbNsCFF9doc2lN",
    "created_at": "2023-01-29T18:33:26Z",
    "updated_at": "2023-01-31T05:49:40Z"
  },
  {
    "state": "open",
    "title": "Make formal verification accessible for anyone",
    "body": "### Summary\n\nCurrently, formal verification is mostly done by auditing companies, such as Certik / SlowMist / etc.\nBut price of audit is not that small for developers building their own projects, and that leads to loss of contract verification -- only testing on *some* cases is done.\n\n### Context\n\nTON Foundation has recently passed audit on Certik and on SlowMist. Source COQ codes for formal verification are not published. Having those in public could help the community.\n\n### Goals\n\nCreate a library for verification of smart contracts under some permissive license (like MIT).\n\n### Deliverables\n\n1. Choose language for verification (Idris/Coq/etc)\n2. Reimplement TON Blockchain details and objects on high level in chosen language (up to smart contracts and message processing)\n3. Implement TVM, BOC operations to allow FunC/TVM assembly to be literally translated into chosen language, to reduce errors where contract actual code does not match its formal version\n4. Create a manual including some contract with error which needs to be found, its formal description, verification failure and then fixed contract which passes verification.\n\n### Definition of Done\n\n- [ ] High-level library created\n- [ ] Low-level library created\n- [ ] Example contract successfully verified\n- [ ] Manual for verification published in documentation\n\n### Reward\n\n- Standard TON Footstep NFT to each participant\n- $1500 in TON for reimplementing blockchain details on high level (namely, message creation, delivery and processing, including new smart contracts deployment)\n- $700 in TON for checking validity of first step (has to be done by someone other than library author, preferably by someone having experience in working with TON full nodes/validators)\n- $1500 in TON for implementing TVM, BOC, etc\n- $700 in TON for checking validity of second step (also has to be done by someone other than library author)\n- $600 in TON for writing an example smart contract, its formal description and putting as a manual into https://ton.org/docs/",
    "created_at": "2023-01-27T12:05:22Z",
    "updated_at": "2023-02-08T20:19:58Z"
  },
  {
    "state": "open",
    "title": "Online browser IDE for TON",
    "body": "### Summary\n\nOnline browser IDE  to allow creating, editing, deploying, and debugging FunC TON Smart Contracts.\n\n### Context\n\nCreating your first TON contract is a challenging endeavor and requires installing, configuring, and running multiple tools.\nIn the first step, we want to create a tool allowing beginners to quickly start, run, deploy and debug smart contracts with no setup required.\n\n\n I created an MVP with the help from @thekiba and @kirjs  https://github.com/ilyjs/ton\n\nMVP: TON IDE\n- video demo\n- func, TS syntax highlighting\n- compile smart contracts in the browser\n- run smart contracts in the browser\n- click \u0432\u0402\u045arun\u0432\u0402\u045c\ncompilation and execution (locally in the browser!)\n\n![image](https://user-images.githubusercontent.com/10959044/214070298-8ac88e35-27ac-45be-9835-953d66a58196.png)\n\n\nhttps://user-images.githubusercontent.com/10959044/214096140-184d0cb9-2a3b-4ea4-a453-1723ad7e4d04.mp4\n\n\n\n\n### Goals\n\nNew users can open a browser page and start working with TON smart contracts.\n\n### Deliverables\n\n-  Ability to create/delete/rename/move files\n-  Deploying contracts to Testnet\n-  Refactoring and update dependencies to func-js\n-  IDE available online on github pages and hosted on Firebase Hosting\n\n\n### Definition of Done\n\n- IDE for TON opens in browser on github pages and hosted on Firebase Hosting. \n- Deployment of smart contracts to TestNet.\n- Ability to create/delete/rename/move files\n\n### Reward\n\n**MVP:** \n@ilyjs ($40/hr) **total 52hrs**\nEducation - 4hrs\nCreating MVP - 40hrs\nConsulting/Brainstorming - 8hrs\n\n@thekiba ($50/hr) **total 12hrs**\nUI Polishing and add script files - 5hrs\nPOC 4hrs\nConsulting/Brainstorming 3hrs\n\n@kirjs ($50/hr) **total 9hrs**\nEducation 4hrs\nConsulting/Brainstorming 5hrs\n\n**Footstep:** \nAbility to create/delete/rename/move files - 40hrs\nRefactoring and update dependencies to func-js - 20hrs\nDeploying contracts to Testnet - 40hrs\nResearch and \u0421\u0403onsulting - 20hrs\nIDE available online on github pages and hosted on Firebase Hosting - 1h\n\nTotal 121hrs\n\n**Total 7970$ in TON equivalent**\n\n",
    "created_at": "2023-01-23T20:03:45Z",
    "updated_at": "2023-06-07T22:01:54Z"
  },
  {
    "state": "closed",
    "title": "Article: Generation of block random seed",
    "body": "Footstep https://github.com/ton-society/ton-footsteps/issues/124\nArticle PR https://github.com/ton-community/ton-docs/pull/132\n\nDraft until article is merged.\n\nMy wallet address for reward: EQDauBLfiuJZCZxjRVyNHDd17tJiJCVTLi3YqKM74TKj9cA1",
    "created_at": "2023-01-23T18:28:45Z",
    "updated_at": "2023-01-27T12:16:19Z"
  },
  {
    "state": "closed",
    "title": "Article \"Integration manual\" for TON Connect 2.0",
    "body": "Footstep https://github.com/ton-society/ton-footsteps/issues/123\nArticle PR https://github.com/ton-community/ton-docs/pull/135\n\nDraft until proposed improvements are merged: https://github.com/ProgramCrafter/ton-docs/commit/57d5446c2778cd5cdce30a37fcc961c64f6f4650\n\nMy wallet address for reward: EQDauBLfiuJZCZxjRVyNHDd17tJiJCVTLi3YqKM74TKj9cA1",
    "created_at": "2023-01-23T18:25:26Z",
    "updated_at": "2023-01-27T12:16:05Z"
  },
  {
    "state": "open",
    "title": "Create standard for hosting TON Site/Storage in local network",
    "body": "### Summary\n\nNow, TON Sites and Storage nodes do not support working from behind NAT because they need to listen to incoming connections. This restricts technology users to those people who know how to set everything up and are willing to use a public IP.\n\n### Context\n\nIf TON Site hosting becomes available for every user, no matter whether he has a server with public IP, that will increase technology adoption and boost TON ecosystem.\n\n### Goals\n\nCreate a possibility to host TON Sites/Storage on personal computers.\n\n### Deliverables\n\n1. Create standard for connection to \"local network\" servers\n2. Create standard for TON domain records indicating local hosting\n3. Write a proxy application that will resolve TON Sites according to previous specification and newly created standard\n\n### Definition of Done\n\n- [ ] TEP created\n- [ ] TEP merged\n- [ ] sample proxy application created\n\n### Reward\n\n- Standard TON Footstep NFT\n- 1250$ in TON",
    "created_at": "2023-01-22T12:23:02Z",
    "updated_at": "2023-04-28T13:23:23Z"
  },
  {
    "state": "closed",
    "title": "Major cookbook improvements & additions",
    "body": "Updated most of the information in the Cookbook: added descriptions, and useful links, updated some examples and added new ones. Closed almost all TODO (for a random article in development).\n\nAccepted PR: https://github.com/ton-community/ton-docs/pull/127\nTON Address: EQDKbjIcfM6ezt8KjKJJLshZJJSqX7XOA4ff-W72r5gqPrHF",
    "created_at": "2023-01-19T20:32:10Z",
    "updated_at": "2023-01-20T05:41:58Z"
  },
  {
    "state": "open",
    "title": "Footstep: TON SDK for the Elixir programming language",
    "body": "the project - https://github.com/ayrat555/ton\nthe post - https://www.badykov.com/elixir/blockchain/ton/\n\nFootstep: https://github.com/ton-society/ton-footsteps/issues/129\n\nResults achieved:\nImplemented [ton-core](https://github.com/ton-community/ton-core/) and [ton](https://github.com/ton-community/ton/) alternative for Elixir.\n\nwallet for ton coins: EQADLRBbbfImjN1yaN6fqWPwkO3sN2fCdg8BD_g8LW_8Dj-G",
    "created_at": "2023-01-18T18:13:42Z",
    "updated_at": "2023-02-23T11:50:33Z"
  },
  {
    "state": "closed",
    "title": "VS Code extension for Tact language support",
    "body": "### Summary\n\nCreate VScode extension for Tact language to support highlighting and autocomplete features\n\n### Context\n\nTact is a new high-level language for TVM Smart contracts, but there are no VS Code extensions for easier programming with it.\n\n### Goals\n\n * Create VS Code extension for Tact language\n\n### Deliverables\n\n - [x] implement new Tact syntax functionality (includes & strings)\n - [x] refactoring functions and variables\n - [x] snippets\n - [x] includes file tree analysis\n - [x] better type suggestions\n - [x] variable type inference\n - [x] smart auto-complete\n - [x] auto-formatting\n\n### Definition of Done\n\n - Created the prototype for extension\n - Approximately in 2 weeks will be published initial release\n - Work should be done in two month after start\n\n### Reward\n\n - Standard TON Footstep NFT\n - 4000 USD",
    "created_at": "2023-01-18T07:02:11Z",
    "updated_at": "2023-06-03T09:33:49Z"
  },
  {
    "state": "open",
    "title": "Article: Porting the TON tools to OpenBSD/adJ",
    "body": "### Summary\n\nThe article should describe how the TON tools, i.e <https://github.com/ton-blockchain/ton>, were ported to the operating system OpenBSD/adJ allowing development of smart contracts on that system --as described in <https://medium.com/@vladimirtmara/developing-and-testing-a-simple-smart-contract-with-toncli-de96ad0a6f5c>\n\nIt also should present the current status of the porting effort of `mytonctrl` and serve as documentation for people wanting to run different kind of nodes on OpenBSD/adJ.\n\n### Context\n\nUsing the TON tools on OpenBSD/adJ increases their security, because OpenBSD is number one OS in security (see <https://www.openbsd.org/security.html>) and has a better record of vulnerabilites discovered than Windows, Linux, Mac, FreeBSD, etc (you can compare searching at <https://www.cvedetails.com/google-search-results.php?q=openbsd>). The distribution adJ adds to OpenBSD the support for locale and xlocale, that in turn is required by modern C++ compilers and by libraries used by TON tools like `abseil-cpp`.\n\nPorting the basic TON tools to OpenBSD/adJ was not a trivial task, because it required changes to the Operating System, to the library `abseil-cpp` and even to the TON tools.  Those changes were proposed and accepted by the upstream developers, see for example:\n<https://github.com/ton-blockchain/ton/commit/f7041cb44ff57a56894a312ba2fdc8058ccfc6e6>\n\n\n\n### Goals\n\n* Describe how the porting was done and the resulitng organization of the port, that can be reference to improve the main TON tools or to port them to other OS.\n* Describe the source code of the TON tools (there is no  documentation about it).\n*  Present the current status of the porting effort of mytonctrl in order to run possible validator or collator nodes on OpenBSD/adJ.\n\n### Deliverables\n\n* An article published in medium.com and dev.to\n* Article shared in twitter, linked.in and facebook\n\n### Definition of Done\n\n- [ ] The article describes the source code of the TON tools and the typical layout of tools and directories once installed on Ubuntu\n- [ ] The article explains how the port to OpenBSD/adJ was done and the layout of  tools and directories once installed.\n- [ ] The article describes the status of the port of mytonctrl and issues to be solved. It also describes the layout of mytonctrl once installed on OpenBSD/adJ and document how to run different kinds of nodes that can be run with them.\n- [ ] Article published in medium.com, dev.to and website of adJ/OpenBSD.\n- [ ] Article shared in twitter, linked.in and Facebook\n\n### Reward\n\nUS$400 in TON",
    "created_at": "2023-01-17T18:03:14Z",
    "updated_at": "2023-02-14T13:11:11Z"
  },
  {
    "state": "open",
    "title": "TON SDK for the Elixir programming language",
    "body": "## Summary\n\nI'm planning to port [ton-core](https://github.com/ton-community/ton-core) and [ton](https://github.com/ton-community/ton) to the Elixir programming language. \n\nBasic functionality (wallets, transactions) is already done in [ton-elixir](https://github.com/ayrat555/ton)\n\n## Context\n\nTON has good SDK libraries for typescript/javascript. But it seems typescript tools are the only ones actively maintained by the ton community. Potentially, my implementation could be used a reference for the languages similar to Elixir (Ruby, Python, etc)\n\n## Goals\n\n-  port [ton-core](https://github.com/ton-community/ton-core) features to elixir\n-  port [ton]https://github.com/ton-community/ton] features to elixir\n\n## Deliverables\n\n Two elixir projects with features from ton-core and ton respectively published on github and hex.pm\n\n## Definition of Done\n\n All features from typescript projects are ported to Elixir\n \n## Reward\n\n* Basic wallet functionality (deployment, transactions) - already done - $1500    \n* Primitive types and refactoring - $2600\n  - first tidy up all the primitives, remove the use of BitString directly, use Builder to build cells and Slice to read from them (cell's should be immutable)\n  - add support for dict, tuple's\n  - cover all of the above with tests\n* Contracts - $1500\n  - implement abstractions for working with contracts\n  - based on these abstractions, implement work with wallet contracts\n  - implement work with other contracts, such as Jetton, DNS, Storage\n* Toncenter $1000\n   - implement a client to work with TonCenter",
    "created_at": "2023-01-17T15:28:42Z",
    "updated_at": "2023-06-08T20:07:07Z"
  },
  {
    "state": "closed",
    "title": "English Translation of Articles of TON Deep Doc",
    "body": "### Summary\n\nThis project aims to translate articles in the [TON Deep Doc](https://github.com/xssnick/ton-deep-doc) repository from Russian to English and host them on [TON Documentation](https://github.com/ton-community/ton-docs).\n\n<img width=\"938\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/212822786-5a087975-c85a-4316-8fe0-de5c1c8430ff.png\">\n\n\n### Context\n\nTo reach a larger audience and make the articles easily accessible, it is necessary to translate them into English. The TON Deep Doc repository contains many articles that provide helpful information about the TON blockchain platform. \n\n### Why it's important?\n\nMany users cannot access or fully understand the information provided in the TON Deep Doc repository due to their lack of knowledge of the Russian language. \n\n\n### Goals\n\n* This footstep aims to accurately translate the articles from Russian into English and host them on TON Documentation. This will allow a broader audience to access and understand the content provided by these articles. Additionally, by hosting these translated articles on TON Documentation, they will be more easily accessible for TON Developers. \n\n### Deliverables\n\n* [ ] Complete translation of all Russian articles into English\n* [ ] Hosting articles on TON Documentation\n\n### Definition of Done\n\n- [ ] All articles accurately translated from Russian into English\n- [ ] Articles integrated to the current TON Documentation flow\n- [ ] Approved Pull-Request to the TON Documentation\n\n### Reward\n\n* Standard TON Footstep NFT\n* 2000$ in TON equivalent ",
    "created_at": "2023-01-17T06:14:26Z",
    "updated_at": "2023-02-25T15:23:34Z"
  },
  {
    "state": "open",
    "title": "Improve Documentation for TON Network Configs",
    "body": "### Summary\n\nThis footstep aims to improve the documentation for TON network configs by making it more user-friendly and providing helpful explanations of each parameter with links to the relevant material from the TON whitepapers.\n\n<img width=\"792\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/212822131-2281cd79-5f0e-4189-94b3-a561b9322338.png\">\n\n\n### Context\n\nAs part of the TON network configuration, there is a [global-config.json](https://ton.org/global-config.json) file that includes all the necessary parameters to configure and manage a node:\n- https://ton.org/global-config.json\n\n\n<img width=\"738\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/212822202-949c2e66-516d-4485-927b-dadd03dcb039.png\">\n\n\nCurrently, there is no documentation for network config files:\n- https://ton.org/docs/develop/howto/network-configs\n\nThis footstep seeks to address this issue by improving the documentation so that users can better understand and utilize each parameter successfully. \n\n### Goals\n\nThe primary goal of this project is to improve the user experience when dealing with the global-config.json file.\n\nSpecifically, we intend to provide an explanation of why each parameter is important, as well as links to relevant material from the TON whitepapers for further clarification and understanding. \n\n### Deliverables\n\n- [ ] Improved documentation for global-config.json file in [Network Configs](https://ton.org/docs/develop/howto/network-configs) article in a user-friendly format \n- [ ] Explanations of why each parameter is important with links to the materials in the documentation or TON Whitepapers \n\n### Definition of Done\n\n- [ ] Pull Request to the [ton-docs](https://github.com/ton-community/ton-docs) is approved and merged\n\n### Reward\n\n* Standard TON Footstep NFT\n* 200 USDT in TON",
    "created_at": "2023-01-17T06:05:03Z",
    "updated_at": "2023-05-15T19:11:24Z"
  },
  {
    "state": "closed",
    "title": "Footstep: Add toncoin to trust wallet core",
    "body": "Code for trust wallet core:\nhttps://github.com/trustwallet/wallet-core/tree/master/src/TheOpenNetwork\n\nFootstep: https://github.com/ton-society/ton-footsteps/issues/81\n\nResults achieved: \nImplemented TON blockchain in Trust Wallet Core\n\nwallet for ton coins: EQDk0rRqwtKw34r0fecUO6YotwKfMPU9XIxwrfjOfX9BIUx_\nwallet for sbt nft: EQCBA764QkuNJ6__lo1qagfHsa511ohsu8dLW8roFE-jjF-K",
    "created_at": "2023-01-13T21:13:06Z",
    "updated_at": "2023-01-16T06:43:05Z"
  },
  {
    "state": "open",
    "title": "Creating a FunC Language Track on Exercism.org",
    "body": "### Summary\n\nThis project is about creating a FunC language track on Exercism, an open-source code-academy-like platform. The project will involve creating a FunC language repository, a test runner, and a first lesson on the [Exercism platform](https://exercism.org/) which supports 62 languages. Let's add FunC as 63rd!\n\n### Context\n\nExercism is an open-source platform that provides users with code tutorials in various development languages.\n\n* Platform: https://exercism.org/\n* GitHub organization: https://github.com/exercism\n\nCurrently, it does not provide tutorials for the FunC language, which is used to write smart contracts on the TON Blockchain. To remedy this situation, you could create a FunC language track on Exercism with a first lesson \u0432\u0402\u045aHello World\u0432\u0402\u045c hosted on the platform.\n\n#### Example\n\n You can use the Rust language track for inspiration.\n\n- Here is an example of a Rust language track:\nhttps://exercism.org/tracks/rust\n- Here is an example of a GitHub repository for Rust language:\nhttps://github.com/exercism/rust\n- Here is an example of a GitHub repository for checking Rust solutions for validity (test runner):\nhttps://github.com/exercism/rust-test-runner\n\n<img width=\"1417\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/212012488-7881bc9f-f736-4a30-bd59-cd3f76392c55.png\">\n\n\n### Goals\n\n* The goal of this project is to create an infrastructure similar to Rust\u0432\u0402\u2122s for FunC language\n\n### Deliverables\n\n- FunC language repository with \"Hello World\" lesson\n- A test runner for validating solutions (using TypeScript, for example)\n- Hosted  FunC language track on Exercism\n\n### Definition of Done\n\n- Hosted  FunC language track on Exercism with \"Hello World\" working example\n\n### Reward\n\n* Standard TON Footstep NFT\n* 1000 USD in TON",
    "created_at": "2023-01-12T08:09:14Z",
    "updated_at": "2023-06-08T19:58:01Z"
  },
  {
    "state": "closed",
    "title": "Article: Random numbers generation in blocks",
    "body": "### Summary\n\nWe need a low-level article which explains how validators produce random numbers which are used as block seeds.\n\n### Context\n\nCurrently, way of generating random seeds is unclear even from TON whitepapers. This raises questions whether those seeds are generated before or after deciding which external messages are imported, and that makes it unclear whether insidious (but still fair) validator can include an external message into block generating exactly needed random value.\n\nThis article may possibly start series \"Writing own tools for interacting with TON\".\n\n### Goals\n\n- Make it clear how random block seeds are generated\n\n### Deliverables\n\n- Article describing process of generating block seed (whitepapers mention threshold signatures - if this is actually used, it needs a description understandable at least by developers)\n\n### Definition of Done\n\n- [x] Article created, opened pull request\n- [x] Article merged into https://ton.org/docs/\n\n### Reward\n\n- Standard TON Footstep NFT\n- $550 in TON equivalent",
    "created_at": "2023-01-11T15:39:05Z",
    "updated_at": "2023-01-27T13:52:41Z"
  },
  {
    "state": "closed",
    "title": "Create tutorial \"How to integrate TON Connect 2.0 into web app\"",
    "body": "### Summary\n\nCover TON Connect 2.0 tutorial\n\n### Context\n\nCurrently, TON Connect 2.0 docs only cover its API and don't provide usage examples. I think to increase popularity of this tool a tutorial is needed.\n\n### Goals\n\n- Make a tutorial, by following which users should be able to create an integration button in their web applications\n  - working with any wallet supporting TON Connect 2.0 (preferably even ones that aren't ready at the moment of writing tutorial)\n  - supporting `ton_proof` (so that backend is able to check actual address ownership)\n  - following integration best practices.\n\n### Deliverables\n\n- Create a tutorial (https://github.com/ton-community/ton-docs/issues/125)\n\n### Definition of Done\n\n- [x] Article created and merged into documentation\n\n### Reward\n\n- Standard TON Footstep NFT\n- $700 in TON equivalent",
    "created_at": "2023-01-11T15:30:28Z",
    "updated_at": "2023-02-28T11:53:25Z"
  },
  {
    "state": "closed",
    "title": "Fix: typos",
    "body": "Fix: typos",
    "created_at": "2023-01-11T12:39:08Z",
    "updated_at": "2023-01-11T13:07:31Z"
  },
  {
    "state": "closed",
    "title": "Footstep: Telegram Bot for the TON Developer Community",
    "body": "Closes #116\n\nMy wallet address for the reward:\nEQCRtBJh6Xw1OSr0OqHZ10ARHVcTaf1MIKxDaL1Y0HXagcEj",
    "created_at": "2023-01-11T12:11:50Z",
    "updated_at": "2023-04-15T14:52:35Z"
  },
  {
    "state": "closed",
    "title": "Bug Bounty program for TON Blockchain Multisig smart contract",
    "body": "### Summary\n\nThis document outlines the requirements for a bug bounty program of the TON Blockchain Multisig smart contract. The bug bounty program will help assess the current level of security and suggest improvements to enhance its safety by TON Community.\n\n### Context\n\nThe TON Blockchain Multisig Smart-Contract is a critical component of the TON Blockchain platform, responsible for securely handling transactions and protecting user funds. As such, it is essential that it be subjected to a rigorous security audit to ensure that it is secure and reliable. \n\nHere is a codebase of a multi-sig smart contract:\n* https://github.com/ton-blockchain/multisig-contract\n\nCurrently, there has been no security audit performed on the TON Blockchain Multisig Smart-Contract, leaving its safety and reliability unknown. By conducting a bug bounty program, we can ensure that multi-sig meets the highest security and reliability standards proven by the community.\n\n\n### Goals\n\n* This project aims to conduct an independent security audit of the TON Blockchain Multisig Smart-Contract by anyone from the TON Community in the form of a \"Bug Bounty\" program.\n\n### Deliverables\n\n* Bugs found, and a reward has been paid to members of the TON Community\n\n### Definition of Done\n\n* If any critical issues were found, the community member contacted the TON Foundation team to fix them (Telegram: @SwiftAdviser)\n\n### Reward\n\n* Standard TON Footstep NFT\n* Amount in USDT in TON \u0432\u0402\u201d TBD, depending on the severity of the bug found",
    "created_at": "2023-01-11T05:14:07Z",
    "updated_at": "2023-04-28T11:49:50Z"
  },
  {
    "state": "closed",
    "title": "Create a User-Friendly Config for TON Blockchain",
    "body": "### Summary\n\nThis project aims to create a user-friendly web dashboard that will allow users to better understand the technical parameters of the TON Blockchain config.\n\n### Context\n\nThe TON Ecosystem has a complex config with many technical parameters. However, only a small amount of people understand what these parameters mean. This project is necessary to provide users with an easy way to understand the parameters and their purpose.\n\nIn this way, we would make Blockchain technology easier to understand for newcomers.\n\n## Example\n\n<img width=\"1412\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/211495588-95e3bbca-84e2-4059-8e62-951aaeaeef27.png\">\n\nExample of current config: http://explorer.toncoin.org/config\nIf you don't understand anything it is okay. That's why this footstep was made.\n\n### Goals\n\n\u0432\u0402\u045e Create a user-friendly web page with the actual config parameters \n\u0432\u0402\u045e Provide high-quality descriptions of each parameter that a 5-year-old would understand\n\u0432\u0402\u045e Host this page on https://tonhouse.skyring.io/ as part of the user-friendly TON Ecosystem explorer. (or your own solution)\n* [TonHouse GitHub](https://github.com/sky-ring/ton-house)\n\n### Deliverables\n\n\u0432\u0402\u045e User-friendly web page with actual config parameters\n\u0432\u0402\u045e Descriptions of each parameter. All the config descriptions must be validated and approved by an experienced developer from TON Ecosystem, whose authority is out of the discussion.\n\u0432\u0402\u045e Hosted page on https://tonhouse.skyring.io/  (or your own solution)\n\n### Definition of Done\n\n- PR to the TonHouse approved and merged (or your own open-source repo created)\n- Config descriptions released and approved by an experienced TON Developer\n- Web page accessible by everyone in the community\n\n### Reward\n\n* TON Footstep NFT\n* 1300 USD in TON",
    "created_at": "2023-01-10T08:08:37Z",
    "updated_at": "2023-05-26T08:10:30Z"
  },
  {
    "state": "open",
    "title": "Alt-bn128 curve func implementation",
    "body": "### Summary\n\nAlt_bn128 is an elliptic curve used in other blockchains. It is defined by the equation y^2 = x^3 + 3 over a finite field of prime order, which means that the points on the curve satisfy this equation. The curve has some special properties that make it well-suited for use in cryptography.\n\nAnother important property of alt_bn128 is that it is resistant to certain types of attacks. For example, it is resistant to a type of attack known as the \"elliptic curve discrete logarithm problem,\" which is a potential weakness in some other types of curves.\n\nOverall, alt_bn128 is a well-studied and widely used curve in the field of cryptography, and it has proven to be a reliable and secure choice for use in the TON blockchain.\n\n### Context\n\nElliptic curves, such as alt_bn128, are used in cryptography for various purposes, including for creating digital signatures and for implementing key exchange protocols. In the context of the Ethereum blockchain, alt_bn128 is used to perform a specific type of calculation known as an \"elliptic curve pairing,\" which is a key component of the Ethereum Virtual Machine (EVM).\n\nThe EVM is the runtime environment in which smart contracts on the Ethereum blockchain are executed. The elliptic curve pairing calculation is used in the EVM to verify the validity of transactions and to enforce certain properties of smart contracts.\n\n+ its needed to work with zk in TON contracts :)\n\nEth already have official precompiled contracts (number 5 6 7 8 in the first [answer](https://ethereum.stackexchange.com/questions/15479/list-of-pre-compiled-contracts/15483#15483))\n\n### Goals\n\n* Provide ability for users to have ready-to-use altbn128 curve solution\n\n### Deliverables\n\n* Develop FunC smart contract implementation \n* Make tests for this contract\n\n### Definition of Done\n\n * [ ] Users will have open repository with curve smart contract with manual \"how to setup and use\"\n\n### Reward\n\n* $2k in TON",
    "created_at": "2023-01-09T17:42:17Z",
    "updated_at": "2023-01-20T17:00:03Z"
  },
  {
    "state": "closed",
    "title": "Added 10 examples to func cookbook ",
    "body": "Added 10 examples to func cookbook \n\nCovered these examples: [#10](https://github.com/ton-society/ton-footsteps/issues/10#issuecomment-1361896008)\n\nAccepted PR in ton docs repository:\n[ton-community/ton-docs#103](https://github.com/ton-community/ton-docs/pull/103)",
    "created_at": "2023-01-07T17:35:28Z",
    "updated_at": "2023-01-07T21:07:30Z"
  },
  {
    "state": "closed",
    "title": "Telegram Bot for the TON Developer Community",
    "body": "### Summary\n\nThis project aims to create a Telegram Bot to share every new post from the [TON Overflow](https://answers.ton.org/ ) to the developer community chats (TonDev Chats RU, EN, CN).\n\n### Context\n\nTonDev chat is regularly filled with questions and answers that can already be found on the [TON Overflow](answers.ton.org). But it's a complicated task to know about TON Overflow if you didn't use it before.\n\nThat's why creating a Telegram Bot that will share new posts from the TON Overflow to the TonDev chats will help a lot. Thus reducing redundant questions and answers in the chat and making it easier for developers to find solutions to their problems using Google, instead of formulating questions which asked 1000 times before.\n\n### Goals\n\n## Goals\n\n* The primary goal is to create a Telegram bot to share EVERY new post from the website https://answers.ton.org/ to the TonDev Chat EN, RU, CN.\n\n## Example of the post\n\n**[TON jettons VS Solana token transactions](https://answers.ton.org/question/1504094042852429824/ton-jettons-vs-solana-token-transactions) from John Doe**\n\n_Hello._\n\n_We are developing a game project on the blockchain. Every day, tens of thousands of users should receive game tokens for activity in the game. At the moment, the project is implemented on the Solana blockchain and we pay 0.000005 SOL for each issuance of tokens to the user. We implemented the same functionality on the TON blockchain and regretted the fact that each transaction of Tokens to a user costs 0.04-0.06 TON. With such price it's impossible to launch the project on TON blockchain. Tell me, please, are we wrong, or is the transaction of tokens in the TON network really 100 times more expensive than the Solana network?_\n\n\u0440\u045f\u201d\u2014 [Answer on TON Overflow](https://answers.ton.org/question/1516837968814280704/unwrapping-erc20-based-ton)\n\n<img width=\"425\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/210924407-8a86c024-6700-4401-9a22-e358805ce9bd.png\">\n\n\n### Deliverables\n\n- All code written for this project should be thoroughly tested, documented, and released under an open-source license \n- The bot should be ably deployable in multiple environments (production, staging, etc.)\n- Documentation of all code written for this project (comments, README, instructions on how to launch)\n- Launched and ready-to-use bot example\n\n### Definition of Done\n\n- A fully functional Telegram bot based on Python or JavaScript that works with [Scoold](https://scoold.com/) CMS  (send message to many chats after a new post on TON Overflow)\n- Open-source repository added to the ton-community organization for the future improvements\n\n### Reward\n\n* Standard TON Footstep NFT\n* 500 TON",
    "created_at": "2023-01-06T03:28:54Z",
    "updated_at": "2023-04-01T05:52:36Z"
  },
  {
    "state": "closed",
    "title": "Cookbook review and improvements",
    "body": "Reviewed FunC Cookbook https://github.com/ton-community/ton-docs/pull/102\n\nAddress for the reward: `EQAPPgN25OQh3EOqqt0v_CRmScxa-_ulVwm5NESN1DO4gcEG`",
    "created_at": "2023-01-05T13:18:35Z",
    "updated_at": "2023-01-05T20:16:29Z"
  },
  {
    "state": "closed",
    "title": "Article: Random number generation in smart contracts",
    "body": "### Summary\n\nWe need an article about random number generation in smart contracts.\nThe article must explain different ways of generating random numbers on-chain and provide some examples.\n\n### Context\n\nThis topic is very important. Random numbers are part of many different smart contracts & projects.\nThere are several ways of acquiring random numbers on-chain, and the basic ones aren't really safe.\nTON Hack Challenge demonstrated that here:\n - https://ton.org/docs/develop/smart-contracts/security/ton-hack-challenge-1#4-lottery\n\nSo we need to explain and give some examples about reliable RNG for developers.\n\n### Goals\n\n * Write an article about Random number generation in smart contracts\n\n### Deliverables\n\n * \"Random number generation\" article for TON Docs\n\n### Definition of Done\n\n * [x] Article is done\n * [x] Article is merged and available at ton.org/docs\n\n### Reward\n\n * Standard TON Footstep NFT\n * 500$ in TON equivalent",
    "created_at": "2023-01-04T12:48:46Z",
    "updated_at": "2023-01-31T05:49:41Z"
  },
  {
    "state": "closed",
    "title": "Article, improvements and fixes in docs",
    "body": "Closes #112 \n\nMy wallet address for the reward:\nEQBKgXCNLPexWhs2L79kiARR1phGH1LwXxRbNsCFF9doc2lN",
    "created_at": "2023-01-03T14:35:51Z",
    "updated_at": "2023-01-04T11:39:22Z"
  },
  {
    "state": "closed",
    "title": "Articles, improvements, reviews and fixes for TON docs",
    "body": "### Summary\n\n#### Part 1 (January 3):\n - Cover \"Message delivery guarantees\" article\n - Update [\"Compile from Sources\"](https://ton.org/docs/develop/howto/compile) instructions\n - Add \"Principles of a good tutorial\"\n - Update FAQ in [fees article](https://ton.org/docs/develop/smart-contracts/fees#faq)\n - Add [FunC libraries](https://ton.org/docs/develop/smart-contracts/libraries) list\n - Structure the [web3 section](https://ton.org/docs/participate/web3/overview)\n - A bunch of little fixes\n\n#### Part 2 (June 3):\n - 28 Pull Requests (Reviews and Contributions):\nhttps://github.com/ton-society/ton-footsteps/issues/112#issuecomment-1575170179\n - Many little fixes in direct commits\n\n### Context\n\n#### Part 1 (January 3):\n - The article will be really helpful for developers - it explains the order of message delivery between smart contracts.\n - \"Compile from Sources\" has old and incomplete instructions for building\n - \"Principles of a good tutorial\" will help new contributors to write better articles and tutorials in docs\n - FAQ in fees article is incomplete\n - The FunC libraries list is empty\n - Web3 section is unstructured and missing new TON Storage articles\n - The documentation needs some little fixes such as replacing some old link with a new one, fixing images, adding some new tool/library in a list etc.\n\n#### Part 2 (June 3):\n - The 28 Pull Requests encapsulate various improvements, including bug fixes, feature enhancements, and reviews. Each PR, whether large or small, contributes towards the overall betterment of the project.\n - The direct commits reflect an ongoing commitment to addressing smaller issues without going through the more formal PR process. These 'little fixes' help keep the documentation current, accurate, and user-friendly.\n\n### Goals\n\n * To continually improve the documentation and source code for increased usability and comprehension\n * To keep the project updated with the latest information, making it a reliable source of information for developers\n * To encourage the growth and participation of the community in the project through continuous improvements and openness to contributions.\n\n### Deliverables\n\n * Comprehensive articles that are consistently maintained with updates, improvements, and fixes\n * Continuous enhancement of the documentation through meticulous proofreading and minor corrections\n * Active participation in numerous Pull Request reviews\n\n### Definition of Done\n\n - [x] Articles are merged and available in ton.org/docs\n - [x] All improvements and fixes are merged and available in ton.org/docs\n\n### Reward\n\n#### Part 1 (January 3):\n * Standard TON Footstep NFT\n * $500 in TON equivalent ($300 for the article, 5*30=$150 for 5 improvements, $50 for a bunch of fixes)\n\n#### Part 2 (June 3):\n * $700 in TON equivalent ($500 for PR creation and reviews, $200 for many fixes and improvements in direct commits)",
    "created_at": "2023-01-03T14:13:13Z",
    "updated_at": "2023-06-07T17:46:35Z"
  },
  {
    "state": "closed",
    "title": "Articles: TVM assembly, Fift and the difference",
    "body": "PR for https://github.com/ton-society/ton-footsteps/issues/110\nMy wallet address for reward: EQDauBLfiuJZCZxjRVyNHDd17tJiJCVTLi3YqKM74TKj9cA1",
    "created_at": "2023-01-03T14:04:00Z",
    "updated_at": "2023-01-23T18:15:41Z"
  },
  {
    "state": "closed",
    "title": "Tutorial: TVM assembly, Fift and the difference",
    "body": "### Summary\n\nMost people don't see difference between Fift and TVM assembly and are thus confused when try truly low-level programming.\n\n### Context\n\nThere was a beautiful attempt to convert number into string:\n\n> ```\n> slice int_to_string(int x) asm \"(.) $>s PUSHSLICE\";\n> ```\n> Victor, `@tondev` Telegram chat\n\nIt didn't work because `(.)` is a Fift primitive, not TVM instruction.\n\n### Goals\n\n- Write article covering all Fift syntax and features, preferably with examples from toncli's Asm.fif/etc (\"deep dive\")\n- Write article describing in brief what is Fift, what is TVM assembly and what's the difference between them (\"brief course\")\n\n\n### Deliverables\n\n- Ready articles for https://ton.org/docs/\n\n### Definition of Done\n\n- [x] Both articles done\n\n### Reward\n\n- Standard TON Footstep NFT\n- $900 in TON equivalent ($450 * 2)",
    "created_at": "2023-01-01T19:04:07Z",
    "updated_at": "2023-02-17T07:06:22Z"
  },
  {
    "state": "closed",
    "title": "The Open Network",
    "body": "### Name\n\nMy precious wallet\n\n### Telegram Contact\n\n@mrrrph\n\n### Link to demo\n\nhttps://t.me/tonsociety/\n\n### Amount\n\n2002",
    "created_at": "2022-12-29T21:49:51Z",
    "updated_at": "2023-06-05T15:07:54Z"
  },
  {
    "state": "closed",
    "title": "Implement TON Connect 2.0 in TonHub",
    "body": "### Name\n\nTonHub\n\n### Telegram Contact\n\n@dvlkv\n\n### Link to demo\n\nin progress\n\n### Amount\n\n5000 USD worth in TON",
    "created_at": "2022-12-28T10:53:19Z",
    "updated_at": "2023-03-31T16:37:13Z"
  },
  {
    "state": "closed",
    "title": "Development TON Connect 2.0 in OpenMask",
    "body": "### Name\n\nOpenMask\n\n### Telegram Contact\n\n@nKuznetsov5\n\n### Link to demo\n\nhttps://github.com/ton-connect/wallets-list/pull/2#issuecomment-1356515969\n\n### Amount\n\n5000$",
    "created_at": "2022-12-27T19:21:20Z",
    "updated_at": "2023-03-01T12:52:47Z"
  },
  {
    "state": "closed",
    "title": "Add meta information to ast nodes in `tlb-parser`",
    "body": "Closes #92",
    "created_at": "2022-12-25T18:59:39Z",
    "updated_at": "2022-12-29T17:42:34Z"
  },
  {
    "state": "closed",
    "title": "TACT lang documentation. ",
    "body": "### Summary\n\nCreate detailed and friendly [Tact](https://github.com/ton-community/tact)  documentation in the new section of [ton.org/documents](https://ton.org/docs/).\n\n\n### Context\n\nTact is a scalable and safe language to build smart contracts for TON. Documentation for Tact should help to simplify the process of onboarding developers.  \n\n### Goals\n\n* Implement core documentation to help newcomers onboard in TON development via TACT language.\n\n* Current footstep covers the following things:\n  * Creating core documentation structure defined by a detailed table of content. \n  * Set up environment materials for at least one platform and IDE.\n  *  Tutorial for creating and deploying basic smart contracts(Wallet, Jetton, Multisig).\n  *  Thinking about developing in TON in the context of TACT language(For example, transferring concepts from FunC materials and adding new actual thoughts).\n  *  Description of the core language entities(statements, functions, contracts).\n  * Standard library overview and description.\n  * TACT syntax highlights integrate as soon, as somebody implements this.\n\n\n### Deliverables\n\nAs a result, we should get documentation, that kick-off other developers to use Tact and help to improve documentation and language faster.\n\n### Definition of Done\n\n- [x] Detailed [content struct](https://docs.google.com/spreadsheets/d/1Y0Rod5Cs-gTF-x4y3SZ4cvnZ3x5qOnifYCKpd4j_UNA/edit?usp=sharing) confirmed.\n\nFirst week\n- [x] TACT lang overview article.\n- [x] Set up the environment Article for 1 Operation system and 1 IDE(Detailed guide in Tact Hello World guide).\n- [x] Smart contract implementation and deploying guide article I. (Step-by-step guide with Increment contract).\n- [x] Basic syntax overview article.\n\nSecond week\nx ~~TACT Concepts. Types definition with one code block for each.~~\n- [x] Standard functions\n- [x] Smart contract implementation and deploying guide article II. (Wallet.tact contract demo guide. How to deploy via public endpoints. ).\n- [x] Basic syntax.\n\nThird week\n- [x] Concepts/Basic types.\n- [x] Concepts/Primitive types.\n- [x] Concepts/High-level types.\n- [x] Smart contract implementation and deploying guide Article III. (Jetton.tact contract. Deployment contract and explanation of Jetton design).\n\nFourth week\n- [x] Tact Cookbook. (Template and footsteps created)\n- [x] Basic concept of developing smart contract in TON via Tact lang.  (page template added)\nx ~~Guidelines on the code style and code organization.~~\n\nFifth week\n- [x] Public launch of documentation.\n- [x] Collect feedback from the Ton developers community.\n- [x] Fix small typos and requests based on comments.\n- [x] Create new issues and footsteps for new contributors based on the most relevant problems for Tact.\n\n\n### Reward\n\n(3500 + 500) USD equivalent in TON.",
    "created_at": "2022-12-25T16:20:59Z",
    "updated_at": "2023-02-09T15:07:29Z"
  },
  {
    "state": "closed",
    "title": "Articles about \"toncli\" and \"ton storage\"",
    "body": "Closes #103",
    "created_at": "2022-12-23T18:24:31Z",
    "updated_at": "2022-12-26T11:44:08Z"
  },
  {
    "state": "closed",
    "title": "Articles about \"toncli\" and \"ton storage\"",
    "body": "### Summary\n\nNeed to cover 4 articles:\n* Describe \u0432\u0402\u045atoncli\u0432\u0402\u045c, installation.\n* Describe project creation, writing testing functions, testing a smart contract.\n* Describe the \"Storage provider\" in the article\n* Describe the \u0432\u0402\u045aStorage daemon\u0432\u0402\u045c in the article\n\n\n### Context\n\nI talk clearly and in detail about the toncli tool for launching and testing smart contracts. Also, all the instructions and features of ton storage for use in various purposes are fully shown.\n\n\n### Goals\n\n* Submit 4 articles described above.\n\n\n### Deliverables\n\n* Written articles for documentation.\n\n### Definition of Done\n\n - [x] Article \"toncli\u0432\u0402\u045c in SDK\n - [x] Article \u0432\u0402\u045atoncli\u0432\u0402\u045c in Testing & Debugging\n - [x] Article \u0432\u0402\u045aStorage daemon\u0432\u0402\u045c in participate - ton-storage\n - [x] Article \u0432\u0402\u045aStorage provider\u0432\u0402\u045c in participate - ton-storage\n\n\n### Reward\n\n* Standard TON Footstep NFT\n* 600 (4*150) USD equivalent in TON\n",
    "created_at": "2022-12-23T17:41:55Z",
    "updated_at": "2022-12-26T11:35:57Z"
  },
  {
    "state": "closed",
    "title": "changed the amount field to input",
    "body": "",
    "created_at": "2022-12-22T20:27:04Z",
    "updated_at": "2022-12-22T20:27:11Z"
  },
  {
    "state": "closed",
    "title": "added template for TON Connect 2.0 Support",
    "body": "",
    "created_at": "2022-12-22T20:24:47Z",
    "updated_at": "2022-12-22T20:24:56Z"
  },
  {
    "state": "closed",
    "title": "General TON Stats Done",
    "body": "Implemented and deployed #11 ",
    "created_at": "2022-12-22T19:50:10Z",
    "updated_at": "2022-12-27T11:22:10Z"
  },
  {
    "state": "closed",
    "title": "Translation of educational materials on blockchain, smart contracts and everything else related to TON",
    "body": "### Summary\n\nI would like to provide all possible assistance in translating training articles on the block chain, repositories and smart contracts into Russian.\n\n### Context\n\n I think that a lot of people who could learn FunC and help spread the blockchain cannot just learn all the features because of the missing translations.\n\n### Goals\n\nIt is planned to create articles on training, guidelines and materials for creating smart contracts and other useful materials in Russian\n\n### Deliverables\n\n1) Translation of main articles with general information\n2) Translation of supporting materials and documentation\n3) Adaptation to a simplified language for beginners of a certain amount of materials\n4) Improvement and community feedback\n\n### Definition of Done\n\nAll important articles translated into accessible russian language.\n\n### Reward\n\nStandard TON Footstep NFT\n300 USD in TON equivalent",
    "created_at": "2022-12-21T15:12:34Z",
    "updated_at": "2023-05-15T19:14:02Z"
  },
  {
    "state": "closed",
    "title": "Added 10 examples to func cookbook",
    "body": "Covered these examples:\nhttps://github.com/ton-society/ton-footsteps/issues/10#issuecomment-1346513332\n\nAccepted PR in ton docs repository:\nhttps://github.com/ton-community/ton-docs/pull/88",
    "created_at": "2022-12-20T18:16:15Z",
    "updated_at": "2022-12-26T11:51:26Z"
  },
  {
    "state": "closed",
    "title": "Develop universally adopted wrapped Toncoin (wTON)",
    "body": "Closes #64 \n\nHere is the TEP with source code:\nhttps://github.com/markokhman/TEPs/blob/master/text/0000-wrapped-ton-standard.md\n\nAddress for the reward: EQC7zjln0_fghMQg0A-ZhYFar3DU1bDW9A4Vi5Go5uu-tAHe",
    "created_at": "2022-12-19T14:27:35Z",
    "updated_at": "2022-12-26T11:44:23Z"
  },
  {
    "state": "closed",
    "title": "Added 12 examples to func cookbook",
    "body": "",
    "created_at": "2022-12-19T06:51:34Z",
    "updated_at": "2022-12-20T18:31:05Z"
  },
  {
    "state": "closed",
    "title": "Articles: General guide to smart contacts",
    "body": "### Summary\n\n### Summary\n\nYou need to create 4 articles describing the complete process from creating a smart contract to the deployment.\nEach article will lead to another, so that the user can fully study the material to create the smart contract\n\n**Articles:**\n* How to create a project? \n* How to test and debug a smart contract?\n* How to build a smart contract? \n* How to deploy a smart contract?\n\n\n\n\n\n\n\n### Context\n\n### Context\n\nI describe in the most detailed and easiest way to master how to create your first smart contract, test, build, deploy in the TON blockchain.\nThe description includes a multi-level explanation of the material in various ways of implementation. As well as numerous examples. Suitable for both beginners and professionals.\n\n### Goals\n\n### Goals\n\n* Submit an article.\n\n### Deliverables\n\n### Deliverables\n\n* While the first article is completely ready and the second one has been started for ton.org.\n\n\n### Definition of Done\n\n### Definition of Done\n\n - [x] Article in Choose Your SDK \"Using toncli\" \n - [ ] Article about using JS in creating a smart-contract\n - [ ] Article in Testing & Debugging with JS\n - [ ] Article in Build and Compile with JS\n - [ ] Article in Deploying Contract with JS\n\n\n\n### Reward\n\n### Reward\n\n* Standard TON Footstep NFT\n* 1000$ in TON equivalent",
    "created_at": "2022-12-16T09:43:30Z",
    "updated_at": "2023-01-09T10:28:24Z"
  },
  {
    "state": "open",
    "title": "NX (@nrwl/nx) plugin for bootstrapping TON smart contracts monorepo",
    "body": "### Summary\n\nI propose to create `nx` plugin for initiating `FunC` libraries in monorepo, with out-of-the-box support for commands such as `build`, `test`, `deploy(?)`.\n\n### Context\n\n[Nx](https://nx.dev/) is one of the most popular monorepo management utilities, which itself uses plugins enabling developers to initiate libraries/apps using predefined, best-practice boilerplates.\n\nSetting up a monorepo with `nx` is as easy as `yarn create nx-workspace` and adding a `node` library for example is as follows `nx generate @nrwl/node:lib`\n\nNx comes very handy for `CI/CD` as well with its built-in functions like `nx affected`. So essentially having `nx` plugin will \n help to:\n* speed up the dev environment setup\n* manage multiple smart contract libraries in single monorepo\n* simplify build, testing and  deployment processes\n\nHer is an example of nx plugin I wrote for managing `rust-wasm` libraries: https://github.com/noctifer20/nx-cargo\n\nMy proposed solution will allow developers to install nx plugin and create a library by simply calling `nx generate nx-ton:lib myFunCLib`\n\n### Goals\n\nProvide out of the box solution for initiating development environment and libraries using best-practices\n\n### Deliverables\n\n* `nx-ton` plugin with following functionality\n  *  Generate `nx generate nx-ton:lib myFunCLib`\n  *  Build `nx build myFunCLib`\n  *  Test `nx test myFunCLib`\n*  e2e and unit tests\n\n### Definition of Done\n\nGithub repository and published npm module.\n\n### Reward\n\n* Standard TON Footstep NFT",
    "created_at": "2022-12-14T20:13:35Z",
    "updated_at": "2023-05-02T05:41:06Z"
  },
  {
    "state": "open",
    "title": "Contract profiler",
    "body": "### Summary\n\nContract emulator that can show number of times each instruction is ran and how much gas does it cost.\n\n### Context\n\nSuch tool would be useful for optimizing gas usage and therefore would cut down on contract fees.\n\n### Goals\n\nCreate crossplatform profiler for TON contracts.\n\n### Deliverables\n\n- Creating program that is able to locally execute transactions and run tests meanwhile measuring gas usage and execution count for each instruction\n- Making this program crossplatform\n  *preferably without Docker, as Docker claims not to work in nested virtualization, and sometimes TON-related programs have to be ran in a VM*\n\n### Definition of Done\n\n- [ ] Profiler can execute a transaction locally when FunC/Fift/TVM code of contract and transaction data is provided\n- [ ] Program can measure gas usage while running contract tests (as toncli new-tests mode)\n- [ ] Profiler becomes available on all platforms: Windows, Linux, macOS (preferably without Docker)\n\n### Reward\n\n- Standard TON Footstep NFT\n- 3500$ in TON equivalent",
    "created_at": "2022-12-14T18:17:48Z",
    "updated_at": "2023-03-28T13:47:18Z"
  },
  {
    "state": "closed",
    "title": "Add meta information to ast nodes in `tlb-parser` ",
    "body": "### Summary\n\nWe need to add meta things to nodes in `tlb` parser, like:\n- parents\n- locations\n- `ast.walk` function\n\nThis is a follow up to https://github.com/ton-society/ton-footsteps/issues/89\n\n### Context\n\n_No response_\n\n### Goals\n\n- Provide an API to report errors in the future\n- Provide an API to traverse ast tree\n\n### Deliverables\n\nPublished PR with the changes\n\n### Definition of Done\n\n- [ ] PR is merged after successful CI\n\n### Reward\n\n* 1000$ worth of TON on the moment of footstep completion.",
    "created_at": "2022-12-13T15:37:52Z",
    "updated_at": "2022-12-29T17:42:27Z"
  },
  {
    "state": "open",
    "title": "\u0420\u040ereating a massive open online course \"Blockchain intro with examples on the TON ecosystem\". Step 1: Course Concept and Learning Outcomes",
    "body": " Creating a massive open online course \"Blockchain intro with examples on the TON ecosystem\". Step 1: Course Concept and Learning Outcomes",
    "created_at": "2022-12-12T20:13:26Z",
    "updated_at": "2023-01-07T21:10:26Z"
  },
  {
    "state": "closed",
    "title": "Create typed AST nodes for `tlb-parser` project",
    "body": "Close #89",
    "created_at": "2022-12-12T12:21:45Z",
    "updated_at": "2022-12-17T06:23:44Z"
  },
  {
    "state": "closed",
    "title": "Create typed AST nodes for `tlb-parser` project",
    "body": "### Summary\n\n- After #70 we need to add `AST` nodes we parse our code into\n- They should be semantic and type-safe\n\n### Context\n\n_No response_\n\n### Goals\n\n- Rewrite grammar 5 times to be semantic and compatible with `ohmjs` own parser and `semantics`' actions\n- Read all the C++ source code at least 10 times to figure out how it really works\n- Figure out all bizzare rules there are depending on a global state and specific values\n- Write test cases for all the corner cases\n- Ensure error message are at least some-what correct\n- Find any `tlbc` binary that even works to test real `tlb` definitions\n- Design and create semantic and type-safe structures that will match `tlb` spec, oh wait there's no spec!!! So, good luck with the design\n- Write parser from the intermediate representation into tlb's ast\n- Try to stay sane in the process\n\n### Deliverables\n\n- Code at github.com/ton-community/tlb-parser\n\n### Definition of Done\n\n- [x] PR is merged\n\n### Reward\n\n2000$ worth of TON on the moment of footstep completion. ",
    "created_at": "2022-12-12T11:03:18Z",
    "updated_at": "2022-12-17T06:23:45Z"
  },
  {
    "state": "open",
    "title": "Neovim syntax highlighting for FunC",
    "body": "### Summary\n\nAdd syntax highlighting for FunC to Neovim.\n\n### Context\n\n[Neovim](https://neovim.io/) is a fork of the venerable text editor Vim.\nIt is a popular editor among many developers and is used by some Unix distributions as their default editor.\n\n### Goals\n\n- Add syntax highlighting for FunC to Neovim.\n\n### Deliverables\n\n* Submit parser with at least highlight query file to [nvim-treesitter](https://github.com/nvim-treesitter/nvim-treesitter) repository\n\n### Definition of Done\n\n- [ ] FunC available in the [Supported languages](https://github.com/nvim-treesitter/nvim-treesitter#supported-languages)\n\n### Reward\n * Standard TON Footstep NFT\n * 250$ in TON equivalent",
    "created_at": "2022-12-10T17:59:41Z",
    "updated_at": "2023-05-15T19:15:28Z"
  },
  {
    "state": "closed",
    "title": "How to build an App as a NFT",
    "body": "### Summary\n\nToday we lack examples of how to create NFT from the first point to the end using essential infrastructure tools provided by the TON Community and the blockchain community. That's why we need to make tutorials based on inspiring examples with popular technologies.\n\n![image](https://user-images.githubusercontent.com/5148967/206681746-c3707b14-c00d-4f81-bfbb-143238c1fe1a.png)\n\n### Context\n\nI saw an example of building an NFT JS Application in OpenSea using Polygon and Pinata:\n* https://medium.com/pinata/how-to-build-an-app-nft-7c57b51698e7\n\nIt would be nice to have something like this for the TON Blockchain, as in the future, TON wants to focus on WebApps.\n\n### Goals\n\n* As TON Storage is still in development, we could use Pinata as an IPFS provider example\n* Polygon must be changed to TON Blockchain with the relevant SDK (ton.js, tonapi.io, GetGems NFT smart contracts)\n* Instead of OpenSea, you will use GetGems marketplace as the most popular gateway for NFTs\n\nFinally, you will write a tutorial for developers who want to create something valuable based on TON and NFTs.\n\nPlease, use the [How To Build an App NFT](https://medium.com/pinata/how-to-build-an-app-nft-7c57b51698e7) article as the inspiration for your tutorial.\n\n### Deliverables\n\n* [ ] Described _why it's necessary to create such a thing_, as author did in the example provided\n* [ ] Tutorial article \"How To Build an App NFT\" using Pinata, TON and GetGems is ready\n* [ ] Article located at the TON Documentation in the Tutorials section\n* [ ] Article approved by @SwiftAdviser by complying \"[Tutorial styling guidelines](https://ton.org/docs/contribute/guidelines)\" ([example #1](https://ton.org/docs/develop/dapps/tutorials/jetton-minter), [example #2](https://ton.org/docs/develop/dapps/tutorials/how-to-run-ton-site), [example #3](https://ton.org/docs/develop/dapps/tutorials/accept-payments-in-a-telegram-bot-js))\n\n\n### Definition of Done\n\n* [ ] Tutorial created\n* [ ] Tutorial fits \"[Tutorial styling guidelines](https://ton.org/docs/contribute/guidelines)\"\n* [ ] Tutorial released at the TON Documentation\n\n### Reward\n\n* Standard TON Footstep NFT\n* 500 USDT",
    "created_at": "2022-12-09T10:28:06Z",
    "updated_at": "2023-02-18T10:41:20Z"
  },
  {
    "state": "closed",
    "title": "Rewrite multisig wallet scripts from `.fif` to TypeScript and integrate to the `ton.js` SDK",
    "body": "### Summary\n\nMultisig wallet is an essential instrument for DAOs, funds, DEXes, communities, and even small partnerships.\n\nWhile the TON Ecosystem's goal is to reach mass adoption, it's pretty hard to attract partners from other chains without clear instructions on how to use a multi-sig wallet easily.\n\nBy this footstep, I dare you to become a game-changer for future partners coming to TON.\n\n### Context\n\n## Where we are\n\nNowadays, we already have the following:\n- [Standard multi-signature wallet smart contract](https://github.com/ton-blockchain/multisig-contract) with fift scripts to use it\n- [Step-by-step tutorial on how to create multi-sig contract](https://ton.org/docs/develop/smart-contracts/tutorials/multisig)\n\n## What do we need\n\n<img width=\"999\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/206643802-56f9f69e-7a16-42d7-b4a4-27b6ac5a5ed7.png\">\n\n\nEven with these 2 tools, it's still pretty hard to understand why we need so many files, especially for everyone who comes to TON and is scared by the power of the Fift language.\n\nThat's why we should rewrite all the tools from Fift to the TypeScript language. This will allow more automation with ton.js SDK. \n\n### Goals\n\n* Make a multi-sig wallet an essential instrument for every community at TON\n\n### Deliverables\n\n* Rewrite to TypeScript every `.fif` file in \"Standard multi-signature wallet smart contract\"\n* Add a documentation README file with examples of how to use such scripts\n* Add support for the [`ton.js` SDK](https://github.com/ton-core/ton) to improve future integration to the DApps\n\n\n### Definition of Done\n\n* [x] Every `.fif` file covered by TypeScript analog\n* [x] Project is covered with tests\n* [x] README file which covers every file with relevant example\n* [x] Added support of multi-sig wallets to the `ton.js` SDK\n* [x] Special category in TON Documentation for Multisig Documentation in the \"Participate\" section\n\n### Reward\n\n* Standard TON Footstep NFT\n* 3000 USD in TON equivalent",
    "created_at": "2022-12-09T07:09:16Z",
    "updated_at": "2023-03-03T16:06:19Z"
  },
  {
    "state": "closed",
    "title": "Dashboard with essential TON Blockchain activity for non-technical user",
    "body": "### Summary\n\nNowadays, we have only one dashboard made for non-developers ([tonmon.xyz](https://tonmon.xyz/)). But even tonmon.xyz, it's more focused on pretty technical stuff and doesn't answer the question \"How active TON network right now?\" for the usual users of TON Blockchain.\n\nWe need to change something here.\n\n\n\n### Context\n\nSuppose we want to create something attractive for the people from the community (or even for the future community members!) who want to see the network activity, first of all.\n\nIn that case, we need to create a transparent statistics page with understandable metrics for everyone or with metrics about which one could read more on the same page.\n\n<img width=\"1422\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/206624514-0617fb07-d2f4-4727-ad65-a66cc6a97267.png\">\n\n### Examples\n\nFew examples:\n* https://ultrasound.money/\n* https://coinmarketcap.com/currencies/toncoin/\n* https://github-analysis.vercel.app/dashboard/ethereum\n\n### Source code examples\n\n* By the way, guys from _ultrasound.money_ are OK with sharing their sources to build something eye-catching for TON. ([GitHub sources](https://github.com/ultrasoundmoney))\n* Moreover, here are scripts to get all the metrics from the tonmon.xyz ([GitHub sources](https://github.com/akme/tonmon))\n\n### Questions\n\n**Everyone is welcome to the discussion:**\n* Lack of which metrics have you felt personally for the last month in TON Blockchain?\n* What examples of eye-catching and pretty exciting dashboards for the network activity do you know?\n* Which **non-technical** metrics, from your experience, are essential for the network activity dashboard?\n\n### Example of structure\n\n- Current TON Supply\n- Current TPS\n- TON Gas (TBD)\n- Validators amount & stakes (TBD)\n- Total Value Secured  (TBD)\n- Link to the TON Community Chats (TonDev Chat, TONSC chat, TON twitters)\n- QA section (important!)\n\n### Goals\n\n* Discuss and decide what metrics are essential for the TON Network activity from the usual user side\n* Decide a final structure of the dashboard with network activity\n* Create an eye-catching meme dashboard (make a fork of [ultrasound.money](https://ultrasound.money/) based on their [GitHub](https://github.com/ultrasoundmoney)) with essential metrics that could be shared with people outside of TON to inspire them to go deeper into the TON Blockchain\n\n\n### Deliverables\n\n* [ ] Create an eye-catching meme dashboard fork of [ultrasound.money](https://ultrasound.money/) with essential metrics that could be shared with people outside of TON to inspire them to go deeper into the TON Blockchain\n\n### Definition of Done\n\n* [ ] Open-source code of [ultrasound.money fork](https://github.com/ultrasoundmoney) adopted for TON provided here\n* [ ] Dashboard launched, works 24/7, and is ready to promote through the TON Community channels\n\n### Reward\n\n* Standard TON Footstep NFT\n* Amount of TON (TBD)",
    "created_at": "2022-12-09T04:44:53Z",
    "updated_at": "2022-12-14T07:00:38Z"
  },
  {
    "state": "open",
    "title": "Coursera FunC Course",
    "body": "### Summary\n\nA complete, structured and easily perceived online course with a description of the TON blockchain architecture, syntax of the FunC smart contract language, an overview of available tools for developers and examples of working smart contracts.\n\nContent sections:\n1) Introduction to TON\n2) Smartcontracts\n3) Understanding smart contract development lifecycle\n4) Testing smart contracts\n5) Frontend interaction with TON\n6) NFT & Jettons\n7) Security\n8) Ecosystem products, future plans and vision\n\nPractical tasks for each section in the form of quizzes and tasks by code\n\n### Context\n\nAt the moment, there is no step-by-step course capable of immersing a newcomer developer in the features of TON blockchain smart contracts and giving him accessible tools.\n\n**Our team:** \n_Liza Cherniagina_ - MIPT graduate, made ICPC training event, hackathons on deep learning and bioinformatics, ex-Russian Venture Company, ex-Investmnent Director at Angelsdeck.com, founder of web3 studio LANDAO.\n\n_Mark Okhman_ - dev at Ton Whales team, co-founder of TON&Co., producing video tutorials on TON programming [youtube channel](https://www.youtube.com/@markokhman).\n\n_Danila Vinogradov_ - MIPT student, made Phystech Business Solutions challenge (gathered 200 teams on tasks from Zerion, Rarible, Curve, P2P validator), made online courses on Solidity & Web3, [youtube channel](https://www.youtube.com/@phystechbusinesssolutions9043) with web3 founders interviews.\n\n### Goals\n\nCreate a complete step-by-step course (~39 lessons according to the standard \u0420\u040eoursera) that can teach a fresh developer how to develop smart contracts on FunC\n\nThe course should contain both lectures&materials and practice in the form of tests and programming tasks\n\nMake the course open and visible to the involvement of thousands of developers from around the world into progressive TON ecosystem\n\nReferences:\nhttps://www.coursera.org/learn/crypto\n\n\n### Deliverables\n\nStep 1. The course program, the list of speakers, the production plan.\n\nStep 2. Custdev & details of the course program. Scripts, presentations, design and plan for shooting 2 sections.\n\nStep 3. Shooting and production of 2 sections, development of quizzes and tasks by code. Preparation of scripts, presentations and a shooting plan for 4 sections.\n\nStep 4. Shooting and production of 4 sections, development of quizzes and tasks by code. Preparation of scripts, presentations and a shooting plan for 2 sections.\n\nStep 5. Shooting and production of 2 sections, development of quizzes on them.\n\n### Definition of Done\n\nCourse is produced and posted on the educational platform. Lectures and practical tasks are available for everyone\n\n### Reward\n\nStep 1: 9,000 USD (in TON)\nStep 2: 9,000 USD (in TON)\nStep 3: 20,000 USD (in TON)\nStep 4: 20,000 USD (in TON)\nStep 5: 12,000 USD (in TON)",
    "created_at": "2022-12-02T18:18:48Z",
    "updated_at": "2023-05-15T19:14:44Z"
  },
  {
    "state": "open",
    "title": "Creating a massive open online course \"Blockchain intro with examples on the TON ecosystem\". Step 1: Course Concept and Learning Outcomes",
    "body": "### Summary\n\nWe propose to create the massive open online course (MOOC) that will allow audience with technical background to deep into blockchain technology with the TON ecosystem overview. Course is supposed to be uploaded to the world famous learning platforms such as Coursera and edX.\nMoreover, tens of thousands of people are expected to be educated at the same time. This enables them to involve more contributors to the ecosystem development and spread awareness of this technology as well. Work on the course creation is quite complicated and consists of several consistent steps.\nWe start working on development of the course with stakeholders. At this stage, stakeholders' requirements will be collected, course description and learning outcomes will be determined\n\n### Context\n\nThe first  stage is needed to collect the requirements from stakeholders, determine the learning outcomes and scope for implementation the project as well. Learning outcomes are related to receiving experience of using ecosystem services to get TON-ecosystem ready\n\n### Goals\n\n1. \u0420\u040eollect stakeholders' requirements for the course \n2. \u0420\u040ereate a course concept\n\n\n### Deliverables\n\n1. Collected stakeholders' requirements for the course\n2. Created course concept \n\n\n### Definition of Done\n\n1. Stakeholders' requirements\n1.1 Target audience has been determined (clear for whom we are doing the course, what is the problem)\n1.2 Appropriate format has been selected\n1.3 Requirements for the level of learners' preparation have been collected\n2. Course concept\n2.1 \u0420\u040eompliance with stakeholders' requirements has been achieved\n2.2 Learning outcomes have been determined\n2.3 Parts of the learning environment and duration of the course have been indicated\n2.4 Types of practical assignments have been suggested\n\n\n### Reward\n\nFootstep is proposed to be funded from a general TON DevRel budget, not Footsteps one\n$7000",
    "created_at": "2022-12-02T15:49:08Z",
    "updated_at": "2023-05-15T19:15:44Z"
  },
  {
    "state": "closed",
    "title": "NFT Sales for Jettons contract",
    "body": "#67\n\nhttps://github.com/dvlkv/nft-jetton-sale-smc",
    "created_at": "2022-11-27T21:48:29Z",
    "updated_at": "2022-12-01T21:16:15Z"
  },
  {
    "state": "closed",
    "title": "Add toncoin to trust wallet core",
    "body": "### Summary\n\nIntegrate TON blockchain into trust wallet core. https://github.com/trustwallet/wallet-core\n\n\n\n### Context\n\nThere are 10 million downloads of trust wallet. These are the users that may be interested in toncoin, but not holding it yet. This is not the only app that uses wallet-core. Projects that are using wallet-core are trust wallet, coinpaprika, IFWallet, Alice, crypto.com, frontier, belko, pumapay. Also the project is valuable for people who hold toncoin and other cryptocurrencies, but would like to hold everything in single wallet on native blockchains. \n\nAdding toncoin to wallet-core will enable projects that use it, integrate it faster\n\n### Goals\n\nThe problem addressed is having toncoin on different wallets used by people.\nThe success metric for the project is merged pull request in wallet-core repository\nhttps://github.com/trustwallet/wallet-core\n\nThere should be ability to receive and send toncoin\n\n### Deliverables\n\nContribution guide to support new blockchain in trust wallet is written here\nhttps://developer.trustwallet.com/wallet-core/newblockchain#overview\nThere is already an everscale support which can be used as a reference https://github.com/trustwallet/wallet-core/pull/2428 However there are differences between everscale and toncoin from ton foundation as the projects develop independently.\n\nWhat needs to be done:\n\n - Highlight common code for Ton and Everscale in a separate entity\n - Change the everscale code so that it uses the common code and makes sure everything works\n - Write code for ton\n - Check and fix the performance on the tone:\n   - Parsing serialization and deserialization addresses (address.cpp)\n   - Cell, cell slice, cell builder\n   - Getting an address from a wallet (purse) code\n   - Serialization and dereserialization of transfer messages (signer)\n - Add to registry, generate code and write for this test:\n   - Add the coin definition to registry.json.\n   - Execute codegen/bin/newcoin <coinid>.\n   - Execute tools/generate files.\n   - Add a coin manager to src/Coin.cpp.\n   - Create tests in the file tests/Xxx/TWCoinTypeTests.cpp.\n - Add C interface to src/interface\n - Write tests\n   - Getting an address phrase from a seed\n   - Mainnet signature tests\n   - Tests for TWAnyAddress and TWAnySigner in the interface\n   - Generate code for ios and android and crash (apparently there may be problems) and write integration tests for this code\n   - Extensive tests in swift and kotlin including the files CoinAddressDerivationTests.cpp, CoinAddressValidationTests.cpp, TWHRPTests.cpp, CoinAddressDerivationTests.kt, CoinAddressDerivationTests.swift and others\n - Pass the integration tests, the code review, correct the comments and merge the pull request\n\n\n\n### Definition of Done\n\n - [x] Merged pull request with Toncoin integration to https://github.com/trustwallet/wallet-core\n\n### Reward\n\nStandard Footstep NFT\n4250 USDT equivalent",
    "created_at": "2022-11-25T11:32:28Z",
    "updated_at": "2023-01-16T07:18:06Z"
  },
  {
    "state": "closed",
    "title": "Footstep: Add toncoin to trust wallet assets",
    "body": "Merged prs: \nhttps://github.com/trustwallet/assets/pull/23209\nhttps://github.com/trustwallet/assets/pull/22828\nhttps://github.com/trustwallet/assets/pull/22801\nFootstep: https://github.com/ton-society/ton-footsteps/issues/56\nToncoin address: `EQDk0rRqwtKw34r0fecUO6YotwKfMPU9XIxwrfjOfX9BIUx_`\nResults achieved: updated information about toncoin in trust wallet assets\n",
    "created_at": "2022-11-25T10:55:43Z",
    "updated_at": "2022-12-01T08:24:15Z"
  },
  {
    "state": "open",
    "title": "Deterministic subaccounts",
    "body": "### Summary\n\nThis proposal introduces a standard way to create privacy-preserving subaccounts for a given _wallet seed_ (aka _mnemonic_).\n\nSubaccounts are created using a mix of a mnemonic + account number. This means the resulting public keys and wallet addresses are indistinguishable from random.\n\n#### Gist\n\nThis is the current implementation of the mnemonic-to-seed conversion.\n\n```\n  ...\n  const entropy = await mnemonicToEntropy(mnemonicArray, password);\n  const seed_level0 = await pbkdf2Sha512(entropy, 'TON default seed', PBKDF_ITERATIONS);\n  ... // Ed25519 key generation\n```\n\nWe propose subaccounts as a recursive definition of 512-bit string into 512-bit string:\n\n```\nseed_level_1 = await pbkdf2Sha512(seed_level0, account_label, 1);\n... // further derivation OR Ed25519 key generation\n```\n\nAs a convention, account label must be a monotonically growing integer to make on-chain discovery of the used accounts easy when restoring a wallet from the seed. The author of the spec should choose a sensible encoding for that integer (e.g. 32bit LE)\n\n#### Limitations\n\nComparing to Bitcoin, this is a subset of [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) aimed at _hardened_ keys only. \n\nEd25519 is notoriously a non-linear protocol, so creating a non-hardened version is going to be [quite annoying](https://input-output-hk.github.io/adrestia/static/Ed25519_BIP.pdf). Also, we don't really need this in TON at this moment because a lot of applications are built around the idea of reusing the wallet address and breaking away from this model is going to be a giant PITA.\n\n### Context\n\nUsers who manage a number of assets for different purposes need to generate multiple wallets and switch between them. Each time a new wallet is generated, it needs to be backed up separately. We need a solution that lets create multiple independent wallets as _subaccounts_ without redoing the work of backing things up.\n\n\n### Goals\n\nThis proposal improves usability and privacy of multi-wallet scenarios for all TON users.\n\n### Deliverables\n\n* A specification;\n* Reference implementation in JS / TypeScript;\n* Possibly implementations in Go, Kotlin and Swift.\n\n### Definition of Done\n\n- [ ] TEP created\n- [ ] Tonweb-mnemonic or tonweb / ton-x extended with support for subaccounts\n\nWe should consider extensions to Go, Kotlin, and Swift libraries as well.\n\n### Reward\n\n* 2500$ in TON equivalent\n* Standard TON Footsteps NFT",
    "created_at": "2022-11-22T19:26:24Z",
    "updated_at": "2023-03-23T21:58:45Z"
  },
  {
    "state": "closed",
    "title": "Tutorial: How to run TON Site",
    "body": "PR for #74 ",
    "created_at": "2022-11-16T11:23:00Z",
    "updated_at": "2022-11-16T13:58:25Z"
  },
  {
    "state": "closed",
    "title": "Tutorial: Your First Telegram WebApp",
    "body": "### Summary\n\nCover the process of creating a simple Telegram WebApp that retrieves some information from the TON blockchain.\n\nThis tutorial was requested by ton.org/docs:\nhttps://github.com/ton-community/ton-docs/issues/20\n\n### Context\n\nCurrently there are no simple and understandable tutorials for creating web apps in docs.\nIt may be too difficult for beginners to create their first web app interacting with the TON blockchain.\n\n### Goals\n\nCover the process of creating a simple Telegram WebApp that retrieves some information from the TON blockchain\n\n * Describe the process of creating the bot and WebApp in Telegram\n * Create a meaningful goal for the end user to be interested in finishing tutorial\n * Use ready-to-use libraries for TWA ([tonstarter-twa](https://github.com/ton-defi-org/tonstarter-twa) or [twa-dev/boilerplate](https://github.com/twa-dev/Boilerplate))\n * Describe the process of receiving the first information from the blockchain with one of the SDKs\n\n### Deliverables\n\n * Example web app\n * Tutorial covering how to create such web app\n\n### Definition of Done\n\n * [ ] Ready tutorial for ton.org/docs\n * [ ] PR accepted in ton-docs repository\n\n### Reward\n\n * Standard TON Footstep NFT\n * 750$ in TON equivalent",
    "created_at": "2022-11-13T15:47:16Z",
    "updated_at": "2023-02-01T09:31:25Z"
  },
  {
    "state": "closed",
    "title": "\"How to open any TON Site\" article covered",
    "body": "PR for #75 ",
    "created_at": "2022-11-12T12:48:27Z",
    "updated_at": "2022-11-18T09:50:45Z"
  },
  {
    "state": "closed",
    "title": "Cover \"How to open any TON Site\" article",
    "body": "### Summary\n\nCover all the methods of browsing TON Sites:\n * ton.run\n * Browser extensions\n * Connect to a public proxy through device settings\n * Run your own proxy\nExplain their pros and cons, provide useful links.\n\n### Context\n\nCurrently, there are no such article on Tonspace or any other source. Users can't easily find information about connecting to TON Proxy and browsing TON Sites.\n\n### Goals\n\n * Cover \"How to open any TON Site\" article\n\n### Deliverables\n\n * Ready article for tonspace.co\n\n### Definition of Done\n\n * [x] \"How to open any TON Site\" article covered\n * [x] PR accepted in tonspace.co repository\n\n### Reward\n\n * Standard TON Footstep NFT\n * 100 TON",
    "created_at": "2022-11-11T15:26:34Z",
    "updated_at": "2022-11-17T06:26:33Z"
  },
  {
    "state": "closed",
    "title": "Tutorial: How to run TON Site",
    "body": "### Summary\n\nExplain to a new user in details how to run a TON Site from scratch.\nTutorial must cover these topics:\n * How to run using Docker\n * How to run by compiling from sources manually\n * How to link website with TON DNS Domain\n\n### Context\n\nCurrently, there are no detailed tutorials about running TON Sites. Many devs are asking questions in chats and forums because they are having some problems with running the site.\n\n### Goals\n\n * Write \"How to run TON Site\" tutorial\n\n### Deliverables\n\n * Ready tutorial for tonspace.co\n\n### Definition of Done\n\n * [x] \"How to run TON Site\" tutorial is completed\n * [x] PR accepted in tonspace.co repository\n\n### Reward\n\n * Standard TON Footstep NFT\n * 200 TON",
    "created_at": "2022-11-10T20:19:24Z",
    "updated_at": "2022-11-16T13:58:42Z"
  },
  {
    "state": "open",
    "title": "Authorized-Controllable Tokens",
    "body": "### Summary\n\nTokens that can be controlled by multiple parties without listing all those parties in token's contract (to decrease fees.\n\n### Context\n\nThere are cases when the right of controlling NFT or jettons has to be granted to some smart-contract, but logically the token owner remains same. For example, in P2P exchanges without intermediaries people may wish to transfer their tokens not instantly but with some delay; in this case they may schedule a message on timer, but then they need to make token trust the timer. Transferring tokens to timer's contract is not safe because if timer breaks, token will become inaccessible.\n\n### Goals\n\nI propose to create a new standard: ACT. Token owner would send an authorization message (its structure needs to be decided) to smart-contract he allows to control the token; when that smart-contract needs to send a message to token, it sends it along with Merkle proof of existence of that authorization message.\n\n### Deliverables\n\n- [ ] create format of authorization and deauthorization messages\n- [ ] decide how authorized contract would create Merkle proof\n- [ ] solve problems with Merkle proof creating in FunC, possibly write a documentation page for that\n- [ ] create sample AC (_authorized-controllable_) NFT\n- [ ] create sample AC jetton\n- [ ] propose a TEP\n\n### Definition of Done\n\n- [ ] TEP created\n- [ ] TEP merged\n- [ ] A jetton or any NFT in mainnet is _authorized-controllable_\n\n### Reward\n\n- Standard TON Footstep NFT\n- (to be decided)",
    "created_at": "2022-11-09T14:14:47Z",
    "updated_at": "2022-11-17T11:35:13Z"
  },
  {
    "state": "closed",
    "title": "Examples: How to recieve payments in a Telegram bot written in JavaSc\u0432\u0402\u00a6",
    "body": "PR for #58 ",
    "created_at": "2022-11-08T21:21:53Z",
    "updated_at": "2022-11-09T15:07:26Z"
  },
  {
    "state": "closed",
    "title": "TON Timer",
    "body": "### Summary\n\nTimer smart-contract built natively on TON _without any external messaging_ that will allow users of The Open Network to schedule messages to some time in future.\n\n### Context\n\nThis service can be used by NFT creators to run presales and auctions reliably, or by DAOs wishing to conduct some elections or collect votes on a proposal (limiting token holders' time to vote but not forcing everyone to make decision).\n\nProgram sending external messages can break at any time (for example, if network connection is lost); this timer is going to work as long as TON itself.\n\nThere will be possibility to deploy one's own timer contract - for example, for purposes of debugging message chains (so others' messages don't fill up transactions list), or if other contracts almost run out of gas when trying to process messages. As the deployer is the one filling up contract's balance, ones who join the existing timer give that person a small reward.\n\n### Goals\n\nAllow TON users to schedule arbitrary messages to some time in future.\n\n### Deliverables\n\n- [x] Simple scheduler contract (storing all messages in single contract; similar to https://github.com/EmelyanenkoK/ton_scheduler, but written myself) able to transfer user-specified amount of TON with arbitrary payload, pausing when it doesn't have any messages remaining\n  `EQDpVsvhlIxDGO3qZtPfrChaiKzlkVt6Rs-6J4Xd8BKIgQK7`\n  `schedule#_ fwd_nton:uint64 time:uint32 dest:^MsgAddressInt body:^Any = Msg;`\n- [x] Purchasing domain for timer (`stabletimer.ton` on mainnet)\n- [x] Implementing multi-message timer with ability to schedule several messages to a single moment of time\n- [x] Implementing algorithm for price calculation (that is, storage fee, scheduling cost and reward to the bell deployer)\n- [x] Web UI for interacting with existing timers and deploying new ones\n\n### Definition of Done\n\n- [x] Timer source code published and possibly transferred to TON repository\n- [x] Example timer deployed and working (no messages handled incorrectly because of timer bugs within 3 days of launch)\n- [x] Web interface for scheduling messages available\n- [x] ~~Integration/ability to construct common messages like token transfers/ability to parse ton:// transfer link and convert that into message to timer~~ (usually ton://transfer links care about sender; token transfers do so even more so they can't be controlled by timer)\n\n### Reward\n\n- Standard TON Footstep NFT\n- $2000 in TON equivalent",
    "created_at": "2022-11-07T04:52:05Z",
    "updated_at": "2023-06-08T17:50:49Z"
  },
  {
    "state": "closed",
    "title": "Adds PEG parser for TLB",
    "body": "Implementation: https://github.com/sobolevn/tlb-parser\nCloses https://github.com/ton-society/ton-footsteps/issues/59",
    "created_at": "2022-11-06T17:46:28Z",
    "updated_at": "2022-11-09T15:08:13Z"
  },
  {
    "state": "closed",
    "title": "\"Wallet Contracts\" article covered",
    "body": "PR for #63 ",
    "created_at": "2022-11-03T12:00:51Z",
    "updated_at": "2022-11-09T15:09:12Z"
  },
  {
    "state": "closed",
    "title": "Mint a Fungible Token (Jetton)",
    "body": "PR for #66\n\n",
    "created_at": "2022-11-03T10:51:05Z",
    "updated_at": "2022-11-09T15:09:52Z"
  },
  {
    "state": "closed",
    "title": "NFT Sales for Jettons contract",
    "body": "### Summary\n\nDevelop smart contract for selling NFT's for Jettons\n\n### Context\n\nCurrently only smart-contract for NFT sales by TON's are available.\nSince we already have standard for custom tokens on the network (Jettons) it would be great to develop smart contracts to allow users to buy NFT's for Jettons.\n\n\n\n\n### Goals\n\n- develop smart contract that allows to sell NFT's for Jettons\n\n### Deliverables\n\n- contract itself\n- tests\n- docs\n\nYou can find detailed technical description here: https://telegra.ph/NFT-Sales-for-Jettons-contract-Product-Description--Technical-requirements-10-21\n\nNote: this grand is funded by Getgems\n\n### Definition of Done\n\n- NFT marketplaces on TON are able to implement NFT sales for Jettons using this contract\n\n### Reward\n\n2800 TON",
    "created_at": "2022-11-02T18:36:39Z",
    "updated_at": "2022-12-01T21:18:10Z"
  },
  {
    "state": "closed",
    "title": "Tutorial - Mint a Fungible Token (Jetton)",
    "body": "### Summary\nCover the process of minting a fungible token on TON for new developers in the ecosystem.\n\n* Describe Jetton Deployer Contracts and how they work\n* Describe Jetton Deployer WebClient and how it works\n* Deploy first tokens by the user of the tutorial\n* Help to see the user's token balance in his wallet\n\n### Context\n\nI describe in the most detailed and simple way for mastering how to make your own token in the blockchain TON.\nThe description includes a multi-level explanation of the material in different ways of implementation. \n\n### Goals\n\n* Submit an article about creating your token\n\n### Deliverables\n\n* Ready article for tonspace.co\n\n### Definition of Done\n\n - [x] Article \"Mint your first Jetton\" covered\n - [x] PR accepted in tonspace.co repository\n\n### Reward\n\n* Standard TON Footstep NFT\n* 100 TON\n",
    "created_at": "2022-11-02T09:39:19Z",
    "updated_at": "2022-11-09T15:11:18Z"
  },
  {
    "state": "closed",
    "title": "Secure on-chain cheques",
    "body": "### Summary\n\nCreate a service for decentralized on-chain cheques\n\n### Context\n\nCheques are a popular and in-demand feature. People use them every day for different purposes.\nBut the problem is that all existing services for cheques are centralized and usually hosted on Telegram bots. People can't be sure that their coins are safe and nobody from the administration of the service will claim it. Centralization also means that user must hold coins on service's wallet so there are risks of losing funds in case of some hack or attack on a service.\nAnother problem of centralized cheques is that they usually don't work with custom tokens (Jettons or NFTs), or even if they do, the Jetton must be listed on their service in order to be used.\n\nDecentralized and secure cheques built on-chain would solve these problems, while still remaining easy-to-use and cheap.\n\n### Goals\n\n * Come up with the implementation of on-chain cheques\n * Develop smart contract and user-friendly frontend\n\n### Deliverables\n\n * Smart contract for on-chain cheques\n * Front-end for creating and claiming cheques\n\n### Definition of Done\n\n * Any user without knowledge about blockchain can create and claim a cheque using the service\n\n### Reward\n\n * Standard TON Footsteps NFT\n * 2000$ in TON equivalent",
    "created_at": "2022-11-01T11:30:09Z",
    "updated_at": "2023-05-25T17:30:53Z"
  },
  {
    "state": "open",
    "title": "Develop a universally adopted wrapped Toncoin (wTON)",
    "body": "### Summary\n\nWe are developing a wrapped Toncoin (wTON) in a jetton format, which will serve as a universal intermediary for exchanging TON-based jettons (tokens) in any trading pairs on TON-based DEXs, and will be used in other TON-based applications.\n\nOur next (and big) goal is not only to program a wTON smart contract, but to create the wTON everyone is happy with.\n\nThe benefits of a universally adopted wTON (compared to lots of different wTONs, which have been already created and/or will be created in the future) are as follows:\n\n- Consensus of interested participants\n- No financial risks for the end users (e.g. avoid other wTONs which might be scam ones)\n- No ecosystem fragmentation\n- A single standard API and a single standard set of features\n\n\n### Context\n\nImplementation of a wrapped TON contract doesn't require a lot of effort. As a matter of fact, several implementations already exist. The problem is that numerous different wTONs created by different developers bare lots of risks:\n\n- **Financial risks:** there is no guarantee that a particular wTON doesn't hold security vulnerabilities left deliberately or by mistake. Getting security audits and certifications of the same quality for all the many wTONs is unrealistic.\n- **Ecosystem fragmentation and no single API:** this is a real problem for developers who are building products that will have to use a variety of wTONs. Imagine a wallet developer who wants to correctly display the total amount of wTON, including regular and all kinds of wrapped ones.\n- **No parity of features:** each wTON will have its own unique set of features, which will lead to additional hassle with support.\n\nThe solution could be a standard, universally adopted, audited and certified wTON with a set of features that fits the needs of most developers. Of course, it won't prevent creating other wrapped TON contracts, but most likely developers will prefer to use a widely used, universally adopted and community-led wTON if there is one.\n\n\nWe have already implemented these features:\n\n- Wrap/unwrap functionality\n- Conformance to Fungible Token Standard TIP-74\n\n\n### Goals\n\nTo create wrapped Toncoin, which will serve as a universal intermediary for exchanging TON-based jettons (tokens) in any trading pairs on TON-based DEXs, and will be used in other TON-based applications.\n\nOur next (and big) goal is not only to program a wTON smart contract, but to create the wTON everyone is happy with.\n\n### Deliverables\n\nSource code which will include these features:\n- Custom payload for minting/burning transactions.\n- Support for query_id parameter similar to TEP-74.\n- Better gas management via reserves which will allow not to use any hardcoded fees in the code.\n\n### Definition of Done\n\nGitHub repository with the source code.\n\n### Reward\n\n5000$ in TON equivalent",
    "created_at": "2022-10-31T11:35:10Z",
    "updated_at": "2023-05-15T19:18:08Z"
  },
  {
    "state": "closed",
    "title": "Cover \"Wallet Contracts\" article",
    "body": "### Summary\n\nCover which wallet contract types are in the TON Ecosystem and why they exist.\n\n * Cover wallet contract + versions (v2,v3,v4, etc)\n * Cover high-load contract\n * Cover Lockup wallet contract\n * Cover restricted wallet\n\n### Context\n\nCurrently, Wallet contracts article on Tonspace.co is empty\n\n### Goals\n\n * Cover \"Wallet Contracts\" article\n\n### Deliverables\n\n * Ready article for tonspace.co\n\n### Definition of Done\n - [x] \"Wallet Contracts\" article covered\n - [x] PR accepted in tonspace.co repository\n\n### Reward\n * Standard TON Footstep NFT\n * 100 TON",
    "created_at": "2022-10-31T10:02:28Z",
    "updated_at": "2022-11-09T15:11:38Z"
  },
  {
    "state": "closed",
    "title": "\"Explorers\" article covered",
    "body": "PR for #61 ",
    "created_at": "2022-10-28T16:01:36Z",
    "updated_at": "2022-10-28T16:18:21Z"
  },
  {
    "state": "closed",
    "title": "Cover \"Explorers\" article ",
    "body": "### Summary\n\nWrite article about the most famous explorers in the community. Help the new developer decide which explorer is the best for him. At least we need:\n- The best explorer for development\n- The best explorer for everyday use\n- The best explorer to work with NFTs\n\n\n### Context\n\n_No response_\n\n### Goals\n\n- Provide article about explorers\n\n### Deliverables\n\n- Ready article for tonspace.co\n\n### Definition of Done\n\n- [x] Article \"Explorers\" covered\n- [x] PR accepted in tonspace.co repository\n\n### Reward\n\n- Standart TON Footstep NFT\n- 100 TON",
    "created_at": "2022-10-28T15:32:32Z",
    "updated_at": "2022-10-28T16:19:40Z"
  },
  {
    "state": "closed",
    "title": "NFT Tutorial Done",
    "body": "Finished implementation of #7 ",
    "created_at": "2022-10-27T11:04:59Z",
    "updated_at": "2022-10-28T16:12:31Z"
  },
  {
    "state": "closed",
    "title": "Create PEG grammar for TL-B parsing",
    "body": "### Summary\n\nWe need to create a project that can parse `TL-B` files into abtract syntax trees.\n\n### Context\n\nThis is needed for other tools: \n- Code generators\n- Linters\n- etc\n\n### Goals\n\n- [ ] Create a PEG grammar based on `ohm` library\n\n### Deliverables\n\n- [ ] npm package with the full language grammar\n\n### Definition of Done\n\n- [ ] npm package with the working parser is submitted\n\n### Reward\n\n2000$ worth of TON on the moment of footstep completion",
    "created_at": "2022-10-24T21:53:01Z",
    "updated_at": "2022-11-09T15:08:15Z"
  },
  {
    "state": "closed",
    "title": "Examples: How to recieve payments in a Telegram bot written in JavaScript ",
    "body": "### Summary\n\nRepeat #8 but in Node js\n\n### Context\n\nBots are great for providing use cases for TON and we want to encourage people to build more of them. That's why we need a clear tutorial showing how to start accepting payments in TON.\n\n\n\n### Goals\n\n* Provide a deployable example of Telegram bot capable of accepting payments through TON.\n* Make sure code is covered with comments and sufficient documentation is provided for junior developers to handle bot deploy and code reusage.\n* Provide clear instructions on how to switch between mainnet and testnet.\n\n### Deliverables\n\n* repository with bot code and documentation\n* instructions on how to set up and test bot locally\n\n### Definition of Done\n\n[ ] Bot can be run from the code provided in the repository\n[ ] Bot accepts payments on testnet\n[ ] Bot accepts payments on mainnet\n[ ] Article hosted on tonspace\n\n### Reward\n\n* Standard TON Footstep NFT\n* 777 Toncoin",
    "created_at": "2022-10-23T18:03:04Z",
    "updated_at": "2022-11-09T15:11:50Z"
  },
  {
    "state": "open",
    "title": "Jetton migrations (for discoverable jettons and future standard upgrades)",
    "body": "### Summary\n\nProvide a migration path for jettons to new contracts.\n\n### Context\n\n[TEP-89](https://github.com/ton-blockchain/TEPs/blob/master/text/0089-jetton-wallet-discovery.md) introduced discoverable jetton minters.\nThis means that previously deployed jettons are not discoverable and have to deploy an [auxiliary contract](https://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-discovery.fc) for adding such capability.\nWe suggest to support a migration path such that non-discoverable jettons can be migrated to a new (discoverable) minter.\n\nSuch a migration solution will also serve further extensions to the jetton protocol in the future.\n\n#### Suggested Flow\nA migration contract will be deployed such that it is linked to a certain minter contract. \nHolders of the outdated jetton can send their jettons to the migration contract and receive new jettons instead.\n\n### Goals\n\nCome up with a full solution to the migration path, including a contract interface & implementation as well as a UI.\n\n\n### Deliverables\n\n* A PR to jetton.live with UI operating the migration (https://github.com/ton-defi-org/jetton-deployer-webclient)\n* Documentation stating out the solution logic. Attack vectors should be specified and resolved.\n* TL-B schemas for operations and storage\n* Github repo with contract (latest stable func version using latest syntax)\n* Full tests (typescript, sandbox)\n* Full blueprint-style contract wrapper\n* Code for deploying the contract (typescript)\n\n### Technical instructions\n* Compiles under func 0.4.1\n* Uses latest syntax: consts, include and pragma directives\n* Opcodes are CRC32 hashes\n* Gas-efficient\n* 100% Test coverage (using sandbox)\n\n### Definition of Done\n\nThe contract is deployable and provides a migration path between minters\n\n### Reward\n\n5000$ in TON equivalent paid out by these milestones:\n\n* [x] 20% - complete detailed solution documentation specifying logic, interfaces and TL-B schemes.\n* [x] 40% - contract implementation with tests, deployment code\n* [ ] 40% - PR for UI\n\nThis grant is funded by Orbs as part of its ecosystem [grant program](https://www.orbs.com/white-papers/grants/). ",
    "created_at": "2022-10-23T07:37:58Z",
    "updated_at": "2023-05-21T16:05:36Z"
  },
  {
    "state": "closed",
    "title": "Add toncoin to trust wallet assets",
    "body": "### Summary\n\nAdd information about toncoin to trust wallet assets repository https://github.com/trustwallet/assets/tree/master/blockchains\n\n### Context\n\nTrust Wallet assets repository is used to provide information about crypto coins for a large number of applications. Adding toncoin to this repository would allow these applications to use information about toncoin such as website domain, logo, name, symbol, etc.\n\n### Goals\n\nMerge pull request with information about toncoin into trust wallet assets repository\n\n### Deliverables\n\nAn ability to see toncoin in trust wallet assets repository\n\n### Definition of Done\n\n[] Merged pull request with information about toncoin repository in trust wallet\n\n### Reward\n\n* Standard Footstep NFT\n* 200 Ton",
    "created_at": "2022-10-20T22:14:13Z",
    "updated_at": "2022-12-01T10:31:29Z"
  },
  {
    "state": "closed",
    "title": "Verifier registry contract done",
    "body": "PR for #41",
    "created_at": "2022-10-19T13:44:27Z",
    "updated_at": "2022-10-19T15:41:26Z"
  },
  {
    "state": "closed",
    "title": "Mark footstep #53 as completed",
    "body": "Closes #53",
    "created_at": "2022-10-17T18:47:37Z",
    "updated_at": "2022-10-19T15:26:59Z"
  },
  {
    "state": "closed",
    "title": "Add `FunC`, `Fift`, `TL-B` to `prism.js`",
    "body": "### Summary\n\nWe need to add syntax highlight of `Fift`, `FunC`, `TL-B` to `prism.js` so syntax on https://www.tonspace.co/develop/func/overview/ is highlighted.\n\n### Context\n\n_No response_\n\n### Goals\n\n- [x] Add `FunC` highlighter\n- [x] Add `Fift` highlighter\n- [x] Add `TL-B` highlighter\n\n### Deliverables\n\nPR to `prism.js`\n\n### Definition of Done\n\n- [x] PRs are sent\n\nI am not going to commit to get this merged at this point, because, quoting https://github.com/PrismJS/prism\n\n> We are currently working on https://github.com/PrismJS/prism/discussions/3531 and will only accept security-relevant PRs for the time being.\n> Once work on Prism v2 is sufficiently advanced, we will accept PRs again. This will be announced on our [Discussion](https://github.com/PrismJS/prism/discussions) page and mentioned in the https://github.com/PrismJS/prism/discussions/3531.\n\nThere's nothing I can do to get it merged right now. But, I will get this merged after v2 is released.\n\n### Reward\n\n3 * 500$ = 1500$ worth of TON on the moment of footstep completion",
    "created_at": "2022-10-15T19:44:21Z",
    "updated_at": "2022-12-06T15:00:45Z"
  },
  {
    "state": "open",
    "title": "Hardware wallet support",
    "body": "### Summary\n\nAdd TON support to the most popular hardware wallets: [Ledger](https://www.ledger.com/supported-crypto-assets) and [Trezor](https://trezor.io/coins/).\n\n### Context\n\nNon-custodial wallets are extremely important to the ecosystem of any blockchain. In particular, cold wallets such as hardware wallets are fundamental missing pieces for TON.\n\n### Goals\n\nAdding support for Ledger ([open source plugins](https://github.com/LedgerHQ)) and Trezor ([open source wallet](https://wiki.trezor.io/Developers_guide:Contributing)).\n\n### Deliverables\n\nSupport for production-ready hardware wallets.\n\n### Definition of Done\n\n[ ] Updating of official repositories. In the case of Ledger there is already a [working plugin](https://github.com/LedgerHQ/app-ton) written by one of the TON core developers.\n\n### Reward\n\n2500$ in TON equivalent (?)",
    "created_at": "2022-10-11T05:55:21Z",
    "updated_at": "2022-12-26T10:58:03Z"
  },
  {
    "state": "closed",
    "title": "Add TL-B to `highlight.js`",
    "body": "Closes #49",
    "created_at": "2022-10-09T13:35:01Z",
    "updated_at": "2022-10-14T14:33:29Z"
  },
  {
    "state": "closed",
    "title": "Burn NFTs \u0432\u0402\u201d Smart contract",
    "body": "### Summary\n\nSpam is a hard problem to solve. Bad actors are taking advantage of TON's low transaction fees to exploit iconic mechanics of web3, such as NFT airdrops.\n\nThese unwanted NFTs often claim to give users a free gift/NFT if they click a link in the description. Clicking the link leads the users to a site where typically one of two things happen:\n1. Users are asked to approve a transaction to \u0432\u0402\u045amint\u0432\u0402\u045c or \u0432\u0402\u045aclaim\u0432\u0402\u045c a free NFT, but instead they lose their funds.\n2. They are asked to input their seed phrase, which results in a total loss of funds.\n\nThese scams are becoming increasingly more sophisticated. For instance, after a contract address and domain is identified as malicious, scammers can change the metadata of an NFT. It can feel like an endless game of whack-a-mole, but one we\u0432\u0402\u2122re committed to winning.\n\n\n\n### Context\n\nTo remove unwanted wallet spam, simply select the NFT you want to burn in the Collectables Tab, and select the Burn Token.\n\n### Goals\n\nProtect users from unwanted nft spam. And the NFT with a broken smart contract.\n\n### Deliverables\n\nBurn and \"delete\" - Introducing NFT Burning.\n\n### Definition of Done\n\nCreate and integrate Smart contract - Burn NFTs.\n\n### Reward\n\n100-1000 TON from [our team](https://github.com/TegroTON). And up to 250-2500 TON, for integration into the [Uniton wallet](https://github.com/UnitonApp).",
    "created_at": "2022-10-05T00:16:08Z",
    "updated_at": "2022-12-26T11:46:24Z"
  },
  {
    "state": "closed",
    "title": "Add Tlb language to `highlight.js`",
    "body": "### Summary\n\nWe need to add Tlb language support to https://github.com/highlightjs/highlightjs-func\n\n### Context\n\n_No response_\n\n### Goals\n\n- Tlb is highlighted by highlight.js\n- Tlb is autodetected by highlight.js\n\n\n### Deliverables\n\n- `highlight-func` npm package\n\n### Definition of Done\n\n- `highlight-func` npm package released with Tlb support\n\n### Reward\n\n600$ worth of TON on the moment of footstep completion",
    "created_at": "2022-10-04T13:43:37Z",
    "updated_at": "2022-10-14T14:33:30Z"
  },
  {
    "state": "closed",
    "title": "Add `Fift` language to `highlight.js`",
    "body": "Issue: https://github.com/ton-society/ton-footsteps/issues/45\nSource code: https://github.com/highlightjs/highlightjs-func/pull/1",
    "created_at": "2022-10-03T14:40:18Z",
    "updated_at": "2022-10-04T11:35:11Z"
  },
  {
    "state": "closed",
    "title": "FunC, Fift and TL-b lexers for pygments",
    "body": "PR for #40",
    "created_at": "2022-10-03T10:40:57Z",
    "updated_at": "2022-10-03T14:05:23Z"
  },
  {
    "state": "closed",
    "title": "closes issue #37",
    "body": "",
    "created_at": "2022-09-28T18:00:48Z",
    "updated_at": "2022-09-29T17:59:29Z"
  },
  {
    "state": "closed",
    "title": "Add Fift language to `highlight.js`",
    "body": "### Summary\n\nWe need to add Fift language support to https://github.com/highlightjs/highlightjs-func\n\n### Context\n\n_No response_\n\n### Goals\n\n- Fift is highlighted by highlight.js\n- Fift is autodetected by highlight.js\n\n### Deliverables\n\n- `highlight-func` npm package\n\n### Definition of Done\n\n- [x] `highlight-func` npm package released with Fift support\n\n### Reward\n\n- $1000 worth of TON on the moment of footstep completion",
    "created_at": "2022-09-26T19:23:44Z",
    "updated_at": "2022-10-04T13:43:07Z"
  },
  {
    "state": "closed",
    "title": "Add `highlight.js` integration",
    "body": "Closes https://github.com/ton-society/ton-footsteps/issues/42",
    "created_at": "2022-09-23T10:19:50Z",
    "updated_at": "2022-09-23T17:29:07Z"
  },
  {
    "state": "open",
    "title": "Series of videos on TON programming",
    "body": "### Summary\n\nLet's be honest - to get into TON programming is quite a hustle. Documentation is great, but there is lack of hands-on tutorials and \"speaking heads\" when it comes to programming meaningful smartcontracts, NFTs or dApps for TON. I'm on my learning path, but I've decided to walk the extra mile and produce media content from my learning process. I will plan, produce and distribute a series of videos along with text tutorials that will get a new-comer into this programming field. \n\n### Context\n\nI'm quite an experienced developer in classical fields like backend and frontend developments. However, learning to program for TON is quite hard for me. I want to make this much more friendly. I'm also a person who needs to see the whole process end-to-end in order to make the first steps. Recording my footsteps into an organized series of materials can be a great resource for the community.\n\n### Goals\n\n* record a series of tutorial videos with outlining all the moments that are not clear for me in the process\n* organise Q&A sessions with experienced developers and record our conversations to provide new-comers with ready-made answers\n* produce text tutorials based on those videos, to equip those who are more reading type of people\n\n### Deliverables\n\n**Self-onboarding series (currently planning on 10 videos)**\nIn this series of videos, every video will contain a tutorial on a certain topic that I\u0432\u0402\u2122ve recently learned as well as rising the questions that I\u0432\u0402\u2122ve encountered during the learning process. Each tutorial video will be then followed by a Q&A session video with some experienced TON developer from the community, who will answer the questions and guide me further.\nAverage video length - 60-70 mins.\nEvery video tutorial is going to have a text version published on [Medium.com](http://medium.com/)\n\n1. **Environment setup & first \u0432\u0402\u045aHello world\u0432\u0402\u045c smart contract** based on https://github.com/romanovichim/TonFunClessons_Eng \n[Video is already published [https://www.youtube.com/watch?v=RbIt8bjvvjE](https://www.youtube.com/watch?v=RbIt8bjvvjE)]\n    \\+ video Q&A with a pro smart contracts developer\n    [Script is ready. Negotiating a Q&A session with Narek Abovyan from TonTech]\n2. **Programming a simple smartcontract with the tonstarter-contracts (TypeSript) approach**\nIn this video I will program a simple smartcontract and write a number of tests for it.\n     \\+ video Q&A with a pro - Agreed to have a call with Tal Kol as he is an ambassador of this approach.\n3. **Programming a dApp that will interact with a simple smartcontract from browser** [as an example I can provide another video I've published on programming a TonHub extension - [Youtube Link](https://www.youtube.com/watch?v=0guNekn-6z4&t=195s)\n     \\+ video Q&A with a pro \n4. **Programming a ReactNative application that interacts with TON smartcontract**\nThis video is different from 3rd one, because I want to outline that Web3 is not just browser, but can also involve a mobile application. Will be helpfull as I\u0432\u0402\u2122m going to overview known libraries for RN.\n     \\+ video Q&A with a pro\n5. **Setting up own API instance of communicating with TON blockchain.**\n     \\+ video Q&A with a pro\n\nI plan to prepare and publish 1-2 videos per week. So overall project might take 2-3 months to finish.\n\n**Contentful series (currently planning on 5 videos)**\n\nAs oppose to the Self-onboarding series, Contenfull videos are going to be much shorter (20-30 min) and each video is going to cover very focused information on specific topic. The content of this video will be basically a mix of what I\u0432\u0402\u2122ve learned by myself and what I\u0432\u0402\u2122ve learned from pro TON developers during Q&A sessions.\n\n**1. TypeScript vs ton-cli approaches**\nPros & Cons, Resources, Tools\n\n**2. Authentification for dApps**\nTonHub, TonKeeper\n\n**3. Writing tests for TON smartcontracts**\nOutlining the importance of writing the tests, approaches\n\n**4. How to read the TON's whitepaper?**\n    +Why is there so many WPs? Durov\u0432\u0402\u2122s WPs vs Ton Foundation WP\n    +Outlining practical parts of the WP that are required to understand for programing for TON\n    +Outlining core conceptual parts of the WP \n    +Which parts of TON\u0432\u0402\u2122s WP are already implemented and which are yet to come?\n    _**While preparing for this video I will have a series of conversations with experienced crypto folks to make sure my material is not superficial.**_\n    \n**5. Usefull tools, APIs, Resources**\n\n### Definition of Done\n\n15 videos according to topics announced in the Deliverables block, published on YouTube with text versions published on Medium.com and Dev.to\n\n### Reward\n\nI'm setting up an expected reward based on my workload and salary at my main full-time job.\n\nPreparing a single video takes me 1.5-3 days. I make approx. $ 200 / day at my job.\nI think to count for example $300 (in TON equivalent) per video. $300 * 15 videos = $4,500. And of course we divide this by 3 as I'll deliver this over 3 months maximum.\n\nSo I would round it up to 4000 TONs ($5600 if the rate is $1.4/TON) then I could buy a good microphone, webcam and light, to provide a better quality of videos. But I'm open to your offers.\n\nSuggested milestones:\n1. 5 videos by November 1 - $1500\n2. 5 videos by December 1 - $1500\n3. 5 videos by January 1 - $2600\n\nAll the videos will be produced and published in the order according to the list order above.\n",
    "created_at": "2022-09-22T12:43:52Z",
    "updated_at": "2023-05-15T19:19:25Z"
  },
  {
    "state": "closed",
    "title": "Write `FunC` grammar for `highlight.js`",
    "body": "### Summary\n\nWe need to add FunC grammar to highlight.js so we can:\n- Highlight FunC code\n- Autodetect FunC code with some precision\n- Use existing JS ecosystem to do that\n\nLater we can add more languages to the mix.\n\n### Context\n\n_No response_\n\n### Goals\n\n- Provide a way to highlight and autodetect FunC code in JavaScript ecosystem\n\n### Deliverables\n\n- [x] Fully set up repository with grammar / testing / building infrastructure: https://github.com/highlightjs/highlightjs-func\n- [x] NPM package: https://www.npmjs.com/package/highlightjs-func\n\n### Definition of Done\n\n- [x] npm package with custom grammar is published: https://www.npmjs.com/package/highlightjs-func\n\n### Reward\n\n900 TON",
    "created_at": "2022-09-22T09:00:27Z",
    "updated_at": "2023-02-17T16:19:05Z"
  },
  {
    "state": "closed",
    "title": "Verifier Registry smart contract",
    "body": "### Summary\nWrite a smart contract (\"Verifier Registry\") for forwarding signed messages to other contracts\n\n### Context\nWe run computations on off-chain nodes that produce data which needs to be stored on chain in various contracts.\nIn order for these contracts to accept the data, they require it to be signed by the off-chain nodes, each of which has a public/private keypair.\nThe verifier registry holds the list of keypairs and verifies signatures of arbitrary data passed on to the contracts downstream.\n\n#### Flow\n* An entity stakes a certain amount (10K TON) in the verifier registry contract, for which it receives the ability to store its verify configuration (node addresses, public keys for verification, multi-sig threshold)\n* Once the configuration is in place, the entity can send a signed message and an address to forward the message to.\n* The verifier contracts checks the signatures and forwards the message\n\nDetailed spec can be found [in this gist](https://gist.github.com/shaharyakir/75696bcff45b0a93cc5c9d464bf7ee60)\n\n### Goals\nDevelop a smart contract (\"Verifier Registry\") for forwarding signed messages to other contracts\n\n### Deliverables\n* Github repo with contract (func 0.2.0 using latest syntax)\n* Full tests (typescript, tvm-contract-executor)\n* Code for deploying the contract (typescript)\n\n### Definition of Done\nThe contract can be integrated to the Ton Source project (a smart contract that accepts messages only from the verifier registry)\n\n### Reward\n2,000 TON\n\nThis grant is funded by Orbs as part of its ecosystem [grant program](https://www.orbs.com/white-papers/grants/). ",
    "created_at": "2022-09-21T17:13:00Z",
    "updated_at": "2022-12-06T04:47:27Z"
  },
  {
    "state": "closed",
    "title": "Write FunC, Fift and TL-b lexers for pygments",
    "body": "### Summary\n\nImplement TON-specific lexer for [`pygments`](https://pygments.org/docs/lexerdevelopment/), popular python library used for hightlighting syntaxes. This will enable syntax highlighting at [learnxinyminutes](https://learnxinyminutes.com/docs/func/).\n\n### Context\n\n_No response_\n\n### Goals\n\n* FunC, Fift and TL-b are supported in pygments\n* FunC, Fift and TL-b are highlighted at learnxinyminutes & other python-based projects\n\n### Deliverables\n\n* Write pygments lexer for FunC\n* Write lexer for Fift\n* Write Lexer for TL-b\n* Contribute to [pygments](https://github.com/pygments/pygments)\n\n### Definition of Done\n\n[Learn FunC in 15 minutes](https://learnxinyminutes.com/docs/func/) page has a right syntax highlighting with local Pygments & learnxinyminutes repos\n\n### Reward\n\n* 600 TON\n* Standard TON Footstep NFT",
    "created_at": "2022-09-14T16:05:00Z",
    "updated_at": "2022-10-03T14:06:53Z"
  },
  {
    "state": "closed",
    "title": "PR closes #31",
    "body": "",
    "created_at": "2022-09-13T10:13:11Z",
    "updated_at": "2022-09-13T10:18:30Z"
  },
  {
    "state": "closed",
    "title": "TON Installer Tool \u0432\u0402\u201d setup environment on any system in one-line of code",
    "body": "### Summary\n\nTON Dev Chat has many questions and complaints about smart-contract binaries (func, fift, lite-client). On every system binaries need their setup and dependencies to work appropriately (Windows, Debian, Ubuntu, MacOS x86, MacOS arm64). That provides complexity and tons of questions for new developers in the ecosystem and lower conversion to future smart-contracts developers.\n\nTal Kol already simplified the process with [pre-built binaries](https://github.com/ton-defi-org/ton-binaries). But it is still not enough to make your \"first smart contract in one evening\". If TON wants to provide a first-class experience for developers the process should be as simple as possible.\n\nTal Kol's experience could be used to make the releases versioning to split versions of TON binaries used by the one-line installer in the future. But today we could start from the MVP of the one-line installer.\n\n### Context\n\n### Solana\n\nTo resolve this issue, other blockchains already have \"one-line installer\" solutions like [Solana Install Tool](https://docs.solana.com/cli/install-solana-cli-tools#use-solanas-install-tool):\n\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/189650899-0f3c94bb-d3d0-42eb-821f-dfb9cb5edb58.png\">\n\n### Geth\n\nOr [Geth](https://geth.ethereum.org/docs/install-and-build/installing-geth#macos-via-homebrew) for Ethereum:\n\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/189652180-0fe0d9fb-3f9b-46e3-b055-48439450e6fd.png\">\n\n### TON Installer Tool\n\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5148967/189657326-260638f6-49a4-4edd-a202-0d11adf6d7d6.png\">\n\n\n**TON Installer Tool** solution must provide a simple experience for anyone curious about TON and smart-contract development. It must help to avoid a problem where you have many binaries for many versions of OS, which you should update every 3 months!\n\n### Goals\n\n* Provide a **one-step environment setup experience** of TON binaries for every potential smart-contract developer.\n* Gather feedback from developers from the community using different types of systems (macOS, Linux, Windows)\n* Be sure that all works fine by feedback from the community\n\n### Deliverables\n\n* [ ] Create an MVP of a one-line installer for TON binaries from `master` branch of `ton-blockchain`\n* [ ] Make an open-source repository that TON Community could improve in the future\n* [ ] Create installer for macOS x86/arm64\n* [ ] Create installer for Windows x86\n* [ ] Create installer for Linux Debian/Ubuntu (16-22.04)\n* [ ] Test every installer on new developers from the community and fix bugs from feedback\n\n### Definition of Done\n\n* [ ] open-source one-line installer tool working on macOS x86/arm64 operating systems.\n* [ ] open-source one-line installer tool working on Linux Debian/Ubuntu operating systems.\n* [ ] open-source one-line installer tool working on Windows operating systems.\n* [ ] applied one-line install used in onboarding every smart-contract developer (tonspace.co, ton.org/docs)\n\n### Reward\n\n* Standard TON Footstep NFT\n* Amount of TON \u0432\u0402\u201d TBD",
    "created_at": "2022-09-12T12:52:48Z",
    "updated_at": "2023-02-09T11:49:04Z"
  },
  {
    "state": "closed",
    "title": "NFT raffle contract",
    "body": "### Summary\n\nDevelop smart contract for shuffling NFT's\n\n\n### Context\n\nWe want to add some game mechanics to NFT's on TON.\nOne of the things that come up to mind is NFT ruffle mechanics.\n\nBasic mechanics are pretty simple:\n\n- Bob chooses NFT(s) he would play with\n- Alice finds Bob's game on marketplace\n- Alice offers her NFT(s) to Bob\n- One Bob & Alice agree on NFT's game starts\n- Smart contract shuffle's NFT's between Alice & Bob\n\nFYI: this grand is funded by [Getgems](https://getgems.io/) & [TON Frogs NFT](https://t.me/tonfrogs)\n\n\n### Goals\n\n- develop smart contract which allows users shuffle NFT's\n\n### Deliverables\n\n- contract itsels\n- tests\n- docs\n\nDetailed technical requirements could be found here: https://telegra.ph/NFT-raffle-contract-Product-Description--Technical-requirements-09-07\n\n\n\n### Definition of Done\n\n- NFT marketplaces on TON are able to implement NFT shuffle mechanics on top of this contract\n\n### Reward\n\n2000 TON",
    "created_at": "2022-09-09T14:10:50Z",
    "updated_at": "2022-09-29T18:01:39Z"
  },
  {
    "state": "closed",
    "title": "PR for #23 & #32",
    "body": "",
    "created_at": "2022-09-09T10:31:06Z",
    "updated_at": "2022-09-11T06:04:55Z"
  },
  {
    "state": "closed",
    "title": "Library for handling blockchain data",
    "body": "### Summary\n\nLibrary that would be essential for TON projects that need production ready solution to index TON blockchain.\n\n### Context\n\nWhen it comes to working with data from the blockchain and you need a some way to store, parse, subscribe to a blocks, a transactions, a messages then your choices are pretty limited.  \n\nHere's the ways (at least the ones that I found):\n1. Start your own Liteserver\n2. Connect to one of the existing Liteservers\n3. Use one of the free services like [TON HTTP API](https://github.com/toncenter/ton-http-api)  \n\nThe first option is not really an option for most of the developers. Cause you need to run a full node which you need to maintain and infrastructure costs are not cheap.  \nThe second option's major drawback is that you need to trust the Liteserver you're connecting to. And service provider need to scale their infrastructure to support all the users.   \nAnd same goes for the third option. You need to trust the service you're using and service provider need to scale their infrastructure to support all the users.\n\nThat kind of problem faced by a team from [Pagoda Indexer](https://near-indexers.io/) from [NEAR ecosystem](https://near.org/ecosystem).  \n\nAnd they came up with a solution which involves [AWS S3](https://aws.amazon.com/s3/) and consists of a pair of libraries: [NEAR Lake Indexer](https://near-indexers.io/docs/projects/near-lake-indexer) and [NEAR Lake Framework](https://near-indexers.io/docs/projects/near-lake-framework).  \n\n[NEAR Lake Indexer](https://near-indexers.io/docs/projects/near-lake-indexer) is a library that allows you to connect to the blockchain and store the data in [AWS S3](https://aws.amazon.com/s3/).  \n[NEAR Lake Framework](https://near-indexers.io/docs/projects/near-lake-framework) is a library companion to [NEAR Lake Indexer](https://near-indexers.io/docs/projects/near-lake-indexer) that allows you to connect to the [AWS S3](https://aws.amazon.com/s3/) and parse the data.\n\nWhat got me interested in this solution is that availability is handled by [AWS S3](https://aws.amazon.com/s3/) and with [Requester Pays option](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RequesterPaysExamples.html) cost would be fixated for the provider and end users by would pay by themselves for the data they're using.\n\n### Goals\n\n* Provide a fundamental library for future (or existing) TON projects that would need to store and parse blockchain data\n\n### Deliverables\n\n* Create a library that would allow to connect to the blockchain (Liteserver) and store the data in [AWS S3](https://aws.amazon.com/s3/).\n* Create a library that would allow to connect to the [AWS S3](https://aws.amazon.com/s3/) and fetch the data\n\n### Definition of Done\n\n[] TON Lake Indexer, which meets the goal requirement and open source  \n[] TON Lake Framework (Rust version), which meets the goal requirement, open source and crate available on [crates.io: Rust Packages Registry](https://crates.io/)  \n[] TON Lake Framework (JS/TS version), which meets the goal requirement, open source and package available on [npm](https://www.npmjs.com/)\n\n### Reward\n\n* Standard TON Footstep NFT\n* 7000 TON",
    "created_at": "2022-09-06T09:29:29Z",
    "updated_at": "2023-04-05T13:22:04Z"
  },
  {
    "state": "closed",
    "title": "Examples: How to recieve payments in a Telegram bot",
    "body": "PR for https://github.com/ton-society/ton-footsteps/issues/8",
    "created_at": "2022-08-30T11:44:09Z",
    "updated_at": "2022-08-30T16:59:55Z"
  },
  {
    "state": "closed",
    "title": "VS Code Extension for FunC",
    "body": "PR for #18",
    "created_at": "2022-08-29T17:25:50Z",
    "updated_at": "2022-08-30T16:55:09Z"
  },
  {
    "state": "closed",
    "title": "NFT Swap Contract ",
    "body": "### Summary\n\nDevelop smart-contract for swapping NFT's\n\n\n### Context\n\nSometimes users don\u0432\u0402\u2122t want to sell their NFT but are ready to exchange it for other NFT(s).\nThis is exactly what we want to achieve here.\n\nFYI: this grand is funded by [Getgems](https://getgems.io) & Tegro NFT\n\n### Goals\n\n- develop smart contract which allows users to swap their NFT's\n\n### Deliverables\n\n- contract itsels\n- tests\n- docs\n\nTechnical requirements could be found here: https://telegra.ph/NFT-swap-Contract-Product-Description--Technical-requirements-08-24\n\n### Definition of Done\n\n- NFT marketplaces on TON are able to implement NFT swap mechanics on top of this contract\n\n### Reward\n\n2000 TON",
    "created_at": "2022-08-29T14:48:18Z",
    "updated_at": "2022-09-11T06:06:52Z"
  },
  {
    "state": "closed",
    "title": "Improve onboarding experience for new smart contract developers",
    "body": "### Summary\n\n### Survivorship bias problem\n\nRight now, we have a big problem with newcomers that wants to start developing on TON. \n\nI surveyed the community of ~5000 devs in four chats in June. And I got around 40 responses. But every one of those responses is from someone who has passed a series of hurdles and becomes a developer in the ecosystem. Even from these heroes, the most common problem I've heard of was \"documentation.\"\n\nFeel free to read the answers here:\n* https://workflowy.com/s/ton-builders-read-on/FFpB7q4NvpqndwO5\n\nAnd how many of these unfortunate souls didn't pass and settle in as dead listeners in dev chats? We don't know.\n\nAll who came from the development fields said where they have pain and what they need to fix. And how many of those people didn't come and were swept away by the complexity of the current TON ecosystem?\n\n![Pasted image 20220726111924](https://user-images.githubusercontent.com/5148967/186676073-7d0f70e1-fe46-4771-be8d-adb852bc3d99.png)\n\nIf we imagine that every newbie is Mario, then the lack of a clever way to learn blockchain is a hole that 99% of little Mario falls into.\n\nWhen I want to START, on ton.org or in the current documentation, even \"DOWNLOAD\" a TON binaries is already a quest! It's a hole. **Many tired after-work developers are buried here, and no one remembers their names**.\n\n\n### Context\n\nThe first thing I want to bring to the ecosystem is a GETTING STARTED project for anyone who wants to play with TON over the weekend.\n\n![Pasted image 20220726112339](https://user-images.githubusercontent.com/5148967/186678065-916fa22b-3a5d-40e6-b517-b5e6d53072ed.png)\n\nI want to start tiny and put a \"Download\" button for the most tired, where Kahneman's \"System 1\" will carry a person on waves of automatisms to the \"Wow, I get it! How cool is that? Where's that complicated blockchain?\"\n\nThis is the pain that worries me personally. The lack of a competent, unfocused path that even a tired after-work developer will follow. The ideal result looks like that:\n\n![Pasted image 20220726112028](https://user-images.githubusercontent.com/5148967/186678013-dd306660-bc6b-42ea-bad1-5fa9a15ceef0.png)\n\nI want to be sure that the person won't get blown away, distracted, have 3 links to 5 repositories, 8 versions of binary that are all out of date, and that the guy won't fall into some whitepaper along the way, where he will _die_. This is what I want to do.\n\n\n### Goals\n\n* Build a straight way for anyone who wants to start developing in TON\n* Build a _user-friendly_ and _scalable_ interface for new developers instead of old-school documentation for hardcore engineers\n* Build a Knowledge Hub that developers will love so that they will improve it over time because of its value\n\n### Deliverables\n\n### Plan Minimum\n\n- Created Getting Started in accessible language and step-by-step action, where TON binaries are downloaded, the first project is created, a wallet is tied up, and NFT is obtained from the blockchain.\n- Obtained a development environment for TON-func-fift on output, where documentation is the point of departure to any problem.\n\n### Plan Maximum\n\n- Getting Started.\n- Environment set up.\n- Collected links to critical resources and tutorials on:\n\t- Web Usage Examples\n\t- Smart-Contracts Development\n\t- Debug & Testing\n\n### Definition of Done\n\n- [x] create an open-source repository\n- [x] choose documentation engine\n- [x] improve styles of documentation pages to become user-friendly even for my mom\n- [x] create hypothesis journeys for different types of developers (zero, regular, advanced, etc.)\n- [x] create visually new documentation experience with all the stuff from old documentation but user-friendly\n- [x] host on test domain as MVP to make closed beta\n- [x] improve with feedback after 10+ live interviews with devs from the community\n- [x] clarify a structure and journeys with interviews experience and experts from the community\n- [x] build the final version with an understanding of the actual needs of different kinds of developers the \n\n### Reward\n\n* Standard TON Footstep NFT\n* 6000 TON\n* New Generation of Happy Developers :)",
    "created_at": "2022-08-25T13:55:21Z",
    "updated_at": "2022-09-13T10:18:25Z"
  },
  {
    "state": "open",
    "title": "Time limited TON adress for rent",
    "body": "### Summary\n\nTime limited TON adress for rent NFT\n\n### Context\n\nIn real next future, museums, government or companies, will convert his fungible private art collections in NFT.\n\n### Goals\n\nThe real owners of NFT will lease or rent his NFT to any digital museums for expositions, but if you transfer NFT, now a day, you leave to be owner, if under contract you rent a contract, if there is problems, you cant recover your NFT.\nIf there are time limited adress, maybe we would be the first secure NFT transfer company\u0432\u0402\u00a6and exploring tranfers you can check the genuine NFT in museums or expositions. Maybe this idea can be good for biggest art owners who dont trust in NFT.\n\n### Deliverables\n\nIdea\n\n### Definition of Done\n\nIdea\n\n### Reward\n\nas you consider.",
    "created_at": "2022-08-16T22:34:47Z",
    "updated_at": "2022-08-23T08:21:01Z"
  },
  {
    "state": "closed",
    "title": "Reward for first auctioners in dns.ton.org",
    "body": "### Summary\n\n\nI am trying to get nice ton domains, to be in a next future in good position for TON explorer\u0432\u0402\u00a6but if i get a good name, other people with with much more money can get it for auction.\nI think the open network need innovative people that believe in platform but these people can lose hope and be angry, because other companies/person with ONLY money, get all they want\u0432\u0402\u00a6and get the idea of good ideas( dns) people.\nMy idea consist in give 1-5% in TON coin to the final price in auction to first person who got the \u0432\u0402\u045aidea\u0432\u0402\u045c.\nDoing this i think that much many people would invest 10 TON in many \u0432\u0402\u045agood names\u0432\u0402\u045c \u0432\u0402\u00a6looking for some money.\nThe open network would get a lot of new dns names, and a lot of rich companies/persons to get it.\nWith more and more names, TON will be much bigger, and growing will be faster.\nI trust in project and want to collaborate. Thanks.\n\n### Context\n\nMany people we are trying to get good ton domains, thinking a lot ant trying to be innovative\u0432\u0402\u00a6but many people only need to have money to adquire in auction all domains they want\n\n### Goals\n\nOnly idea\n\n### Deliverables\n\nIdea\n\n### Definition of Done\n\nIdea\n\n### Reward\n\n4000",
    "created_at": "2022-08-16T21:55:26Z",
    "updated_at": "2022-08-23T09:31:23Z"
  },
  {
    "state": "closed",
    "title": "Enhancing TON Wallet",
    "body": "### Summary\n\nEnhancing TON Wallet by adding several key functionalities.\n\n### Context\n\nTON Wallet is the only cross-platform open source wallet on the TON blockchain, but it lacks important features such as jetton, NFT, staking, purchasing and biometric authentication. It needs much improvement to be comparable to the wallets of major blockchains such as Ethereum and Solana.\n\n### Goals\n\n- Adding support for jetton, NFT, staking, purchasing and biometric authentication to TON Wallet (all platforms).\n\n### Deliverables\n\n- Updated and working version for all platforms.\n\n### Definition of Done\n\n[ ] Update of official repositories and binary version.\n\n### Reward\n\n- 10000 TON (?)\n",
    "created_at": "2022-07-29T13:33:52Z",
    "updated_at": "2022-08-23T12:45:22Z"
  },
  {
    "state": "closed",
    "title": "Done: Article: How does the fee count?",
    "body": "PR for #9 ",
    "created_at": "2022-07-28T13:00:59Z",
    "updated_at": "2022-10-15T13:31:36Z"
  },
  {
    "state": "open",
    "title": "Improving FunC - OpenZeppelin like libraries for easier common abstractions",
    "body": "### Summary\n\nIn its current form, there's no argument that FunC is difficult to work with. One of the primary reasons it's difficult for new developers is that its standard library is very low level and doesn't provide enough abstractions. This can be solved by creating a set of reusable libraries in FunC that will provide developers with common contract services with simple API. Think of these as optional extensions to the standard FunC library.\n\nThis concept is not new. In the Ethereum ecosystem https://www.openzeppelin.com/ provides a very similar service. Whenever a Solidity developer needs to implement some complex pattern, such as proxy contract for supporting code upgrades, they would not try to implement this from scratch. They would simply go to OpenZepplin, download a [ready-made library](https://docs.openzeppelin.com/contracts/4.x/api/proxy) in Solidity that contains the complex implementation and embed it in their project. You can say that OpenZeppelin abstracts away the complexities of the proxy pattern by wrapping it with simpler API.\n\nWe can do the same for common tasks that are complicated in FunC.\n\n### Context\n\nThere's a common complaint in the TON ecosystem that FunC is too complicated. I see many developers comparing it to Solidity and asking why has TON chosen such a complex language for its smart contracts. To be honest, I disagree with this claim. FunC is not much more complicated than Solidity. I believe new developers get this feeling just because the FunC ecosystem is immature and this can be heavily improved by adding a few footsteps. This one for example.\n\nI saw a proposal in the community to dance around FunC by creating a transpiler from JavaScript or Python to FunC that will allow new developers to write their smart contracts in \"easy languages\" like JavaScript and Python instead. Will such an idea really make contract development on TON much easier? I don't think so. FunC syntax is pretty much identical to regular C, and JavaScript syntax was taken from C as well. I don't think this is where the complexity comes from.\n\nA lot of the complexity comes from the lack of abstractions in FunC. Consider the code needed to check if an incoming internal message is a bounced message:\n\n```\nint flags = cs~load_uint(4); ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool\nif (flags & 1) {\n    ;; handle bounced message here\n}\n```\n\nIn most contracts this piece of code appears as is, here's an example from [Jetton official standard](https://github.com/ton-blockchain/token-contract/blob/2c13d3ef61ca4288293ad65bf0cfeaed83879b93/ft/jetton-minter.fc#L46). What is a new developer supposed to understand from looking at this code?\n\nNow imagine that there was a FunC common library for parsing internal messages with abstracted API that looks like this:\n\n```\nint flags = parse_message_flags(cs);\nif (is_bounced(flags)) {\n  ;; handle bounced message here\n}\n```\n\nThis would be so much easier to understand, because all the non-interesting implementation details like the const values of the flags or the bit structure of the incoming message are hidden away inside the library.\n\nNow I'm pretty experienced with FunC and when I look at code that looks like [this](https://github.com/ton-blockchain/token-contract/blob/2c13d3ef61ca4288293ad65bf0cfeaed83879b93/ft/jetton-minter.fc#L33), I can't do much except scratch my head in wonder. WTF. This is not because FunC is complicated. It's because there are bunch of abstractions missing and I'm looking at internal encoding of messages that I don't really care about as a \"regular\" developer.\n\nAbstractions are not a new idea. When we implemented [TonWeb](https://github.com/toncenter/tonweb), we put a lot of abstractions in place to create readable API and hide message encoding details from most developers. Here's an [example](https://github.com/toncenter/tonweb/blob/80640625aad2b6ec65f34a5b0fb824df27020d33/src/contract/wallet/WalletContract.js#L172).\n\n### Goals\n\n* Review existing FunC contracts and look for repeating complex patterns that are candidates for abstraction.\n* Divide these patterns into families - for example one family can be message encoding.\n* Create a collection of FunC libraries that developers can import into their code for performing basic tasks in each family.\n* The libraries will abstract away implementation details (like how the messages are actually encoded) and help developers focus on the major things such as their own logic.\n* Create an environment where developers could collaborate on improving these libraries since the community will need to develop them together. This can even be a GitHub repo dedicated for the purpose on the official TON GitHub org. Since these libraries will be used in smart contracts, changes will have to be reviewed by our best FunC experts.\n* Make these libraries easy to learn with proper documentation.\n\n### Deliverables\n\n* An initial set of FunC importable libraries for different common topics.\n* Simple and easy to understand API that abstracts away the complex implementation details.\n* A place where these libraries are published and maintained.\n* PRs to take some of our common contracts (like Jetton, NFT) and make them rely on the libraries instead to simplify their existing code.\n* Clear documentation for each library that explains every function and shows example usage.\n\n### Definition of Done\n\n[ ] Deliverables part is delivered\n\n### Reward\n\n* Standard TON Footstep NFT\n* I think some grant is due since this task is delicate",
    "created_at": "2022-07-18T17:50:33Z",
    "updated_at": "2022-07-20T22:32:26Z"
  },
  {
    "state": "closed",
    "title": "Developer Community English Content",
    "body": "### Summary\n\nCall for TON Society (https://society.ton.org/) blog posts covering wide variety of topics. \n\n### Context\n\nProvide a platform for teams or independent devs to share insights or updates about their work on TON.   \n\n### Goals\n\nIncrease visibility for teams or independent devs, increase insightful content in English, and incentivize knowledge sharing.\n\n### Deliverables\n\nWrite the post via markdown on Secret Github Gist and share the link via email (society@ton.org) or Telegram (https://t.me/tonsociety_chat). If accepted, review committee will add it to TON Society Blog. \n\n### Definition of Done\n\nShared Secret Github Gist link via email or Telegram channel.\n\n### Reward\n\nTON Footstep NFT\nDiscretionary Toncoin reward for high developer value-add posts",
    "created_at": "2022-07-15T22:26:35Z",
    "updated_at": "2022-08-14T09:14:37Z"
  },
  {
    "state": "open",
    "title": "Decenralized Oracles system",
    "body": "### Summary\n\nA blockchain is designed to work extremely efficiently with its own internal data but is unaware of external data such as real world exchange rates, or other data not on the blockchain. \n\n### Context\n\nA blockchain cannot retrieve data from an external API, due to its internal processes. If nodes address an external API at different times, they may get different results and will never be able to reach consensus, since it is unclear which of these nodes should be trusted.\n\nTo resolve this issue, instead of the \u0432\u0402\u045apull\u0432\u0402\u045c model (in which a blockchain reaches out to the real world for data) we can use the \u0432\u0402\u045apush\u0432\u0402\u045c model. Data suppliers write data to the blockchain for decentralized apps (dApps) to use.\n\nEntities that save data to the blockchain are called blockchain oracles. But the problem is that all of them operate in a centralized way since they need to trust a single source of data. Overall, a system is only as decentralized as its most centralized element. Therefore, a decentralized app that uses data from a single oracle to make key decisions is in fact, highly centralized. Logically, by influencing the behavior of just one component, the oracle, you can influence the behavior of the entire app.\n\nThe idea of a decentralized oracle is an attractive solution, but there is no easy way to implement it.\n\nHere are some solutions on how this issue could be resolved. \n\n### Goals\n\ndAPP and smart-contracts\n\nSimplest solution: multi-signature\n\nThe easiest solution is a multi-signature approach. Several users reach consensus and sign the same data. For instance, let\u0432\u0402\u2122s say we want to receive data about the USD/EUR exchange rate and we have five oracles that need to agree on a consensus value (from outside the blockchain), sign the relevant transaction and send it to a blockchain account that will only accept it if it includes at least three signatures out of five.\n\nBut this approach has several issues:\n\nIf the oracles fail to reach consensus, the data simply won\u0432\u0402\u2122t be sent to the blockchain\nData suppliers have no financial motivation\nThe oracle list is predetermined and limited.\nTo resolve these issues, we need to build a fully-fledged decentralized app, which operates as a marketplace for two kinds of participants:\n\nApps that need data\n\nOracles that can supply data for a reward.\nLet\u0432\u0402\u2122s formulate the main requirements for such a dApp and implement it using FUNC and the TON blockchain.\n\n###   Requirements \n\n**OracleRepresenter**\n\nA contract, which would be deployed by the service provider and would store \"calculation result\".\n\n**Rules**\n\nContract can be in one of the five phases:\u0412\u00a0idle,\u0412\u00a0supply,\u0412\u00a0showdown,\u0412\u00a0calculation,\u0412\u00a0rewarding\n\nPhases can circulate or not\n\n**OracleParticipant**\u0412\u00a0would be rewarded depending on how far they from \"calculation result\"\n\n**OracleParticipant**\n\nA contract, which can deployed by anyone who wants to participate in future calculations.\n\n**Rules**\n\nWould be tied to the specific\u0412\u00a0**OracleRepresenter**, meaning it can participate in calculations for the specified\u0412\u00a0**OracleRepresenter**\n\nIn\u0412\u00a0supply phase\u0412\u00a0it should provide hash of the value\n\nIn\u0412\u00a0showdown phase\u0412\u00a0it should provide the actual value\n\n\n\n### Deliverables\n\n\nrepository with code and documentation\n\ninstructions on how to set up and test app locally\n\n\n### Definition of Done\n\nhttps://github.com/usdton/oracles\n\n### Reward\n\n10000 USDL",
    "created_at": "2022-07-14T05:22:27Z",
    "updated_at": "2022-07-24T09:24:43Z"
  },
  {
    "state": "closed",
    "title": "Soulbound NFT's ",
    "body": "### Summary\n\nSmart contracts for Soulbound NFT's\n\n### Context\n\nSo-called soulbound NFT\u0432\u0402\u2122s are such NFT\u0432\u0402\u2122s that are only owned by single person and should not be sold or transferred.\nOriginal idea was described in this article from Vitalik Buterin http://vitalik.ca/general/2022/01/26/soulbound.html\n\nI think TON needs this kind of NFT's to be on the cutting edge of crypto world.\n\nFYI: this grand is funded by [Getgems](https://getgems.io ) & [ton punks](https://tonpunks.org)\n\n### Goals\n\n- develop SBT smart contract's and code for interacting with them\n\n### Deliverables\n\n- SBT collection smart contract with NFT-item smart contract\n- Single SBT NFT smart contract\n- tests\n- docs\n\nTechnical requirements could be found here: https://telegra.ph/TON-SBT-Contract-Product--Technical-requirements-07-11\n\n### Definition of Done\n\n- TON NFT marketplaces & creators are able to create soulbound NFT's\n\n### Reward\n\n1000 TON's",
    "created_at": "2022-07-13T15:47:22Z",
    "updated_at": "2022-10-15T13:33:19Z"
  },
  {
    "state": "open",
    "title": "Private transactions with zk-snark protocol",
    "body": "### Summary\n\nzero-knowledge proofs (zk-snark) protocol for private transactions on a workchain (private workchain).\n\n### Context\n\nSupport private workchains for companies similar to Hyperledger, VeChain or Corda.\n\n### Goals\n\n- Implement zk-snark protocol.\n\n### Deliverables\n\n- Repository with working implementation of the zk-snark protocol on workchain.\n- Documentation about how to deploy a private workchain.\n\n### Definition of Done\n\n[] Working private workchain example.\n\n### Reward\n\n- 35000 USD equivalent in TON\n- 12500 USD equivalent in TON extra if the implementation is delivered in less than 2 months",
    "created_at": "2022-07-13T08:45:51Z",
    "updated_at": "2023-01-08T13:24:34Z"
  },
  {
    "state": "closed",
    "title": "Creation of a convenient Python framework for working with the TON network, as well as a series of guides on it",
    "body": "### Summary\n\nThe framework must support:\n1) CRUD wallets\n2) Creation of Jettons (supporter of tokens/coins based on TON)\n3) Creation of NFTs\n4) Sending tokens/coins/nft to addresses\n5) Smart contracts for breeding NFT and NFT changes\n\nThis framework will be very convenient for all creators of projects on TON, such as Games and Services.\n\n### Context\n\nThis framework is critically needed. Current documentation and frameworks are very far behind similar on other networks. (for example, solana py)\n\n### Goals\n\nSimplification and acceleration of work with the TON network when creating projects.\n\n### Deliverables\n\nThe task is considered completed after the creation of a working version of the framework that implements all the steps indicated above.\n\n### Definition of Done\n\n[ ] Repository created\n\n[ ] Text files submitted\n\n### Reward\n\nStandard TON Footstep NFT\nHonor",
    "created_at": "2022-07-13T06:02:59Z",
    "updated_at": "2022-11-12T12:04:58Z"
  },
  {
    "state": "open",
    "title": "Article: How to manage your contract gas",
    "body": "### Summary\n\nTeach FunC smart contract developers how to manage gas in the contracts they're writing.\n\n### Context\n\nTON contract gas model is very unique and quite different from the EVM model. Contract developers must design a gas strategy. If they won't do this well, the contract can run out of TON balance for rent and be removed. Messages that the contract sends might not have enough gas and be rejected. This is an advanced topic, not an introductory one.\n\n### Goals\n\n* Help FunC developers write better smart contracts.\n* Help FunC developers avoid gas handling mistakes in their code.\n* Target audience - experienced FunC developers that already know FunC basics.\n* Help teams that are actively working on contracts mature faster and become production ready.\n\n### Deliverables\n\nA markdown article in a form of a GitHub gist or GitHub repository\n\n### Definition of Done\n\n* A well-written article about the general idea and motivation behind TON's gas model for smart contracts.\n* Article lists pit falls where developers can make a gas mistake and render their contract un-usable.\n* Article gives best practices (do's and don'ts) for handling gas in FunC. Example: How much balance should be left for paying rent (storage fees)? How are storage fees calculated and what is the storage fee per cell per year.\n* Article shows all of the above in practice with multiple hands-on code examples.\n\n### Reward\n\n* Standard TON Footstep NFT\n* 400$ in TON equivalent",
    "created_at": "2022-07-12T22:44:37Z",
    "updated_at": "2023-05-15T18:57:36Z"
  },
  {
    "state": "closed",
    "title": "Articles: TON roadmap explained for the general audience with examples of use cases",
    "body": "### Summary\n\nDescribe in \u0412\u00abhuman\u0412\u00bb terms for a mass audience the upcoming TON blockchain plans with use cases.\n\n### Context\n\nThe blockchain team has ambitious plans that are difficult for the non-tech person to understand \u0432\u0402\u201d this creates a barrier to new users and projects, especially those coming from other blockchains.\n\n### Goals\n\n* Provide an article about TON blockchain plan explained with examples\n* Make sure a person with little or no technical knowledge of blockchain understands what TON is aiming for\n\n### Deliverables\n\n* An article in a form of a draft or GitHub repository\n* Each article should cover one of the following topics:\n-- TON Blockchain (general)\n-- TON Nominators\n-- TON Payments\u0432\u0402\u0401\n-- TON Proxy\n-- TON Sites\n-- TON Storage\n-- Bitcoin & EVM Crosschain\n\n### Definition of Done\n\n* A well-written articles about TON's milestones\n* Examples of how the new TON features will be used by the community / projects\n* Comparison of improvements from the TON roadmap with plans for other popular blockchains\n\n### Reward\n\n* Standard TON Footstep NFT\n* TBD",
    "created_at": "2022-07-08T12:05:25Z",
    "updated_at": "2023-06-05T14:33:00Z"
  },
  {
    "state": "closed",
    "title": "VS Code extension for FunC support",
    "body": "### Summary\n\nEvolve existing VS Code [extension](github.com/ton-foundation/vscode-func) functionality.\n\n### Context\n\nWe have existing  [extension](github.com/ton-foundation/vscode-func), but it needs to be improved to support more use-cases and modern FunC syntax.\n\n### Goals\n\n- involve existing VS Code extension\n\n### Deliverables\n\n* implement new FunC syntax functionality (includes & strings)\n* includes file tree analysis \n* refactoring functions and variables\n* variable type inference \n* better type suggestions\n* auto-formatting\n* snippets for opcodes \n* smart auto-complete \n\n### Definition of Done\n\nVS Code users should be able to easily write & refactor FunC code with help of this extension.\nWork should be done in two month after start.\n\n### Reward\n\n4000 TON's",
    "created_at": "2022-07-05T20:44:51Z",
    "updated_at": "2022-08-30T17:00:30Z"
  },
  {
    "state": "closed",
    "title": "Added self to README",
    "body": "",
    "created_at": "2022-07-05T13:10:09Z",
    "updated_at": "2022-08-14T09:12:35Z"
  },
  {
    "state": "closed",
    "title": "Updated NFT visual",
    "body": "",
    "created_at": "2022-07-04T20:47:56Z",
    "updated_at": "2022-07-04T20:48:03Z"
  },
  {
    "state": "closed",
    "title": "TON Dev environment tool",
    "body": "### Summary\n\nCLI tool for fast and easy setup for TON smart-contract developers. The best analogy is the\u0412\u00a0[Hardhat](https://hardhat.org/)\u0412\u00a0from the Ethereum world.\n\n### Context\n\nAt this stage there is no such tool for setting up a new smart contract project with easy deployment, testing and debugging using JS/TS, which are standard in crypto world. We have toncli which is a good product, but since its core philosophy is to use Fift & FunC for deploying scripts, testing, etc - it's not that easy for new developers to quickly jump in.\n\n### Goals\n\n- Come up with a tool that would help developers to jump into TON smart contracts development as fast as possible\n- Lower the bar for SMC developers in TON\n- Make it easy for solidity developers to start working with TON\n\n### Deliverables\n\n- CLI tool itself with functionality:\n- TypeScript supported project template for developing contracts in\u0412\u00a0[TON](https://ton.org/)\u0412\u00a0with the\u0412\u00a0[FunC](https://ton.org/docs/#/func/stdlib)\u0412\u00a0language.\n- Clear testing scenarios, easy way to deploy\u0412\u00a0a smart contract with an example in the project template.\n- Integration of\u0412\u00a0[ton](https://github.com/tonwhales/ton)\u0412\u00a0and\u0412\u00a0[ton-contract-executor](https://github.com/Naltox/ton-contract-executor)\u0412\u00a0libraries.\n- Modern examples of developing code in\u0412\u00a0[FunC](https://ton.org/docs/#/func/stdlib)\n- Tool should be fully covered with docs\n- Took the best from\u0412\u00a0[toncli](https://github.com/disintar/toncli)\u0412\u00a0and try to be better and more easy to use\n- e2e communication with the\u0412\u00a0developer community at the release time\n\n### Definition of Done\n\nDevelopers are able to setup an environment for developing smart contracts in TON and start experimenting in less than 1 hour.\n\n### Reward\n\n- 12500 USD equivalent in TON",
    "created_at": "2022-07-01T23:13:19Z",
    "updated_at": "2023-03-17T15:51:36Z"
  },
  {
    "state": "closed",
    "title": "Closes Issue #5 with TON Footstep NFT concept",
    "body": "",
    "created_at": "2022-06-30T15:51:19Z",
    "updated_at": "2022-06-30T15:51:56Z"
  },
  {
    "state": "closed",
    "title": "Update README.md",
    "body": "Happy to join the committee!",
    "created_at": "2022-06-29T10:56:48Z",
    "updated_at": "2022-06-29T10:57:15Z"
  },
  {
    "state": "closed",
    "title": "Make getting Toncoin in test network easier",
    "body": "### Summary\n\nRobust solution for distributing testnet TONs to developers.\n\n### Context\n\nCurrent faucet bot is under constant attempts to drain it and CAPTCHA solution affects user experience perspective.\n\n### Goals\n\n* Come up with a plan for a reliable and robust testnet TON distribution\n* Provide a bot, website or any other means to fund developers with test TONs\n\n### Deliverables\n\n* Plan for fighting misusage attempts\n* Service capable of distributing TON on testnet, which is capable of working under constant malicious usage attempts\n\n### Definition of Done\n\n - [ ] Developers are able to get 1 TON under less than 1 minute \n\n### Reward\n\n* Standard TON Footsteps NFT\n* 2500 USD equivalent in TON",
    "created_at": "2022-06-23T12:38:29Z",
    "updated_at": "2023-03-31T16:55:01Z"
  },
  {
    "state": "closed",
    "title": "General chain stats website",
    "body": "### Summary\n\nWebsite with stats about the mainnet.\n\n### Context\n\nTON now lacks a single website / project to report blockchain stats like [Solana bench](https://solanabeach.io) or [Etherscan/charts](https://etherscan.io/charts).\n\n### Goals\n\n* Provide a reliable source of statistics regarding the TON Blockchain\n\n### Deliverables\n\n* Working and functioning service with reasonable SLAs.\n\n### Definition of Done\n\n[ ] Website is available online\n[ ] Information on validators, transactions speed, volume etc. is displayed.\n\n### Reward\n\n* Standard TON Footstep NFT\n* 7500 USD equivalent in TON",
    "created_at": "2022-06-23T12:32:43Z",
    "updated_at": "2022-12-27T11:23:00Z"
  },
  {
    "state": "open",
    "title": "TON Cookbook",
    "body": "### Summary\n\nTON might benefit from getting a cookbook with clear recipes for solving some common tasks.\n\n### Context\n\nCookbooks are common in software development: these are collections of actionable and practical tips & tricks on how to execute certain concepts. This [question](https://www.quora.com/What-is-a-cookbook-in-programming-language) on Quora contains a great explanation of what cookbook is.\n\nRegarding the blockchain there are a couple of good examples: [Ethereum](https://www.packtpub.com/product/ethereum-cookbook/9781789133998) and [Solana](https://solanacookbook.com/#contributing) ones. \n\nInspiration: examples from the community\n\nTo understand which exactly FunC examples developers need was launched a feedback form in google document for everyone from the community:\n\nhttps://docs.google.com/document/d/1l5865CZ2IzjD1r054rYPaPkNCBaUVVt2iEy9bWJGZqA/edit#\n\nEveryone is welcome! If you don't see necessary things just add them to the list.\n\n\n### Goals\n\n* Deliver TON cookbook containing recipes on the questions which are frequently asked by the community\n\n### Deliverables\n\n* To write examples, you should decide where to write them. We provided a page in the TON Documentation for that:\n\nhttps://ton.org/docs/develop/func/cookbook\n\n### Definition of Done\n\n - [x] Any junior developer without prior blockchain development experience is able to get quick onboarding to TON\n - [x] Any junior developer is able to set up TON developer environment and submit a hello world contract\n\n### Reward\n\n* Standard TON Footsteps NFT\n* 25 USD equivalent in TON for every high-quality func example covered from the initial list.\n* Minimum of 10 examples needed to receive payment\n\n#### How to participate?\n\n- Please, respond to this message with a list of examples you want to cover, so I'll add you as assigned to them",
    "created_at": "2022-06-23T12:21:01Z",
    "updated_at": "2023-06-11T16:31:06Z"
  },
  {
    "state": "closed",
    "title": "Articles: How does the fee count?",
    "body": "### Summary\n\nWe suggest delivering a clear article on how to calculate fees on TON.\n\n### Context\n\nIt is unclear how fee works now and what happens when transactions are sent.\n\n### Goals\n\n* Provide an article on how to calculate fees on TON with examples.\n* Make sure person with little or no blockchain literacy understands how fees work on TON.\n\n### Deliverables\n\n* An article in a form of a draft or GitHub repository \n\n### Definition of Done\n\n[ ] Person with no or little blockchain literacy able to understand how fees work on TON\n\n### Reward\n\n* Standard TON Footstep NFT",
    "created_at": "2022-06-23T11:59:02Z",
    "updated_at": "2022-10-15T13:32:06Z"
  },
  {
    "state": "closed",
    "title": "Examples: How to recieve payments in a Telegram bot",
    "body": "### Summary\n\nExample article and supplementary code for launching a telegram bot capable of accepting payments in TON.\n\n### Context\n\nBots are great for providing use cases for TON and we want to encourage people to build more of them. That's why we need a clear tutorial showing how to start accepting payments in TON.\n\n### Goals\n\n* Provide a deployable example of Telegram bot capable of accepting payments through TON.\n* Make sure code is covered with comments and sufficient documentation is provided for junior developers to handle bot deploy and code reusage.\n* Provide clear instructions on how to switch between mainnet and testnet.\n\n### Deliverables\n\n* repository with bot code and documentation\n* instructions on how to set up and test bot locally \n\n### Definition of Done\n\n[ ] Bot can be run from the code provided in the repository\n[ ] Bot accepts payments on testnet\n[ ] Bot accepts payments on mainnet\n\n### Reward\n\n* Standard TON Footstep NFT\n* 777 Toncoin",
    "created_at": "2022-06-23T11:51:11Z",
    "updated_at": "2023-03-16T08:43:07Z"
  },
  {
    "state": "closed",
    "title": "Tutorials: How to create (mint) own NFT",
    "body": "### Summary\n\nTutorial allowing minting single NFT without help of 3rd parties, just with a bare CLIs and general environment for FunC / development on TON.\n\n### Context\n\nThere is no tutorial on how to mint standalone NFT in TON without using help of any 3rd party. With this Footstep we suggest creating tutorial and / or corresponding repository with all the code and tools required to mint a single NFT on the mainnet and testnet.\n\n### Goals\n\n* Create tooling / code for minting single NFT\n* Cover it with extensive documentation\n* Provide comprehensive README, so the repository can be used on its own and/or\n* Write a tutorial for using such a repository, so a mediocre developer capable to set up FunC / TON development environment is able to mint NFT following this tutorial\n\n### Deliverables\n\n* Repository with tools to mint standalone NFT\n* Tutorial covering how to mint standalone NFT\n\n### Definition of Done\n\n[ ] Suggested tools allow minting standalone NFT following the instructions\n[ ] Developers are able to find information on how to set up initial environment and to mint NFT \n\n### Reward\n\n* Standard TON Footstep NFT\n* 777 Toncoin",
    "created_at": "2022-06-21T21:23:18Z",
    "updated_at": "2022-10-28T16:19:54Z"
  },
  {
    "state": "closed",
    "title": "Added Footstep issue template",
    "body": "",
    "created_at": "2022-06-16T16:38:09Z",
    "updated_at": "2022-06-16T16:38:16Z"
  },
  {
    "state": "closed",
    "title": "Describe TON Footsteps NFT concept",
    "body": "# Describe TON Footsteps NFT concept\n\n## Summary\nTON Footsteps need to be connected with blockchain, thus a person responsible for helping TON to make a single footstep, will get a single NFT delivered to their TON address.\n\n## Context\n* Such NFT should contain link to a TON Footstep description.\n* The process of issuance should be automated.\n* Such NFTs ideally should be SBTs (bound to the address without an option to sell or transfer NFT to other account).\n\n## Goals\n* Create a trace of footsteps on TON master chain. \n\n## Deliverables\n* Title and description of TON Footstep NFT.\n* Suggested picture / visual representation of such NFT.\n* Description of the process of minting such NFTs.\n\n## Definition of Done\n - [x] Title and description are present\n - [x] Visual representation is aesthetically pleasant\n - [x] Description of the process states when and how TON Footstep NFT gets minted \n\n## Reward\n* Standard TON Footstep NFT",
    "created_at": "2022-06-15T15:04:39Z",
    "updated_at": "2023-06-07T18:33:54Z"
  },
  {
    "state": "closed",
    "title": "Update ton-footstep-issue-template.md",
    "body": "",
    "created_at": "2022-06-15T14:50:47Z",
    "updated_at": "2022-06-15T15:08:58Z"
  },
  {
    "state": "closed",
    "title": "Init the TON Footsteps workflow",
    "body": "# Init the TON Footsteps workflow\n\n## Introduction\nThis proposal describes what we need to launch the TON Footsteps workflow.\n\n## Goals\n* Provide a workflow to improve the TON ecosystem (articles, docs, tutorials, tools, etc.) by the community\n* Make the proposal process simple, efficient, and transparent\n\n## Deliverables\n* The list of the TON Footsteps\n* Template of a proposal\n* Instruction: How to propose a task\n* Instruction: How to complete a task from the TON Footsteps list",
    "created_at": "2022-06-15T08:17:39Z",
    "updated_at": "2023-06-07T18:33:30Z"
  },
  {
    "state": "closed",
    "title": "Done: Init the TON Footsteps workflow",
    "body": "PR for #3 ",
    "created_at": "2022-06-15T08:09:32Z",
    "updated_at": "2022-06-15T08:59:23Z"
  },
  {
    "state": "closed",
    "title": "New proposal: Init the TON Footsteps workflow",
    "body": "This proposal describes what we need to launch a workflow of the TON Footsteps.",
    "created_at": "2022-06-13T13:59:23Z",
    "updated_at": "2023-03-31T08:59:33Z"
  }
]